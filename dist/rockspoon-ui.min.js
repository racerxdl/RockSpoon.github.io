var rockspoonUi=angular.module("rockspoon-ui",["ui.bootstrap","validation.match","ngAnimate","ui.sortable","sf.virtualScroll","ngMessages","angular-bind-html-compile"]);rockspoonUi.factory("focus",["$rootScope","$timeout",function($rootScope,$timeout){return function(name){return $timeout(function(){return $rootScope.$broadcast("focusOn",name)},20)}}]).directive("focusOn",function(){return function(scope,elem,attr){return scope.$on("focusOn",function(e,name){if(name===attr.focusOn){elem.focus();var val=elem.val();elem.val("").val(val)}})}}),rockspoonUi.directive("rsCustomPriceModifiers",function(){return{controller:["$scope",function($scope){var emptyRow,pricesTemplate=[];$scope.opts={rowFactory:function(){return emptyRow={extra:"",prices:_.cloneDeep(pricesTemplate)}}};var removed=function(n,o,model){if(_.isUndefined(o)||n.length>=o.length)return!1;var diff=_.difference(o,n);return _.forEach(model,function(obj){_.remove(obj.prices,function(price){return price.size===diff[0]})}),!0},added=function(n,o,model){if(_.isUndefined(n)||!_.isUndefined(o)&&n.length<=o.length)return!1;var diff=_.difference(n,o);return _.forEach(model,function(obj){obj.prices.push({price:null,size:diff[0]})}),!0},changed=function(n,o,model){if(_.isUndefined(n)||_.isUndefined(o)||n.length!==o.length)return!1;for(var indices=null,i=0;i<n.length;++i)if(n[i]!==o[i]){if(null!==indices)return!1;indices={idx:i,size:n[i]}}return null===indices?!1:(_.forEach(model,function(obj){obj.prices[indices.idx].size=indices.size}),!0)},moved=function(n,o,model){return _.isUndefined(n)||_.isUndefined(o)||n.length!==o.length?!1:(_.forEach(model,function(obj){var map={};_.forEach(obj.prices,function(price){map[price.size]=price}),obj.prices.length=0,_.forEach(n,function(size){obj.prices.push(map[size])})}),!0)};$scope.$watch(function(){return $scope.sizesModel},function(n,o){pricesTemplate.length=0,_.forEach($scope.sizesModel,function(size){pricesTemplate.push({price:null,size:size})}),emptyRow&&(emptyRow.prices=_.cloneDeep(pricesTemplate));removed(n,o,$scope.ngModel)||added(n,o,$scope.ngModel)||changed(n,o,$scope.ngModel)||moved(n,o,$scope.ngModel)},!0)}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesModel:"="},template:"<div class='rs-custom-price-modifiers'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table class='rs-custom-price'>      <thead>        <tr style='text-align:center'>          <td colspan='3'></td>          <td class='rs-margin-left' width='50px' ng-repeat='size in $parent.sizesModel'><div ng-if='size !== \"single\"'>{{size}}</div></td>          <td class='rs-margin-left'></td>        </tr>      </thead>      <tbody>        <tr ng-repeat='model in internalModel' ng-class='{lightgray:model.$isNew && !$first}'>          <td class='rs-price-td' style='width:108px'>            <rs-remove-button>Enter price for</rs-remove-button>          </td>          <td class='rs-margin-left rs-price-td'  width='50px'>              <rs-text-edit mandatory='!$last' digit ng-model='model.extra' on-change='changed(model)'></rs-text-edit>          </td>          <td class='rs-margin-left rs-price-td' style='width:95px'>extra options $</td>          <td class='rs-margin-left rs-price-td' ng-repeat='price in model.prices'>            <rs-text-edit currency mandatory='!model.$isNew' class='rs-price' ng-model='price.price' placeholder='0.00' on-change='changed(model)'></rs-text-edit>          </td>          <td class='rs-margin-left rs-price-td'>Total</td>        </tr>      </tbody>    </table>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsExtraModifiers",function(){return{controller:["$scope",function($scope){}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesModel:"=",onFocus:"="},template:"<div class='rs-extra-modifiers'>  <rs-text-edit style='width:58%;' placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-ingredient-title'></rs-text-edit>  <div class='rs-abbreviation' style='width:58%;text-align:right' ng-show='ngModel.title'><rs-text-edit style='display:inline-block;position:relative;width:80%;' placeholder='Abbreviation' ng-model='ngModel.abbreviation'></rs-text-edit></div>  <rs-modifiers-for-free on-focus='onFocus' has-show-in-menu='false' ng-show='ngModel.title' type='Extra' ng-model='ngModel' sizes-model='sizesModel'></rs-modifiers-for-free></div>"}}),rockspoonUi.directive("rsModifiersForFree",function(){return{controller:["$scope",function($scope){$scope.maxModifiersOptions=[],$scope.$watch(function(){return $scope.ngModel.options},function(){var oldLen=$scope.maxModifiersOptions.length;$scope.maxModifiersOptions.length=0;for(var i=0;i<$scope.ngModel.options.length;++i)$scope.maxModifiersOptions.push({label:""+(i+1),value:""+(i+1)});oldLen!==i&&($scope.ngModel.maxModifiers=""+i)},!0);var checkSize=function(prices,size){for(var i=0;i<prices.length;++i)if(prices[i].size===size)return!0;return!1},fillNewFields=function(model){_.forEach(model,function(option){for(var prices=option.prices,i=0;i<prices.length;++i)_.contains($scope.sizesModel,prices[i].size)||prices.splice(i--,1);option.prices.length!==$scope.sizesModel.length&&_.forEach($scope.sizesModel,function(size){checkSize(option.prices,size)||option.prices.push({size:size,price:null})})})},noneOptions=null;$scope.$watchCollection("ngModel.forFree",function(n,o){"NONE"!==n&&"NONE"===o?(noneOptions=_.cloneDeep($scope.ngModel.options),_.forEach($scope.ngModel.options,function(option){option.prices.length=0})):"NONE"===n&&(null!==noneOptions&&($scope.ngModel.options=noneOptions),fillNewFields($scope.ngModel.options),noneOptions=null),"CUSTOM"===n&&fillNewFields($scope.ngModel.customPrices)})}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesModel:"=",last:"=",type:"@",hasShowInMenu:"=",onFocus:"="},template:"<div class='rs-modifiers-for-free'>  <rs-section ng-show='!last' title='Modifiers for free:' style='font-weight:normal !important'>    <table width='58%'>      <tr>        <td width='33%'>          <rs-radio-button id='rs-sides_all' value='ALL' label='All' ng-model='ngModel.forFree'></rs-radio-button>        </td>        <td width='33%' class='rs-margin-left'>          <rs-radio-button id='rs-sides_none' value='NONE' label='None' ng-model='ngModel.forFree'></rs-radio-button>        </td>        <td width='33%' class='rs-margin-left'>          <rs-radio-button id='rs-sides_custom' value='CUSTOM' label='Custom' ng-model='ngModel.forFree'></rs-radio-button>        </td>      </tr>    </table>  </section>  <rs-section ng-show='!last'>    <div ng-if='ngModel.forFree === \"ALL\"' style='width: 58%;'>      <rs-check-box id='rs-sides-modifier-{{$index}}' label='With Default Option' ng-if='ngModel.mandatory' ng-model='ngModel.hasDefault'></rs-check-box>      <rs-multi-price-modifiers-text-edit on-focus='onFocus' type='{{::type}}' has-show-in-menu='hasShowInMenu' has-default='ngModel.hasDefault' ng-model='ngModel.options'></rs-multi-price-modifiers-text-edit>      <table width='100%' class='rs-max-order' ng-if='!ngModel.mandatory'>        <tr>          <td nowrap style='vertical-align:middle;font-weight:normal'>Can order maximum of</td>          <td class='rs-margin-left' ng-hide='ngModel.options.length < 2'>            <rs-combo-box options='maxModifiersOptions' ng-model='ngModel.maxModifiers'></rs-combo-box>          </td>          <td class='rs-margin-left' style='vertical-align:middle;font-weight:normal' ng-show='ngModel.options.length < 2'>1</td>          <td nowrap class='rs-margin-left' width='100%' style='vertical-align:middle;font-weight:normal'>{{::type}}</td>        </tr>      </table>    </div>    <div ng-if='ngModel.forFree === \"NONE\"'>      <rs-check-box style='width:58%' id='rs-sides-modifier-{{$index}}' label='With Default Option' ng-if='ngModel.mandatory' ng-model='ngModel.hasDefault'></rs-check-box>      <rs-multi-price-modifiers-text-edit on-focus='onFocus' type='{{::type}}' has-show-in-menu='hasShowInMenu' has-default='ngModel.hasDefault' sizes-model='sizesModel' ng-model='ngModel.options'></rs-multi-price-modifiers-text-edit>    </div>    <div class='rs-for-free-custom' ng-if='ngModel.forFree === \"CUSTOM\"'>      <div style='width:58%;text-align:right'><rs-text-edit style='display:inline-block;position:relative;width:75%' label='Enter maximum number of free modifiers' label-same-line='true' ng-model='ngModel.maxFreeModifiers' digit></rs-text-edit></div>      <div style='width:100%'><rs-custom-price-modifiers sizes-model='sizesModel' ng-model='ngModel.customPrices'></rs-custom-price-modifiers></div>      <rs-check-box id='rs-sides-modifier-{{$index}}' style='width: 58%;' label='With Default Option' ng-if='ngModel.mandatory' ng-model='ngModel.hasDefault'></rs-check-box>      <div style='width:58%'><rs-multi-price-modifiers-text-edit on-focus='onFocus' type='{{::type}}' has-show-in-menu='hasShowInMenu' has-default='ngModel.hasDefault' ng-model='ngModel.options'></rs-multi-price-modifiers-text-edit></div>    </div>  <rs-section ng-show='!last'></div>"}}),rockspoonUi.directive("rsMultiCookingModifiers",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{title:"",abbreviation:"",mandatory:!0,hasDefault:!1,options:[]}}},$scope.changeMandatory=function(idx){$scope.ngModel.length>=1&&($scope.ngModel[idx].hasDefault=!1)}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-cooking-modifiers'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat-start='model in internalModel'>      <rs-text-edit on-change='changed(model)' placeholder='Enter Title' label='Title' label-same-line='true' ng-model='model.title' class='rs-cooking-title'></rs-text-edit>      <div class='rs-abbreviation' style='text-align:right' ng-show='!$last'><rs-text-edit on-change='changed(model)' style='display:inline-block;position:relative;width:80%;' placeholder='Abbreviation' ng-model='model.abbreviation'></rs-text-edit></div>      <rs-on-off ng-show='!$last' off='Optional Modifier' on='Mandatory Modifier' ng-model='model.mandatory' on-change='$parent.$parent.$parent.changeMandatory($index)'></rs-on-off>      <rs-section style='font-weight:normal !important' ng-show='!$last' title='Available Modifiers'>        <rs-check-box id='rs-cooking-modifier-{{$index}}' label='With Default Option' ng-if='model.mandatory' ng-model='model.hasDefault'></rs-check-box>        <rs-multi-non-price-cooking-modifiers-text-edit has-default='model.hasDefault' ng-model='model.options'></rs-multi-non-price-cooking-modifiers-text-edit>      </section>    </rs-remove-button>    <hr ng-repeat-end class='separator' ng-if='!$last' />  </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiIngredientModifiers",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{title:"",abbreviation:null,maxModifiers:"1",maxFreeModifiers:"1",mandatory:!0,forFree:"ALL",hasDefault:!1,customPrices:[],options:[]}}},$scope.changeMandatory=function(idx){$scope.ngModel.length>=1&&($scope.ngModel[idx].hasDefault=!1)}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesModel:"=",onFocus:"="},template:"<div class='rs-multi-ingredient-modifiers'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat-start='model in internalModel'>      <rs-text-edit on-change='changed(model)' style='width:58%;' placeholder='Enter Title' label='Title' label-same-line='true' ng-model='model.title' class='rs-ingredient-title'></rs-text-edit>      <div class='rs-abbreviation' style='width:58%;text-align:right' ng-show='!$last'><rs-text-edit on-change='changed(model)' style='display:inline-block;position:relative;width:80%;' placeholder='Abbreviation' ng-model='model.abbreviation'></rs-text-edit></div>      <rs-on-off ng-show='!$last' off='Optional Modifier' style='width: 58%;' on='Mandatory Modifier' ng-model='model.mandatory' on-change='$parent.$parent.$parent.changeMandatory($index)'></rs-on-off>      <rs-modifiers-for-free on-focus='$parent.$parent.$parent.onFocus' has-show-in-menu='false' type='Ingredient' last='$last' ng-model='model' sizes-model='$parent.$parent.$parent.sizesModel'></rs-modifiers-for-free>    </rs-remove-button>    <hr ng-repeat-end class='separator' ng-if='!$last' />  </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiNonPriceModifiersTextEdit",function(){return{controller:["$scope",function($scope){$scope.opts={onRowRemoved:function(model){model.isDefault&&$scope.ngModel.length&&($scope.ngModel[0].isDefault=!0)},rowFactory:function(){return{isDefault:0===$scope.ngModel.length}}},$scope.$watch("hasDefault",function(){_.forEach($scope.ngModel,function(option){option.isDefault=!1}),$scope.hasDefault&&$scope.ngModel.length&&($scope.ngModel[0].isDefault=!0)}),$scope.changeDefault=function(idx){_.forEach($scope.ngModel,function(model,midx){model.isDefault=midx===idx})}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",hasDefault:"=",onFocus:"="},template:"<div class='rs-multi-non-price-modifiers-text-edit'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table width='100%'>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>          <td width='600px' style='text-align:right'>            <rs-remove-button ng-model='model'>              <table width='100%'>                <tr>                  <td>                    <rs-text-edit database='true' on-focus='$parent.$parent.$parent.onFocus(model)' mandatory='!$last' ng-model='model.ingredient.title' placeholder='Add Modifier' on-change='changed(model)' index='$index + 1'></rs-text-edit>                  </td>                </tr>              </table>            </rs-remove-button>          </td>          <td class='rs-default-radio rs-margin-left'>            <rs-radio-button ng-show='$parent.$parent.hasDefault && !$last' on-change='$parent.$parent.changeDefault($index)' id='rs-non-price_default_{{$index}}' ng-value='true' ng-model='model.isDefault'></rs-radio-button>          </td>          <td class='rs-margin-left rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>      </tbody>    </table>  </rs-multi-line></div>"}}).directive("rsMultiNonPriceCookingModifiersTextEdit",function(){return{controller:["$scope",function($scope){$scope.opts={onRowRemoved:function(model){model.isDefault&&$scope.ngModel.length&&($scope.ngModel[0].isDefault=!0)},rowFactory:function(){return{name:"",isDefault:0===$scope.ngModel.length}}},$scope.$watch("hasDefault",function(){_.forEach($scope.ngModel,function(option){option.isDefault=!1}),$scope.hasDefault&&$scope.ngModel.length&&($scope.ngModel[0].isDefault=!0)}),$scope.changeDefault=function(idx){_.forEach($scope.ngModel,function(model,midx){model.isDefault=midx===idx})}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",hasDefault:"="},template:"<div class='rs-multi-non-price-modifiers-text-edit'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table width='100%'>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>          <td width='600px' style='text-align:right'>            <rs-remove-button ng-model='model'>              <table width='100%'>                <tr>                  <td>                    <rs-text-edit mandatory='!$last' ng-model='model.name' placeholder='Add Modifier' on-change='changed(model)' index='$index + 1'></rs-text-edit>                  </td>                </tr>              </table>            </rs-remove-button>          </td>          <td class='rs-default-radio rs-margin-left'>            <rs-radio-button ng-show='$parent.$parent.hasDefault && !$last' on-change='$parent.$parent.changeDefault($index)' id='rs-non-price_default_{{$index}}' ng-value='true' ng-model='model.isDefault'></rs-radio-button>          </td>          <td class='rs-margin-left rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>      </tbody>    </table>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiPriceModifiersTextEdit",function(){return{controller:["$scope",function($scope){var emptyRow,pricesTemplate=[];$scope.opts={onRowRemoved:function(model){model.isDefault&&$scope.ngModel.length&&($scope.ngModel[0].isDefault=!0)},rowFactory:function(){return emptyRow={name:"",isDefault:0===$scope.ngModel.length,notAvailable:!1,showInMenu:!1,hasDefault:!1,prices:_.cloneDeep(pricesTemplate)}}},$scope.clicked=function(model){$scope.onFocus&&$scope.onFocus(model)};var removed=function(n,o,model){if(_.isUndefined(o)||n.length>=o.length)return!1;var diff=_.difference(o,n);return _.forEach(model,function(obj){_.remove(obj.prices,function(price){return price.size===diff[0]})}),!0},added=function(n,o,model){if(_.isUndefined(n)||!_.isUndefined(o)&&n.length<=o.length)return!1;var diff=_.difference(n,o);return _.forEach(model,function(obj){obj.prices.push({price:null,size:diff[0]})}),!0},changed=function(n,o,model){if(_.isUndefined(n)||_.isUndefined(o)||n.length!==o.length)return!1;for(var indices=null,i=0;i<n.length;++i)if(n[i]!==o[i]){if(null!==indices)return!1;indices={idx:i,size:n[i]}}return null===indices?!1:(_.forEach(model,function(obj){obj.prices[indices.idx].size=indices.size}),!0)},moved=function(n,o,model){return _.isUndefined(n)||_.isUndefined(o)||n.length!==o.length?!1:(_.forEach(model,function(obj){var map={};_.forEach(obj.prices,function(price){map[price.size]=price}),obj.prices.length=0,_.forEach(n,function(size){map.hasOwnProperty(size)&&obj.prices.push(map[size])})}),!0)};$scope.$watch(function(){return $scope.sizesModel},function(n,o){pricesTemplate.length=0,_.forEach($scope.sizesModel,function(size){pricesTemplate.push({price:null,size:size})}),emptyRow&&(emptyRow.prices=_.cloneDeep(pricesTemplate));removed(n,o,$scope.ngModel)||added(n,o,$scope.ngModel)||changed(n,o,$scope.ngModel)||moved(n,o,$scope.ngModel)},!0),$scope.$watch("hasDefault",function(){_.forEach($scope.ngModel,function(option){option.isDefault=!1}),$scope.hasDefault&&$scope.ngModel.length&&($scope.ngModel[0].isDefault=!0)}),$scope.changeDefault=function(idx){_.forEach($scope.ngModel,function(model,midx){model.isDefault=midx===idx})}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesModel:"=",hasDefault:"=",hasShowInMenu:"=",type:"@",onFocus:"="},template:"<div class='rs-multi-price-modifiers-text-edit'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table>      <thead>        <tr>          <td></td>          <td class='rs-margin-left' width='50px' ng-repeat='size in $parent.sizesModel'><div ng-if='size !== \"single\"'>{{size}}</div></td>          <td></td>          <td ng-if='$parent.hasShowInMenu' style='width:70px'>Show in Menu</td>          <td style='width:86px'>{{::$parent.type}} not Available</td>          <td></td>        </tr>      </thead>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\":$last,lightgray:model.$isNew && !$first}'>          <td style='width:265px;text-align:right'>            <rs-remove-button ng-model='model'>              <table width='100%'>                <tr>                  <td>                    <rs-text-edit database='true' on-focus='$parent.$parent.$parent.clicked(model)' mandatory='!$last' ng-model='model.ingredient.title' placeholder='Add Modifier' on-change='changed(model)' index='$index + 1'></rs-text-edit>                  </td>                </tr>              </table>            </rs-remove-button>          </td>          <td class='rs-margin-left rs-price-td' ng-repeat='price in model.prices'>            <rs-text-edit mandatory='!model.$isNew' currency class='rs-price' ng-model='price.price' placeholder='0.00' on-change='changed(model)'></rs-text-edit>          </td>          <td class='rs-default-radio rs-margin-left'>            <rs-radio-button ng-show='$parent.$parent.hasDefault && !$last' on-change='$parent.$parent.changeDefault($index)' id='rs-price_default_{{$index}}' ng-value='true' ng-model='model.isDefault'></rs-radio-button>          </td>          <td ng-if='$parent.$parent.hasShowInMenu' style='vertical-align:top;text-align:center;padding-top:7px'>            <rs-check-box id='item_not_av_{{::$index}}' ng-model='model.showInMenu'></rs-check-box>          </td>          <td style='vertical-align:top;text-align:center;padding-top:7px'>            <rs-check-box id='item_not_av_{{::$index}}' ng-model='model.notAvailable'></rs-check-box>          </td>          <td class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>      </tbody>    </table>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiSidesModifiers",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{title:"",abbreviation:null,maxModifiers:"1",maxFreeModifiers:"1",mandatory:!0,forFree:"ALL",hasDefault:!1,customPrices:[],options:[]}}},$scope.changeMandatory=function(idx){$scope.ngModel.length>=1&&($scope.ngModel[idx].hasDefault=!1)}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesModel:"=",onFocus:"="},template:"<div class='rs-multi-sides-modifiers'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat-start='model in internalModel'>      <rs-text-edit on-change='changed(model)' style='width:58%;' placeholder='Enter Title' label='Title' label-same-line='true' ng-model='model.title' class='rs-sides-title'></rs-text-edit>      <div class='rs-abbreviation' style='width:58%;text-align:right' ng-show='!$last'><rs-text-edit on-change='changed(model)' style='display:inline-block;position:relative;width:80%;' placeholder='Abbreviation' ng-model='model.abbreviation'></rs-text-edit></div>      <rs-on-off ng-show='!$last' off='Optional Modifier' style='width: 58%;' on='Mandatory Modifier' ng-model='model.mandatory' on-change='$parent.$parent.$parent.changeMandatory($index)'></rs-on-off>      <rs-modifiers-for-free on-focus='$parent.$parent.$parent.onFocus' has-show-in-menu='true' type='Sides' last='$last' ng-model='model' sizes-model='$parent.$parent.$parent.sizesModel'></rs-modifiers-for-free>    </rs-remove-button>    <hr ng-repeat-end class='separator' ng-if='!$last' />  </rs-multi-line></div>"}}),rockspoonUi.directive("rsOnTheSideModifiers",function(){return{controller:["$scope",function($scope){}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",onFocus:"="},template:"<div class='rs-on-the-side-modifiers'>  <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-on-the-side-title'></rs-text-edit>  <div class='rs-abbreviation' style='text-align:right' ng-show='ng-model.title'><rs-text-edit style='display:inline-block;position:relative;width:80%;' placeholder='Abbreviation' ng-model='model.abbreviation'></rs-text-edit></div>  <rs-section ng-if='ngModel.title' style='font-weight:normal !important' title='Available Modifiers'>    <rs-multi-non-price-modifiers-text-edit on-focus='onFocus' has-default='false' ng-model='ngModel.options'></rs-multi-non-price-modifiers-text-edit>  </section></div>"}}),rockspoonUi.directive("rsRemoveModifiers",function(){return{controller:["$scope",function($scope){}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",onFocus:"="},template:"<div class='rs-remove-modifiers'>  <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-remove-title'></rs-text-edit>  <div class='rs-abbreviation' style='text-align:right' ng-show='ngModel.title'><rs-text-edit style='display:inline-block;position:relative;width:80%;' placeholder='Abbreviation' ng-model='ngModel.abbreviation'></rs-text-edit></div>  <rs-section ng-if='ngModel.title' style='font-weight:normal !important' title='Available Modifiers'>    <rs-multi-non-price-modifiers-text-edit on-focus='onFocus' has-default='false' ng-model='ngModel.options'></rs-multi-non-price-modifiers-text-edit>  </section></div>"}}),rockspoonUi.directive("rsALaCarteMenu",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",selected:"=",menus:"=",onClick:"="},template:"<div class='rs-a-la-carte-menu'>  <div class='rs-control'>    <rs-a-la-carte-menu-buttons menus='menus'></rs-a-la-carte-menu-buttons>    <rs-a-la-carte-menu-control on-click='onClick' selected='selected' ng-model='ngModel'></rs-a-la-carte-menu-control>  </div>  <div class='rs-content' ng-transclude></div></div>",transclude:!0}}).directive("rsALaCarteMenuControl",function(){return{link:function($scope){$scope.select=function(idx){-1===idx?$scope.onClick($scope.ngModel):$scope.onClick($scope.ngModel.items[idx])}},replace:!0,restrict:"E",scope:{ngModel:"=",selected:"=",onClick:"="},template:"<div class='rs-a-la-carte-menu-control'>  <div class='rs-control-inner'>    <div class='rs-a-la-carte-menu-menu' ng-class='{ \"rs-selected\": selected === -1 }' ng-click='select(-1)' ng-if='ngModel.title'>      <div class='rs-menu-title'><span class='icon-icons_Menu'></span>&nbsp;{{ngModel.title}}</div>    </div>    <hr class='separator' />    <rs-a-la-carte-menu-items select='select' selected='selected' ng-model='ngModel.items'></rs-a-la-carte-menu-items>  </div></div>"}}).directive("rsALaCarteMenuButtons",function(){return{replace:!0,restrict:"E",scope:{menus:"="},template:"<div class='rs-a-la-carte-menu-button'>  <rs-add-menu-item-bar menus='menus'></rs-add-menu-item-bar></div>"}}).directive("rsALaCarteMenuItems",["$compile",function($compile){return{replace:!0,restrict:"E",scope:{ngModel:"=",select:"=",selected:"="},template:"<div class='rs-a-la-carte-menu-items'>  <div ng-repeat='item in ngModel'>    <rs-a-la-carte-menu-section ng-if='item.type === \"section\"' idx='$index' ng-model='item' last='$last'></rs-a-la-carte-menu-section>    <rs-a-la-carte-menu-item ng-if='item.type === \"item\"' idx='$index' ng-model='item' last='$last'></rs-a-la-carte-menu-item>  </div></div>"}}]).directive("rsALaCarteMenuSection",["$compile",function($compile){return{link:function($scope,elm){var obj=$compile("<div ng-class='{ \"rs-selected\": $parent.selected === idx }' class='rs-a-la-carte-menu-section rs-level"+$scope.ngModel.level+"' ng-click='$parent.select(idx)'>  <div class='rs-menu-title'>{{ngModel.name}}</div></div>")($scope);elm.addClass("rs-level"+$scope.ngModel.level),elm.prepend(obj)},replace:!0,restrict:"E",scope:{ngModel:"=",last:"=",idx:"="},template:"<div class='rs-a-la-carte-menu-section-container'><div></div><hr class='separator' ng-if='!last' /></div>"}}]).directive("rsALaCarteMenuItem",["$compile",function($compile){return{link:function($scope,elm){var obj=$compile("<div style='display:table;width:100%' ng-class='{ \"rs-selected\": $parent.selected === idx }' class='rs-a-la-carte-menu-item rs-level"+$scope.ngModel.level+"' ng-click='$parent.select(idx)'>  <div style='display:table-cell; padding-left:20px'>    <div class='rs-menu-title'>{{ngModel.name}}</div>  </div></div>")($scope);elm.addClass("rs-level"+$scope.ngModel.level),elm.prepend(obj)},replace:!0,restrict:"E",scope:{ngModel:"=",last:"=",idx:"="},template:"<div class='rs-a-la-carte-menu-item-container'><hr class='separator' ng-if='!last' /></div>"}}]),rockspoonUi.directive("rsAccessControl",function(){return{controller:["$scope",function($scope){function parentCheckChange(item){for(var i in item.items)item.items[i].checked=item.checked,item.items[i].items&&parentCheckChange(item.items[i])}function childCheckChange(parent){var allChecks=!0;for(var i in parent.items)if(!parent.items[i].checked){allChecks=!1;break}parent.checked=!!allChecks,parent.parent&&childCheckChange(parent.parent)}$scope.checkChange=function(item){item.id===$scope.ngModel.id?parentCheckChange(item):(item.items&&parentCheckChange(item),childCheckChange(item.parent))}}],link:function($scope){function setParent(obj){if(void 0!==obj.items&&null!==obj.items)for(var i in obj.items)obj.items[i].parent=obj,setParent(obj.items[i])}$scope.$watch(function(){return $scope.ngModel},function(){$scope.ngModel&&!_.isUndefined($scope.ngModel)&&setParent($scope.ngModel)})},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-access-control'>  <rs-section ng-if='ngModel.id'>    <rs-access-control-check-box ng-model='ngModel'></rs-access-control-check-box>  </rs-section>  <rs-access-control-section ng-repeat='section in ngModel.items' ng-model='section'>    <rs-access-control-check-box ng-repeat='item in section.items' ng-model='item' ng-class='{\"no-border\" :  $last }'></rs-access-control-check-box>  </rs-access-control-section></div>"}}).directive("rsAccessControlCheckBox",function(){return{controller:["$scope",function($scope){$scope.checkChange=function(item){$scope.$parent.checkChange(item)}}],link:function(scope){scope.ngModel.label=scope.ngModel.label?scope.ngModel.label:scope.ngModel.id.charAt(0).toUpperCase()+scope.ngModel.id.slice(1)},replace:!0,require:["ngModel","rsAccessControlCheckBox","^rsAccessControl"],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-check-box'>  <span>    <input id='chk[{{::ngModel.id}}]' type='checkbox' ng-model='ngModel.checked' ng-change='checkChange(ngModel)'>    <label for='chk[{{::ngModel.id}}]'>{{::ngModel.label}}</label>  </span>  <span ng-if='ngModel.mode && ngModel.checked'>    <rs-radio-button id='edit_{{::ngModel.id}}' value='view' label='Can View' ng-model='ngModel.mode'></rs-radio-button>    <rs-radio-button id='view_{{::ngModel.id}}' value='edit' label='Can Edit' ng-model='ngModel.mode'></rs-radio-button>  </span></div>"}}).directive("rsAccessControlSection",function(){return{controller:["$scope",function($scope){$scope.checkChange=function(item){$scope.$parent.checkChange(item)}}],replace:!0,require:["ngModel","rsAccessControlSection","^rsAccessControl"],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-access-control-section'>  <hr class='separator'/>  <rs-access-control-check-box ng-model='ngModel' ng-class='{\"title\" :  ngModel.canCheck }' ng-if='ngModel.canCheck'></rs-access-control-check-box>  <div class='title' ng-if='!ngModel.canCheck'>    {{::ngModel.label}}    <i class='glyphicon glyphicon-asterisk' ng-if='ngModel.isRequired === true'></i>  </div>  <div ng-transclude class='rs-access-control-section-content'></div></div>",transclude:!0}}),rockspoonUi.directive("rsAddMenuItemBar",function(){var pad=function(number,n){var N=Math.pow(10,n);return N>number?(""+(N+number)).slice(1):""+number},split=function(collection,columns){return _.groupBy(collection,function(el,idx){return pad(Math.floor(idx/(columns||1)),5)})};return{replace:!0,restrict:"E",scope:{menus:"="},link:function($scope,elm,attrs){$scope.options=null,_.forEach($scope.menus,function(menu){return menu.menus?($scope.options=menu,$scope.options.menus=split(menu.menus,3),!1):void 0})},template:"<div class='rs-add-menu-item-bar'>  <div class='rs-add-menu-item-bar-categories'>    <div class='rs-add-menu-item-bar-category' ng-repeat='model in menus'>      <label ng-if='!model.menus' ng-click='model.onClick()'>        <i class='icon-icons_Add'></i> {{::model.name}}      </label>      <label ng-if='model.menus' class='rs-menu-items-toggle' >{{::options.name}}</label>    </div>  </div>  <div class='rs-add-menu-item-bar-item-types'>    <table>      <tr ng-repeat='(idx, modelList) in options.menus'>        <td class='column' ng-repeat='model in modelList' style='margin-left:100px'>          <label ng-click='model.onClick()'><i class='icon-icons_Add'></i> {{::model.name}}</label>        </td>      </tr>    <table>  </div></div>"
}}),rockspoonUi.directive("rsAddress",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",mandatory:"=",onChange:"&",hideCountry:"="},template:"<div ng-form='form' novalidate class='rs-address'>  <table>    <tr ng-if='!hideCountry'>      <td colspan='1'>        <rs-country mandatory='mandatory' ng-model='ngModel.country' on-change='onChange(ngModel)' label-same-line='false'></rs-country>      </td>    </tr>    <tr>      <td colspan='3'>        <rs-text-edit mandatory='mandatory' on-change='onChange(ngModel)' class='address' ng-model='ngModel.address1' label='Address Line 1' label-same-line='false' placeholder='e.g: Street address, P.O Box, Apartment, Suit, Unit, Floor'></rs-text-edit>      </td>    </tr>    <tr>      <td colspan='3'>        <rs-text-edit class='address' on-change='onChange(ngModel)' ng-model='ngModel.address2' label='Address Line 2' label-same-line='false' placeholder='e.g: Apartment, Suit, Unit, Floor'></rs-text-edit>      </td>    </tr>    <tr>      <td style='width:37%'>        <rs-text-edit mandatory='mandatory' class='city' on-change='onChange(ngModel)' ng-model='ngModel.city' label='City' label-same-line='false'></rs-text-edit>      </td>      <td class='rs-margin-left' style='width:37%'>        <rs-state mandatory='mandatory' country='ngModel.country' on-change='onChange(ngModel)' ng-model='ngModel.region' label-same-line='false'></rs-state>      </td>      <td class='rs-margin-left'>        <rs-text-edit digit max-length='5' min-length='5' mandatory='mandatory' label='Zip Code' on-change='onChange(ngModel)' label-same-line='false' ng-model='ngModel.zipcode' placeholder='Enter Number'></rs-text-edit>      </td>    </tr>  </table></div>"}}).directive("rsMultiAddress",function(){return{link:function($scope){$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show})},controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.$watchCollection("ngModel",function(){$scope.form.$setValidity("required",$scope.ngModel.length>=(parseInt($scope.minRequired)||0))}),$scope.opts={rowFactory:function(){return{type:"",address:{country:"US",address1:"",address2:"",region:"",city:"",zipcode:"",publicArea:!1}}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{parkingAddress:"=",parkingTypes:"=",ngModel:"=",title:"@",minRequired:"@"},template:"<div ng-form='form' class='rs-multi-address'>  <div class='rs-address-title'>{{title}}<i class='glyphicon glyphicon-asterisk' ng-if='minRequired > 0 && title'></i></div>  <div ng-messages='form.$error' ng-if='minRequired > 0 && (form.$dirty || showValidationErrors)' class='rs-validation-error'>    <ng-message when='required'>Minimum number of required options is {{minRequired}}</ng-message>  </div>  <rs-multi-line min-required='1' ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat='model in internalModel'>      <rs-label label='Parking {{::$index + 1}}' ng-if='$parent.$parent.$parent.parkingAddress'></rs-label>      <rs-combo-box ng-if='$parent.$parent.$parent.parkingAddress && model.$isNew' label='Parking Type' on-change='changed(model)' label-same-line='false' options='$parent.$parent.$parent.$parent.parkingTypes' ng-model='model.type'></rs-combo-box>      <rs-address ng-if='model.$isNew && model.type' ng-model='model.address' on-change='changed(model)'></rs-address>      <rs-combo-box ng-if='$parent.$parent.$parent.parkingAddress && !model.$isNew' mandatory='true' label='Parking Type' on-change='changed(model)' label-same-line='false' options='$parent.$parent.$parent.$parent.parkingTypes' ng-model='model.type'></rs-combo-box>      <rs-address ng-if='!model.$isNew && model.type' mandatory='true' ng-model='model.address' on-change='changed(model)'></rs-address>      <hr class='separator' ng-if='!model.$isNew'/>    </rs-remove-button>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsAllergensTags",[function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.opts={rowFactory:function(){return{tag:"",status:!1}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",allergensList:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-allergens-tags'>  <div ng-repeat='allergen in internalModel' >    <label class='rs-allergen' for='rs-allergen-input-{{uid}}' ng-class='{lightgray:allergen.$isNew && !$first}'>      <a ng-click='remove(allergen)' ng-if='!$last'>        <i class='icon-icons_Delete'></i>      </a>      <input class='rs-allergen-input' type='text'              ng-change='changed(allergen)' ng-model='allergen.tag'              placeholder='Add Allergen'              typeahead='allergen as allergen.tag for allergen in $parent.$parent.allergensList | filter: $viewValue'              name='rs-allergen-input-{{$index}}' />    </label>    <rs-on-off style='width:150px; display: inline-block' on='Yes' off='No' ng-model='allergen.status' ng-if='!$last'></rs-on-off>  </div></rs-multi-line>"}}]),rockspoonUi.directive("rsSingleAnnualClosures",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-single-annual-closures'>  <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.name}}' ng-model='ngModel.selected' label='{{ngModel.name}} ({{ngModel.formattedDate}})'></rs-check-box>  <div class='day-container' ng-if='ngModel.selected'>    <table class='rs-opening-hours-radios'>      <tr>        <td>          <rs-radio-button id='{{::uid}}_{{::ngModel.name}}_closed' value='closed' label='Closed all day' ng-model='ngModel.availability'></rs-radio-button>        </td>        <td class='rs-margin-left'>          <rs-radio-button id='{{::uid}}_{{::ngModel.name}}_partial' value='partial' label='Modified opening hours' ng-model='ngModel.availability'></rs-radio-button>        </td>      <tr>    </table>  <rs-multi-time class='multi' ng-if='ngModel.availability === \"partial\"' ng-model='ngModel.time' ></rs-multi-time>  </div></div>"}}).directive("rsAnnualClosures",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create(),$scope.addCustomHoliday=function(holiday){$scope.ngModel.push({name:holiday.name,formattedDate:moment.utc(holiday.date).format("MMMM Do"),date:holiday.date}),$scope.holidayCalendar.date=null,$scope.holidayCalendar.name=null}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-annual-closures'>  <rs-single-annual-closures ng-repeat='holiday in ngModel' ng-model=holiday></rs-single-annual-closures>  <table>    <tr>      <td style='width:300px'>        <rs-text-edit ng-model='holidayCalendar.name' placeholder='Name e.g. Owner birthday'></rs-text-edit>      </td>      <td class='rs-margin-left'>        <rs-date ng-model='holidayCalendar.date'></rs-date>      </td>      <td class='rs-margin-left'>        <button ng-disabled='!holidayCalendar.name || !holidayCalendar.date' ng-click='addCustomHoliday(holidayCalendar)'>Add</button>      </td>    </tr>  </table></div>"}}),rockspoonUi.directive("rsAutoComplete",[function(){return{replace:!0,restrict:"E",scope:{ngModel:"=",srcList:"=",iconClassName:"@",placeholder:"@"},template:"<div class='rs-auto-complete'>  <label class='rs-auto-complete-label' for='rs-auto-complete'>    <i class='{{::iconClassName}}' ng-if='iconClassName'></i>    <input class='rs-auto-complete-input' type='text' ng-model='ngModel' placeholder='{{::placeholder}}' typeahead='item as item.name for item in srcList | filter:$viewValue' data-typeahead-editable='false' name='rs-auto-complete' />  </label></div>",transclude:!0}}]),rockspoonUi.directive("rsAvailableOn",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-available-on'>  <div class='rs-day-container' ng-repeat='option in ngModel.days track by $index' ng-class='{ \"disabled\" :option.closed }'>    <span>{{option.day}}</span>   </div></div>"}}),rockspoonUi.directive("rsBarChart",function(){return{replace:!0,restrict:"E",link:function($scope){$scope.count=0,_.forEach($scope.ngModel,function(model){$scope.count+=model.count})},scope:{ngModel:"=",title:"@"},template:"<div class='bar-chart-container'><div ng-if='title' class='bar-chart-title'>{{title}}</div><div class='bar-chart'><div ng-repeat='item in ngModel' class='bar-chart-row'><div class='bar-chart-title'>{{item.title}}</div><progressbar value='item.count' max='count' class='bar-chart-bar'></progressbar><div class='bar-chart-count'>{{item.count}}</div></div></div></div>"}}),rockspoonUi.directive("rsBrandInfo",function(){return{link:function(scope){scope.$on("kickOffValidations",function(event,args){scope.showValidationErrors=args.show})},controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.mandatory=!0}],restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"="},template:"<div ng-form='form' class='rs-brand-info'>  <table>    <tr>      <td colspan='2'>        <rs-text-edit label='Name' mandatory='true' label-same-line='false' placeholder='Enter Name' ng-model='ngModel.name'></rs-text-edit>      </td>    </tr>    <tr>      <td>        <rs-image-picker-generic ng-model='ngModel.logo'>          <rs-image-picker ng-model='ngModel.logo' type=\"image\"></rs-image-picker>        </rs-image-picker-generic>      </td>      <td class='description-column'>        <rs-text-area ng-model='ngModel.description' mandatory='true' label='Description'></rs-text-area>      </td>    </tr>  </table></div>"}}),rockspoonUi.directive("rsBusinessEntity",function(){return{controller:["$scope","UID","FetchBusinessType",function($scope,UID,fetch){$scope.uid=UID.create(),$scope.options=[],$scope.nameLabel="Business Entity Name",$scope.label&&($scope.nameLabel=$scope.label),fetch.fetch().then(function(types){_.forEach(types,function(type){$scope.options.push({value:type.businessTypeId,label:type.title})})})}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",label:"@"},template:"<div ng-form='form' novalidate class='rs-business-entity'>  <rs-text-edit mandatory='true' label='{{nameLabel}}' ng-model='ngModel.name' label-same-line='false'></rs-text-edit>  <rs-text-edit label='Doing Business as' ng-model='ngModel.doingBusinessAs' label-same-line='false'></rs-text-edit>  <rs-country mandatory='true' label='Country' ng-model='ngModel.address.country' label-same-line='false'></rs-country>  <rs-combo-box mandatory='true' label='Type of entity' options='options' label-same-line='false' ng-model='ngModel.businessType'></rs-combo-box>  <rs-text-edit mandatory='true' class='rs-tax-id' label='Tax ID' placeholde='Enter Tax Id' ng-model='ngModel.taxId' label-same-line='false'></rs-text-edit>  <!--div style='display:table'>    <div style='display:table-cell'>      <rs-label class='address' label='Address'></rs-label>    </div>    <div style='display:table-cell;padding-left:5px;'>      <rs-check-box id='{{::uid}}' ng-model='sameProperty' label='same as property address'></rs-check-box>    </div>  </div-->  <rs-address mandatory='true' hide-country='true' ng-model='ngModel.address'></rs-address>  <rs-multi-phone-text-edit ng-model='ngModel.phone' label='Phone'></rs-multi-phone-text-edit>  <rs-multi-social-text-edit ng-model='ngModel.internet' label='Internet'></rs-multi-social-text-edit></div>"}}),rockspoonUi.directive("rsSaveDraftButton",function(){return{restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='$parent.save()'><i class='icon-icons_SaveAsDraft'></i>&nbsp;Save as Draft</button>"}}).directive("rsUpdateButton",function(){return{restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='$parent.update()'><i class='icon-icons_SaveAsDraft'></i>&nbsp;Update</button>"}}).directive("rsSaveButton",function(){return{restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='$parent.saveAll()'><i class='icon-icons_SaveAsDraft'></i>&nbsp;Save</button>"}}).directive("rsPublishButton",function(){return{restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='$parent.publish()'><i class='icon-icons_Publish'></i>&nbsp;Publish</button>"}}).directive("rsContinueButton",function(){return{restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='$parent.continue()'><i class='icon-icons_Continue'></i>&nbsp;Continue</button>"}}),rockspoonUi.directive("rsCategoryForm",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-category-form'>  <rs-title-description ng-model='ngModel' type='Category'></rs-title-description></div>"}}),rockspoonUi.directive("rsCheckBoxList",["UID",function(UID){return{restrict:"E",scope:{ngModel:"=",title:"@",minRequired:"@",disabled:"="},link:function($scope,elm,attrs,ctrl){$scope.uid=UID.create(),$scope.$dirty=!1;var selected=0;$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show}),$scope.$watch("ngModel",function(){selected=0,_.forEach($scope.ngModel,function(model){model.status&&selected++}),$scope.form.$setValidity("required",selected>=(parseInt($scope.minRequired)||0))}),$scope.updateCount=function(value){value?selected--:selected++,$scope.form.$setValidity("required",selected>=(parseInt($scope.minRequired)||0))}},template:"<div class='rs-checkbox-list' ng-form='form'>  <div class='rs-checklist-title'>{{title}}<i class='glyphicon glyphicon-asterisk' ng-if='minRequired > 0 && title'></i></div>  <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='required'>Minimum number of required options is {{minRequired}}</ng-message>  </div>  <div>    <div class='rs-check-box-container' ng-repeat='option in ngModel track by $index'>      <rs-check-box disabled='disabled' id='checkbox_{{::uid}}_{{$index}}' ng-model='option.status' on-change='updateCount(option.status)' label='{{option.type}}'></rs-check-box>    </div>  </div></div>"}}]),rockspoonUi.directive("rsCheckBox",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id},controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",replace:!0,require:"ngModel",scope:{label:"@",ngModel:"=",disabled:"=",onChange:"&"},template:"<div class='rs-check-box'>  <span ng-show='!disabled'>    <input id='chk[{{::id}}_{{::uid}}]' type='checkbox' ng-model='ngModel' ng-change='onChange(model)' />    <label for='chk[{{::id}}_{{::uid}}]'>{{::label}}</label>  </span>  <table class='disabled' ng-class='{checked:ngModel,nchecked:!ngModel}' ng-if='disabled'>    <tr>      <td>        <div></div>      </td>      <td>        <label>{{::label}}</label>      </td>    </tr>  </table></div>"}}).directive("rsMultiCheckBox",["$timeout","UID","focus",function($timeout,UID,focus){function pad(number,n){var N=Math.pow(10,n);return N>number?(""+(N+number)).slice(1):""+number}function split(collection,columns){return _.groupBy(collection,function(el,idx){return pad(Math.floor(idx/(columns||1)),5)})}return{link:function($scope,elm,attrs,ctrl){$scope.uid=UID.create(),$scope.$dirty=!1;var selected=0,watchers=[];$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show}),$scope.focus=function(){elm.addClass("ng-focus")},$scope.blur=function(){elm.removeClass("ng-focus")};var checkPressed=function(newModel,oldModel){newModel!==oldModel&&(newModel?++selected:--selected,ctrl.$setViewValue($scope.ngModel)),$scope.form.$setValidity("required",selected>=(parseInt($scope.minRequired)||0))},add=function(model){model.push({isNew:!0,selected:!1,custom:!0,title:""})},cloneInternal=function(){$scope.ngModel||($scope.ngModel=[]),add($scope.internalModel=_.clone($scope.ngModel));for(var i=0;i<$scope.internalModel.length;++i)$scope.internalModel[i].selected&&++selected,watchers.push($scope.$watchCollection("internalModel["+i+"].selected",checkPressed)),$scope.model=split($scope.internalModel,$scope.columns)};$scope.$watchCollection("ngModel",function(){selected=0,_.forEach(watchers,function(watcher){watcher()}),watchers=[],cloneInternal()}),$scope.customChanged=function(model){elm.removeClass("ng-pristine"),_.isUndefined(model.isNew)?model.title.length||(watchers.pop()(),_.pull($scope.ngModel,model),_.pull($scope.internalModel,model),_.isFunction($scope.ngRemoved)&&$scope.ngRemoved({model:model}),$scope.model=split($scope.internalModel,$scope.columns),$timeout(function(){focus($scope.uid)})):(model.selected=!0,delete model.isNew,$scope.ngModel.push(model),add($scope.internalModel),watchers.push($scope.$watchCollection("internalModel["+watchers.length+"].selected",checkPressed)),$scope.model=split($scope.internalModel,$scope.columns))},cloneInternal()},restrict:"E",require:"ngModel",replace:!1,scope:{columns:"@",label:"@",minRequired:"@",ngDisabled:"=",ngModel:"=",ngRemoved:"&",title:"@"},template:"<div ng-form='form' class='rs-multi-check-box'>  <div class='rs-checklist-title'>{{title}}<i class='glyphicon glyphicon-asterisk' ng-if='minRequired > 0 && title'></i></div>  <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='required'>Minimum number of required options is {{minRequired}}</ng-message>  </div>  <table class='rs-container'>     <tr class='row' ng-repeat='(idx, modelList) in model'>      <td class='column' ng-repeat='model in modelList' style='margin-left:100px'>        <input id='chk[{{uid}}_{{idx}}_{{$index}}]' ng-model='model.selected' type='checkbox' ng-disabled='model.isNew || ngDisabled' />        <label for='chk[{{uid}}_{{idx}}_{{$index}}]' ng-if='!model.custom' ng-disabled='model.isNew || ngDisabled'><translate>{{model.title}}</translate></label>        <label for='chk[{{uid}}_{{idx}}_{{$index}}]' ng-if='model.custom' ng-disabled='ngDisabled'></label>        <input type='text' ng-model='model.title' placeholder='Custom' ng-change='customChanged(model)' focus-on='{{uid}}' ng-focus='focus()' ng-blur='blur()' ng-if='model.custom' ng-class='{ custom:model.isNew }' class='' ng-disabled='ngDisabled' />      </td>    </tr>  <table></div>"}}]),rockspoonUi.directive("rsChoosePassword",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div ng-form='form' novalidate class='rs-choose-password'>  <table style='width:100%'>    <tr>      <td>        <rs-text-edit mandatory='true' password='!showPassword' ng-model='ngModel.password' label='Password'></rs-text-edit>        <rs-text-edit mandatory='true' password='!showPassword' compare='ngModel.password' ng-model='ngModel.confirmPassword' label='Confirm Password'></rs-text-edit>      </td>    </tr>    <tr>      <td>        <rs-check-box id='showPwd + {{::uid}}' label='Show Password' ng-model='showPassword'>      </td>    </tr>  </table></div>"}}),rockspoonUi.directive("rsComboBox",["$compile","UID",function($compile,UID){return{link:function(scope,element,attrs,ctrl){var el;scope.$watchCollection("ngModel",function(){el&&(el.val()!==scope.ngModel&&el.val(scope.ngModel),scope.mandatory&&!scope.ngModel?ctrl.$setValidity("required",!1):ctrl.$setValidity("required",!0))}),scope.$watchCollection("options",function(){el||(el=element.find("select:first"),el.attr("name","field_"+UID.create()),el.change(function(){ctrl.$setViewValue($(this).val()),ctrl.$render(),scope.onChange()})),el.find("option").remove().end(),el.append(new Option),_.forEach(scope.options,function(option){el.append(new Option(option.label,option.value,!1,option.value===scope.ngModel))})})},controller:["$scope",function($scope){$scope.showValidationErrors=!1,$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show})}],replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",labelSameLine:"=",mandatory:"=",options:"=",ngModel:"=",model:"=",onChange:"&",disabled:"=",showValidationErrors:"@"},template:"<div ng-form='form' class='rs-combo-box'>  <rs-label-field ng-if='true'>    <div ng-show='!disabled' ng-class='{\"combo-field-empty\":!ngModel,\"combo-field\":ngModel}'>      <div class='arrow'></div>      <select ng-required='mandatory'>        <option value=''></option>      </select>    </div>    <div ng-show='disabled'>      {{ngModel}}    </div>  </rs-label-field></div>"}}]),rockspoonUi.directive("rsConnectivitySignal",function(){return{restrict:"E",scope:{ngModel:"=",type:"@"},template:"<div class='rs-connectivity-signal rs-connectivity-signal-{{ngModel}}'>  <rs-wifi-signal ng-if='type === \"wifi\"'></rs-wifi-signal>  <rs-operator-signal ng-if='type === \"operator\"'></rs-operator-signal></div>"}}).directive("rsOperatorSignal",function(){return{replace:!0,restrict:"E",template:"<div class='rs-connectivity-signal'>  <?xml version='1.0' encoding='iso-8859-1'?>  <!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'        x='0px' y='0px' viewBox='0 0 495 495' style='enable-background:new 0 0 495 495;' xml:space='preserve'>    <g>      <path class='rs-connectivity-signal-wave-outer' d='m411.5,192l-16,0c-17.368988,0 -31.5,14.130997 -31.5,31.5l0,240c0,17.368988 14.131012,31.5 31.5,31.5l16,0c17.368988,0 31.5,-14.131012 31.5,-31.5l0,-240c0,-17.369003 -14.131012,-31.5 -31.5,-31.5zm16.5,271.5' />      <path class='rs-connectivity-signal-wave-middle' d='m307.5,256l-16,0c-17.369019,0 -31.5,14.130981 -31.5,31.5l0,176c0,17.368988 14.130981,31.5 31.5,31.5l16,0c17.368988,0 31.5,-14.131012 31.5,-31.5l0,-176c0,-17.369019 -14.131012,-31.5 -31.5,-31.5zm16.5,207.5' />      <path class='rs-connectivity-signal-wave-inner' d='m203.5,320l-16,0c-17.369003,0 -31.5,14.131012 -31.5,31.5l0,112c0,17.368988 14.130997,31.5 31.5,31.5l16,0c17.369003,0 31.5,-14.131012 31.5,-31.5l0,-112c0,-17.368988 -14.130997,-31.5 -31.5,-31.5zm16.5,143.5' />      <path class='rs-connectivity-signal-base' d='m99.5,384l-16,0c-17.368996,0 -31.5,14.131012 -31.5,31.5l0,48c0,17.368988 14.131004,31.5 31.5,31.5l16,0c17.369003,0 31.5,-14.131012 31.5,-31.5l0,-48c0,-17.368988 -14.130997,-31.5 -31.5,-31.5zm16.5,79.5' />    </g>  </svg></div>"}}).directive("rsWifiSignal",function(){return{replace:!0,restrict:"E",template:"<div class='rs-connectivity-signal'>  <?xml version='1.0' encoding='iso-8859-1'?>  <!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'        x='0px' y='0px' viewBox='0 0 455.838 455.838' xml:space='preserve'>    <g>      <path class='rs-connectivity-signal-wave-outer' d='m454.967987,225.667007c-0.174988,-0.257004 -0.373993,-0.498001 -0.595001,-0.718994c-60.488983,-60.488007 -140.911987,-93.80101 -226.453979,-93.80101c-85.537003,0 -165.953007,33.306 -226.438996,93.78801c-0.94,0.932999 -1.48,2.209991 -1.48,3.552002c0,1.325989 0.526,2.597992 1.465,3.535995l33.113001,33.113983c0.938,0.938019 2.209,1.463989 3.535,1.463989c1.326,0 2.598,-0.526978 3.535,-1.463989c49.835999,-49.838989 115.988007,-77.285004 186.270996,-77.285004c70.281982,0 136.43399,27.447006 186.270996,77.283997c0.937988,0.938019 2.208984,1.46402 3.533997,1.46402c1.325989,0 2.598999,-0.527008 3.535004,-1.46402l33.113007,-33.113983c0.937988,-0.938004 1.464996,-2.209 1.464996,-3.536011c0.001984,-1.00499 -0.303009,-1.987 -0.869019,-2.818985z' />      <path class='rs-connectivity-signal-wave-middle' d='m227.919006,218.718994c-62.056,0 -120.460999,24.231003 -164.457996,68.229004c-1.952,1.953003 -1.952,5.118988 0.000999,7.070984l33.009998,33.009003c0.938004,0.938019 2.209,1.464996 3.535004,1.464996c1.325996,0 2.598,-0.526978 3.534996,-1.464996c33.277008,-33.277008 77.447998,-51.605011 124.376999,-51.605011c46.931,0 91.10199,18.328003 124.376007,51.605011c0.937988,0.938019 2.209991,1.464996 3.536011,1.464996s2.597992,-0.526978 3.534973,-1.464996l33.011017,-33.009003c0.937988,-0.937988 1.464996,-2.208984 1.464996,-3.536011c0,-1.326965 -0.524994,-2.597992 -1.464996,-3.53598c-43.997009,-43.995987 -102.402008,-68.227997 -164.458008,-68.227997z' />      <path class='rs-connectivity-signal-wave-inner' d='m227.919006,306.291992c-38.700989,0 -75.125992,15.110016 -102.564003,42.549011c-0.939003,0.938019 -1.465004,2.209015 -1.465004,3.537018c0,1.325989 0.525002,2.597992 1.465004,3.535004l33.010002,33.009979c0.937988,0.938019 2.209,1.464996 3.534988,1.464996s2.598007,-0.526978 3.535004,-1.464996c16.719009,-16.718994 38.908997,-25.925995 62.484009,-25.925995s45.766998,9.208984 62.484985,25.925995c0.938019,0.938019 2.209015,1.464996 3.533997,1.464996s2.598022,-0.526978 3.535004,-1.464996l33.01001,-33.009979c1.951996,-1.953003 1.951996,-5.119019 0,-7.070007c-27.437012,-27.44101 -63.862,-42.551025 -102.563995,-42.551025z' />      <path class='rs-connectivity-signal-base' d='m227.919006,399.083008c-13.520996,0 -26.229004,5.264008 -35.783997,14.821991c-1.951996,1.953003 -1.951996,5.118011 0.001007,7.070007l32.247986,32.25c0.938004,0.938019 2.209015,1.464996 3.535004,1.464996s2.598999,-0.526978 3.535004,-1.464996l32.247986,-32.25c1.952026,-1.953003 1.952026,-5.117981 0,-7.070984c-9.556,-9.557037 -22.263992,-14.821014 -35.78299,-14.821014z' />    </g>  </svg></div>"}}),rockspoonUi.directive("rsCountry",[function(){return{controller:["$scope","FetchCountry",function($scope,fetch){$scope.options=[],fetch.fetchCountries().then(function(countries){$scope.options.length=0,_.forEach(countries,function(country){$scope.options.push({value:country.code,label:country.nativeName})})})}],replace:!0,require:"ngModel",restrict:"E",scope:{labelSameLine:"=",mandatory:"=",ngModel:"=",onChange:"&"},template:"<div class='rs-country'>  <rs-combo-box mandatory='mandatory' label='Country' options='options' label-same-line='labelSameLine' ng-model='ngModel' on-change='onChange()'></rs-combo-box></div>"}}]).directive("rsState",[function(){return{controller:["$scope","FetchCountry",function($scope,fetch){$scope.optionsState=[],$scope.$watchCollection("country",function(){$scope.optionsState.length=0,$scope.country?fetch.fetchStates($scope.country).then(function(states){var found=!1;_.forEach(states,function(state){$scope.optionsState.push({value:state.code,label:state.name}),state.code===$scope.ngModel&&(found=!0)}),found||($scope.ngModel="")}):$scope.ngModel=""})}],replace:!0,require:"ngModel",restrict:"E",scope:{labelSameLine:"=",ngModel:"=",mandatory:"=",onChange:"&",country:"="},template:"<div class='rs-state'>  <rs-combo-box mandatory='mandatory' label='State' options='optionsState' label-same-line='labelSameLine' ng-model='ngModel' on-change='onChange()'></rs-combo-box></div>"}}]),rockspoonUi.directive("rsCreateAccount",function(){return{controller:["$scope",function($scope){$scope.createAccount=function(){$scope.form.$invalid&&$scope.$broadcast("kickOffValidations",{show:!0}),$scope.$parent.createAccount()},$scope.cancel=function(){$scope.$parent.cancel()}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div ng-form='form' novalidate class='rs-create-account'>  <rs-text-edit mandatory='true' ng-model='ngModel.firstName' label='First Name'></rs-text-edit>  <rs-text-edit mandatory='true' ng-model='ngModel.lastName' label='Last Name'></rs-text-edit>  <rs-text-edit mandatory='true' ng-model='ngModel.email' label='Email'></rs-text-edit>  <rs-text-edit mandatory='true' ng-model='ngModel.confirmEmail' compare='ngModel.email' label='Confirm Email'></rs-text-edit>  <rs-text-edit mandatory='true' password='!showPassword' ng-model='ngModel.password' label='Password'></rs-text-edit>  <rs-text-edit mandatory='true' password='!showPassword' compare='ngModel.password' ng-model='ngModel.confirmPassword' label='Confirm Password'></rs-text-edit>  <rs-check-box id='showPassword' ng-model='showPassword' label='Show Password'></rs-check-box>  <div class='footer'>    <button ng-click='createAccount()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Create Account</button>    <button ng-click='cancel()'><i class='glyphicon glyphicon-remove'></i>&nbsp;Cancel</button>  </div></div>"}}),rockspoonUi.directive("rsCreatePos",function(){return{controller:["$scope",function($scope){$scope.localCancel=function(){$scope.ngModel.name=null,$scope.ngModel.type=null,$scope.onCancel&&$scope.onCancel()}}],replace:!0,require:["ngModel","posTypes"],restrict:"E",scope:{ngModel:"=",posTypes:"=",locations:"=",onCreatePos:"&",onCancel:"&"},template:"<div ng-form='form' novalidate class='rs-create-pos'> <table>   <tr>     <td class='negoff boxfield'>       <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.name' label='Enter PoS Name'></rs-text-edit>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true'  ng-model='ngModel.type' label-same-line='false' label='PoS Type' options='posTypes'></rs-combo-box>     </td>     <td></td>     <td class='column-space buttontab'>       <button ng-click='onCreatePos()' class='rs-button'>Create</button>     </td>     <td class='column-space buttontab'>       <button ng-click='localCancel()' class='rs-button'>Cancel</button>     </td>   </tr> </table></div>"}}),rockspoonUi.directive("rsCreatePrinter",function(){return{controller:["$scope",function($scope){$scope.showLocation=!1,$scope.showStation=!1,$scope.showSubstation=!1,$scope.validated=!1,$scope.localCancel=function(){$scope.ngModel.name=null,$scope.ngModel.type={},$scope.selectedLocation=null,$scope.typeSelected=!1,$scope.showStation=!1,$scope.ngModel.station=null,$scope.onCancel&&$scope.onCancel()},$scope.createPrinter=function(){$scope.onCreatePrinter&&($scope.form.$invalid&&$scope.$parent.showValidationError?$scope.$parent.showValidationError():$scope.onCreatePrinter())},$scope.changeType=function(selected){$scope.stationList=null,$scope.substationList=null,$scope.showStation=!1,$scope.showSubstation=!1,$scope.ngModel.productionArea=null,$scope.productionAreaValue=null,$scope.ngModel.station=null,$scope.stationValue=null,$scope.substationValue=null,$scope.validated=!1,$scope.showLocation=!1;for(var i in $scope.printerTypes)if($scope.printerTypes[i].value===selected)return $scope.ngModel.type=JSON.parse(JSON.stringify($scope.printerTypes[i])),$scope.showLocation=$scope.ngModel.type.needsLocation,$scope.validated=!$scope.showLocation,void $scope.$apply();$scope.$apply()},$scope.changeLocation=function(selected){$scope.ngModel.station=null,$scope.substationList=null,$scope.showSubstation=!1,$scope.ngModel.station=null,$scope.stationValue=null,$scope.ngModel.substation=null,$scope.substationValue=null,$scope.validated=!1,$scope.showStation=!1;for(var i in $scope.locations)if($scope.locations[i].value===selected)return $scope.stationList=JSON.parse(JSON.stringify($scope.locations[i].stations)),$scope.ngModel.productionArea=JSON.parse(JSON.stringify($scope.locations[i])),$scope.showStation=$scope.ngModel.type.needsStation&&$scope.stationList,$scope.validated=!$scope.showStation,void $scope.$apply();$scope.$apply()},$scope.changeStation=function(selected){$scope.ngModel.substation=null,$scope.substationValue=null,$scope.validated=!1,$scope.showSubstation=!1;var location=$scope.ngModel.productionArea;for(var i in location.stations)if(location.stations[i].value===selected)return $scope.ngModel.station=JSON.parse(JSON.stringify(location.stations[i])),$scope.substationList=JSON.parse(JSON.stringify(location.stations[i].substations)),$scope.showSubstation=$scope.ngModel.type.needsSubstation&&$scope.substationList&&$scope.substationList.length>0,$scope.validated=!$scope.showSubstation,void $scope.$apply();$scope.$apply()},$scope.changeSubstation=function(selected){$scope.validated=!1;for(var i in $scope.substationList)if($scope.substationList[i].value===selected)return $scope.ngModel.substation=JSON.parse(JSON.stringify($scope.substationList[i])),
$scope.validated=!0,void $scope.$apply();$scope.$apply()}}],replace:!0,require:["ngModel","printerTypes","locations"],restrict:"E",scope:{ngModel:"=",printerTypes:"=",locations:"=",onCreatePrinter:"&",onCancel:"&"},template:"<div ng-form='form' novalidate class='rs-create-printer'> <table>   <tr>     <td class='negoff boxfield'>       <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.name' label='Device Name'></rs-text-edit>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-model='typeValue' on-change='changeType(typeValue)' label-same-line='false' label='Type' options='printerTypes'></rs-combo-box>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-if='showLocation' ng-model='productionAreaValue' on-change='changeLocation(productionAreaValue)' label-same-line='false' label='Select Location' options='locations'></rs-combo-box>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-if='showStation' ng-model='stationValue' on-change='changeStation(stationValue)' label-same-line='false' label='Select Station' options='stationList'></rs-combo-box>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-if='showSubstation' ng-model='substationValue' on-change='changeSubstation(substationValue)' label-same-line='false' label='Select Substation' options='substationList'></rs-combo-box>     </td>     </td>     <td class='column-space buttontab' ng-if='validated'>       <button ng-click='createPrinter()' class='rs-button'>Create</button>     </td>     <td class='column-space buttontab'>       <button ng-click='localCancel()' class='rs-button'>Cancel</button>     </td>   </tr> </table></div>"}}).directive("rsCreatePrinterVertical",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{label:"",value:""}}},$scope.validated=!0,$scope.changeType=function(selected){$scope.ngModel.productionArea=null,$scope.ngModel.station=null,$scope.ngModel.substation=null,$scope.showStation=!1,$scope.showSubstation=!1,$scope.showLocation=!1,$scope.validated=!1;for(var i in $scope.printerTypes)if($scope.printerTypes[i].value===selected)return $scope.ngModel.type=JSON.parse(JSON.stringify($scope.printerTypes[i])),$scope.showLocation=$scope.ngModel.type.needsLocation,$scope.validated=!$scope.showLocation,void $scope.$apply();$scope.$apply()},$scope.changeLocation=function(selected){$scope.ngModel.station=null,$scope.showStation=!1,$scope.validated=!1,$scope.showSubstation=!1;for(var i in $scope.locations)if($scope.locations[i].value===selected)return $scope.ngModel.productionArea=JSON.parse(JSON.stringify($scope.locations[i])),$scope.stationList=JSON.parse(JSON.stringify($scope.locations[i].stations)),$scope.showStation=$scope.ngModel.type.needsStation&&$scope.stationList,$scope.validated=!$scope.showStation,void $scope.$apply();$scope.$apply()},$scope.changeStation=function(selected){var location=$scope.ngModel.productionArea;$scope.showSubstation=!1,$scope.validated=!1;for(var i in location.stations)if(location.stations[i].value===selected)return $scope.ngModel.station=JSON.parse(JSON.stringify(location.stations[i])),$scope.substationList=JSON.parse(JSON.stringify(location.stations[i].substations)),$scope.showSubstation=$scope.ngModel.type.needsSubstation&&$scope.substationList&&$scope.substationList.length>0,$scope.validated=!$scope.showSubstation,void $scope.$apply();$scope.$apply()},$scope.changeSubstation=function(selected){for(var i in $scope.substationList)if($scope.substationList[i].value===selected)return $scope.ngModel.substation=JSON.parse(JSON.stringify($scope.substationList[i])),$scope.validated=!0,void $scope.$apply();$scope.$apply()},$scope.ngModel.productionArea&&($scope.stationList=$scope.ngModel.productionArea.stations,$scope.ngModel.station&&($scope.substationList=$scope.ngModel.station.substations))}],replace:!0,require:["ngModel","printerTypes","locations"],restrict:"E",scope:{ngModel:"=",printerTypes:"=",locations:"=",onSave:"&",onCancel:"&"},template:"<div ng-form='form' novalidate class='rs-create-printer'> <table style='width: 1000px !important;'>   <tr>     <td class='negoff boxfield'>       <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.name' label='Device Name'></rs-text-edit>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true'  ng-model='ngModel.type.value' on-change='changeType(ngModel.type.value)' label-same-line='false' label='Type' options='printerTypes'></rs-combo-box>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-if='showLocation || ngModel.productionArea' ng-model='ngModel.productionArea.value' on-change='changeLocation(ngModel.productionArea.value)' label-same-line='false' label='Select Location' options='locations'></rs-combo-box>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-if='showStation || stationList' ng-model='ngModel.station.value' on-change='changeStation(ngModel.station.value)' label-same-line='false' label='Select Station' options='stationList'></rs-combo-box>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true' ng-if='showSubstation || (stationList && substationList)' ng-model='ngModel.substation.value' on-change='changeSubstation(ngModel.substation.value)' label-same-line='false' label='Select Substation' options='substationList'></rs-combo-box>     </td>     </td>     <td class='column-space buttontab' ng-if='validated'>       <button ng-click='onSave()' class='rs-button'>Update</button>     </td>     <td class='column-space buttontab'>       <button ng-click='onCancel()' class='rs-button'>Cancel</button>     </td>   </tr> </table></div>"}}),rockspoonUi.filter("formattedRSDateTime",function(){return function(input){return input?input.format("MM/DD/YYYY - hh:mm A"):"Undetermined"}}).filter("formattedRSDate",function(){return function(input,format){if(!input)return null;var defaultFormat="MMMM Do";return format&&(defaultFormat=format),moment(input).format(defaultFormat)}}).factory("dropDownToggleService",["$timeout",function($timeout){return{findFirstScrollable:function(element){return null===element||void 0===element||element.prop("scrollHeight")>element.prop("clientHeight")?element:this.findFirstScrollable(element.parent())},customClickHandler:function(event){var scope=event.data.scope,element=event.data.element,setMargin=event.data.setMargin;$timeout(function(){var dropdownElement=element.find(".dropdown-menu");scope.dropdownElement=dropdownElement,setMargin===!0&&(scope.marginBottom=scope.dropdownElement.css("margin-top")||"2px"),scope.heightD=dropdownElement.height();var availableTop=element.offset().top,availableBottom=$(window).height()-availableTop;availableBottom>scope.heightD?scope.isDropUp=!1:(scope.dropdownElement.css("margin-bottom",scope.marginBottom),scope.isDropUp=!0)},0)}}}]).directive("rsCalendar",function(){var calendars={},buildCalendar=function(month,year){var cacheKey=month+" + "+year;if(calendars[cacheKey])return calendars[cacheKey];var i,j,firstDay=moment([year,month,1]),lastMonth=moment(firstDay).subtract("month",1).month(),lastYear=moment(firstDay).subtract("month",1).year(),daysInLastMonth=moment([lastYear,lastMonth]).daysInMonth(),dayOfWeek=firstDay.day(),calendar=[];for(i=0;6>i;++i)calendar[i]=[];var startDay=daysInLastMonth-dayOfWeek+1;startDay>daysInLastMonth&&(startDay-=7),dayOfWeek||(startDay=daysInLastMonth-6);var curDate=moment([lastYear,lastMonth,startDay]).startOf("day");for(i=0;6>i;++i)for(j=0;7>j;++j)calendar[i][j]=curDate=moment(curDate).add("day",1);return calendars[cacheKey]=calendar,calendar};return{controller:["$scope",function($scope){if(_.isDate($scope.startDate)||_.isDate($scope.endDate))throw new Error("You must use moment");var isBefore=function(){$scope.startDate&&$scope.startDate.isAfter($scope.endDate)&&($scope.endDate=$scope.startDate.clone())};$scope.$watch(function(){return $scope.startDate},isBefore,!0),$scope.$watch(function(){return $scope.endDate},isBefore,!0),$scope.inRange=function(day){return null!==$scope.startDate&&void 0!==$scope.startDate&&null!==$scope.endDate&&void 0!==$scope.endDate&&(day.isAfter($scope.startDate,"day")&&day.isBefore($scope.endDate,"day")||day.isSame($scope.startDate,"day")||day.isSame($scope.endDate,"day"))},$scope.getDayNumber=function(day){return day.date()},$scope.isOff=function(day){return day.isBefore($scope.startDate,"day")},$scope.isHidden=function(day){return day.month()!==$scope.current.month()},$scope.updateCalendar=function(){$scope.calendar=buildCalendar($scope.current.month(),$scope.current.year()),$scope.monthName=moment()._lang._monthsShort[$scope.current.month()]+$scope.current.format(" YYYY")},$scope.isActive=function(day){return $scope.left?day.isSame($scope.startDate,"day"):day.isSame($scope.endDate,"day")},$scope.daysOfWeek=angular.copy(moment()._lang._weekdaysMin),$scope.daysOfWeek.push($scope.daysOfWeek.shift()),$scope.pickDate=function(date){$scope.readOnly||!$scope.endDate||!$scope.left&&date.isBefore($scope.startDate,"day")||(date=date.clone(),$scope.left?(date.hours($scope.startDate.hours()),date.minutes($scope.startDate.minutes()),$scope.startDate=date,(date.isSame($scope.endDate,"day")||date.isAfter($scope.endDate,"day"))&&($scope.endDate=$scope.startDate.clone())):(date.hours($scope.endDate.hours()),date.minutes($scope.endDate.minutes()),$scope.endDate=date))},$scope.setPrevMonth=function(notPropagate){$scope.current.subtract("month",1),$scope.updateCalendar(),notPropagate||$scope.$parent.$broadcast("prevMonth")},$scope.setNextMonth=function(notPropagate){$scope.current.add("month",1),$scope.updateCalendar(),notPropagate||$scope.$parent.$broadcast("nextMonth")}}],link:function(scope,element,attrs){scope.$watchCollection("isOpen",function(){scope.isOpen&&(scope.left?(scope.readOnly||null===scope.startDate||void 0===scope.startDate)&&null!==scope.endDate&&void 0!==scope.endDate?scope.current=moment([scope.endDate.year(),scope.endDate.month(),1]).subtract("month",1):scope.current=moment([scope.startDate.year(),scope.startDate.month(),1]):scope.readOnly?null!==scope.startDate&&void 0!==scope.startDate&&(scope.current=moment([scope.startDate.year(),scope.startDate.month(),1]).add("month",1)):null!==scope.endDate&&void 0!==scope.endDate?scope.current=moment([scope.endDate.year(),scope.endDate.month(),1]):scope.current=moment([scope.startDate.year(),scope.startDate.month(),1]).add("month",1),null!==scope.current&&void 0!==scope.current&&scope.updateCalendar())}),scope.$watchCollection("readOnly",function(){scope.readOnly?element.addClass("rs-readonly"):element.removeClass("rs-readonly")}),scope.left=""===attrs.left,scope.right=""===attrs.right,scope.left?scope.$on("nextMonth",function(e){scope.setNextMonth(!0)}):scope.$on("prevMonth",function(e){scope.setPrevMonth(!0)})},replace:!0,restrict:"E",scope:{endDate:"=",isOpen:"=",readOnly:"=",startDate:"="},template:"<div class='rs-calendar'>  <table class='table-condensed'>    <thead>      <tr>        <th>          <i class='glyphicon glyphicon-triangle-left' style='cursor:pointer' ng-click='setPrevMonth()' ng-if='left'></i>        </th>        <th style='width:auto'>{{monthName}}</th>        <th class='available'>          <i class='glyphicon glyphicon-triangle-right' style='cursor:pointer' ng-click='setNextMonth()' ng-if='!left || right'></i>        </th>      </tr>    </thead>    <tbody>      <tr>        <td colspan='3' style='padding:0'>          <table class='table-condensed' style='border-spacing:4px;border-collapse:initial;margin-left:-4px;margin-right:-4px'>            <thead>              <tr>                <th ng-repeat='d in daysOfWeek'>{{d}}</th>              </tr>            </thead>            <tbody>              <tr ng-repeat='week in calendar'>                <td ng-if='isOpen' style='padding:0' class='available' ng-repeat='day in week' ng-class='{off:isOff(day), inrange:inRange(day), active:isActive(day), hidden: isHidden(day)}'>                  <div ng-click='pickDate(day)' >{{getDayNumber(day)}}</div>                </td>              </tr>            </tbody>          </table>        </td>      </tr>    </tbody>  </table></div>"}}).directive("rsNonYearCalendar",function(){var buildCalendar=function(month){var i,j,curDate=moment([2e3,month,1]),calendar=[];for(i=0;5>i;++i)calendar[i]=[];for(i=0;5>i;++i)for(j=0;7>j;++j){if(curDate.month()!=month)return calendar;calendar[i][j]=curDate,curDate=angular.copy(curDate).add("day",1)}return calendar};return{controller:["$scope",function($scope){$scope.curMonth=(new Date).getMonth(),$scope.updateCalendar=function(){$scope.calendar=buildCalendar($scope.curMonth),$scope.monthName=moment()._lang._months[$scope.curMonth]},$scope.setPrevMonth=function(){--$scope.curMonth,$scope.updateCalendar()},$scope.setNextMonth=function(){++$scope.curMonth,$scope.updateCalendar()},$scope.getDayNumber=function(day){return day.date()},$scope.daySelected=function(day){$scope.ngModel=day,angular.isFunction($scope.onSelect)&&$scope.onSelect()},$scope.updateCalendar()}],replace:!0,restrict:"E",scope:{ngModel:"=",onSelect:"&"},template:"<div class='rs-calendar'><table class='table-condensed'><thead><tr><th><i class='glyphicon glyphicon-triangle-left' ng-click='setPrevMonth()' ng-show='curMonth !== 0' style='cursor:pointer'></i></th><th style='width:auto'>{{monthName}}</th><th><i class='glyphicon glyphicon-triangle-right' ng-click='setNextMonth()' ng-show='curMonth !== 11' style='cursor:pointer'></i></th></tr><tr></tr></thead><tbody><tr><td colspan='3' style='padding:0px'><table class='table-condensed' style='border-spacing:4px;border-collapse:initial;margin-left:-4px;margin-right:-4px'><tr style='height:32px' ng-repeat='week in calendar'><td style='padding:0' class='available' ng-repeat='day in week' style='cursor:pointer' ng-click='daySelected(day)'><div style='width:32px'>{{getDayNumber(day)}}</div></td></tr></table></td></tr></tbody></table></div>"}}).directive("rsTwoCalendars",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.undetermined=null===$scope.ngModel.to&&void 0===$scope.ngModel.to,$scope.preventClose=function($event){$event.stopPropagation()}}],link:function(scope,element,attrs){scope.$watch(function(){return scope.ngModel},function(){null!==scope.ngModel.to&&void 0!==scope.ngModel.to&&(scope.time=scope.start?scope.ngModel.from:scope.ngModel.to)},!0),scope.$watch(function(){return scope.time},function(){scope.start?scope.ngModel.from=moment(scope.time):scope.ngModel.to=moment(scope.time)},!0),scope.$watchCollection("undetermined",function(o,n){scope.undetermined?scope.ngModel.to=null:o!==n&&(scope.ngModel.to=scope.ngModel.from.clone())})},replace:!0,require:"ngModel",restrict:"E",scope:{isOpen:"=",ngModel:"=",start:"="},template:"<ul class='dropdown-menu' role='menu'>  <li ng-click='preventClose($event)'>    <div class='rs-calendar-container'>      <div class='rs-disabled' ng-if='undetermined && !start'>&nbsp;</div>      <table>        <tr>          <td colspan='2' align='left' style='padding-left:15px;'>            <span style='height:32px' ng-show='start'>&nbsp;</span>            <rs-check-box style='height:32px' ng-hide='start' id='{{::uid}}' ng-model='undetermined' label='Undetermined'></rs-check-box>          </td>        </tr>        <tr>          <td>            <rs-calendar start-date='ngModel.from' end-date='ngModel.to' is-open='isOpen' left read-only='!start'></rs-calendar>          </td>          <td>            <rs-calendar start-date='ngModel.from' end-date='ngModel.to' right read-only='start || undetermined' is-open='isOpen'></rs-calendar>          </td>        </tr>        <tr>          <td colspan='2' align='center'>            <rs-time ng-model='time'></rs-time>          </td>        </tr>      </table>    </div>  </li></ul>"}}).directive("rsDateRangePicker",function(){return{replace:!0,restrict:"E",scope:{label:"@",labelSameLine:"=",ngModel:"=",onChange:"&",placeholder:"@",isDropUp:"=",open:"=",value:"=",start:"="},template:"<table ng-form='form' class='rs-date-range-picker'>  <tr>    <td>      <rs-label>{{::label}}</rs-label>    </td>    <td class='rs-margin-left' width='100%'>      <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='open'>        <input class='dropdown-toggle' type='text' dropdown-toggle value='{{value}}' readonly/>        <rs-two-calendars ng-model='ngModel' start='start' is-open='open'></rs-two-calendars>      </div>    </td>  <tr></table>"}}).directive("rsDateRange",["$compile","UID","dropDownToggleService","$timeout",function($compile,UID,dropDownToggleService,$timeout){return{link:function(scope,elm){scope.enabled=null!==scope.ngModel.from&&void 0!==scope.ngModel.from,scope.uid=UID.create();var paddingClass="",handleDropDown=function(){var availableTop=elm.position().top,availableBottom=scrollableElement.height()-elm.height()-availableTop,padding=20;availableBottom>scope.heightD+padding?scope.isDropUp=!1:scope.isDropUp=!0},scrollableElement=dropDownToggleService.findFirstScrollable(elm);scrollableElement.on("scroll",scope.$apply.bind(scope,handleDropDown)),scope.scrollableElement=scrollableElement,null!==scope.labelFrom&&void 0!==scope.labelFrom&&""!==scope.labelFrom&&(paddingClass="label-space"),scope.temporaryClosure||(scope.enabled=!0),scope.$watch("enabled",function(o,n){if(scope.enabled){if(o!==n){var tmp=moment();scope.ngModel.from=moment([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),scope.ngModel.to=scope.ngModel.from.clone();var toggleElements=elm.find(".dropdown-toggle");scope.toggleEl1=$(toggleElements[0]),scope.toggleEl2=$(toggleElements[1]);var data1={scope:scope,element:$(scope.toggleEl1[0].parentNode),setMargin:!1,service:dropDownToggleService},data2=_.cloneDeep(data1);data2.element=$(scope.toggleEl2[0].parentNode),scope.toggleEl1.on("click",data1,dropDownToggleService.customClickHandler),scope.toggleEl2.on("click",data2,dropDownToggleService.customClickHandler)}}else scope.ngModel.from=scope.ngModel.to=null}),scope.$on("$destroy",function(){scrollableElement.off(),scope.toggleEl1&&scope.toggleEl1.off(),scope.toggleEl2&&scope.toggleEl2.off()})},replace:!0,require:"ngModel",restrict:"E",scope:{labelFrom:"@",labelTo:"@",labelSameLine:"=",ngModel:"=",temporaryClosure:"@"},template:"<div class='rs-date-range'>  <rs-check-box id='{{::uid}}' ng-model='ngModel.enabled' ng-if='temporaryClosure' label='Schedule a temporary closure'></rs-check-box>  <table class='rs-date-range-picker-container' style='width:100%' ng-if='ngModel.enabled'>    <tr>      <td class='rs-date-range-picker'>        <rs-date-range-picker start='true' label-same-line='true' is-drop-up='isDropUp' ng-model='ngModel' label='From' open='openStart' value='ngModel.from|formattedRSDateTime'></rs-date-range-picker>      </td>      <td class='rs-margin-left rs-date-range-picker'>        <rs-date-range-picker start='false' label-same-line='true' is-drop-up='isDropUp' ng-model='ngModel' label='To' open='openEnd' value='ngModel.to|formattedRSDateTime'></rs-date-range-picker>      </td>    </tr>  </table>  <rs-text-area ng-if='ngModel.enabled' label='Reason' placeholder='Reason' mandatory='false' ng-model='ngModel.reason'></rs-text-area></div>"}}]).directive("rsDate",function(){return{controller:["$scope","$element","dropDownToggleService",function($scope,$element,dropDownToggleService){if(null!==$scope.ngModel&&void 0!==$scope.ngModel&&_.isDate($scope.ngModel))throw new Error("You must use moment");var handleDropDown=function(){var availableTop=$element.offset().top,availableBottom=$(window).height()-availableTop;availableBottom>$scope.heightD?$scope.isDropUp=!1:$scope.isDropUp=!0},toggleEl=$element.find(".dropdown-toggle"),scrollableElement=dropDownToggleService.findFirstScrollable($element),data={scope:$scope,element:$element,setMargin:!1,service:dropDownToggleService};$(toggleEl).on("click",data,dropDownToggleService.customClickHandler),scrollableElement.on("scroll",$scope.$apply.bind($scope,handleDropDown)),$scope.scrollableElement=scrollableElement,$scope.preventClose=function($event){$event.stopPropagation()},$scope.hideCalendar=function(){$scope.isOpen=!1},$scope.$on("$destroy",function(event){scrollableElement.off(),$(toggleEl).off()})}],replace:!0,require:"ngModel",restrict:"E",scope:{dateFormat:"@",ngModel:"="},template:"<div class='rs-date' ng-class='{ dropup: isDropUp }'>  <div class='dropdown' dropdown is-open='isOpen'>    <input class='dropdown-toggle' dropdown-toggle type='text' placeholder='Date'  value='{{ngModel | formattedRSDate:dateFormat}}' readonly>    <ul class='dropdown-menu' role='menu'>      <li ng-click='preventClose($event)'>        <rs-non-year-calendar ng-model='ngModel' on-select='hideCalendar()'></rs-non-year-calendar>      </li>    </ul>  </div></div>"}}).directive("rsYearDate",function(){return{controller:["$scope","$element","dropDownToggleService",function($scope,$element,dropDownToggleService){var handleDropDown=function(){var availableTop=$element.offset().top,availableBottom=$(window).height()-availableTop;availableBottom>$scope.heightD?$scope.isDropUp=!1:($scope.dropdownElement&&$scope.dropdownElement.css("margin-bottom",$scope.marginBottom),$scope.isDropUp=!0)},toggleEl=$element.find(".dropdown-toggle"),scrollableElement=dropDownToggleService.findFirstScrollable($element);$scope.scrollableElement=scrollableElement;var data={scope:$scope,element:$element,setMargin:!0,service:dropDownToggleService};if($(toggleEl).on("click",data,dropDownToggleService.customClickHandler),scrollableElement.on("scroll",$scope.$apply.bind($scope,handleDropDown)),null!==$scope.ngModel&&null!==$scope.ngModel&&_.isDate($scope.ngModel))throw new Error("You must use moment");$scope.preventClose=function($event){$event.stopPropagation()},$scope.$watch(function(){return $scope.startDate},function(){$scope.ngModel=$scope.startDate},!0),$scope.hideCalendar=function(){$scope.isOpen=!1},$scope.$on("$destroy",function(event){scrollableElement.off(),$(toggleEl).off()})}],replace:!0,require:"ngModel",restrict:"E",scope:{dateFormat:"@",ngModel:"=",startDate:"="},template:"<div class='rs-date' ng-class='{ dropup: isDropUp }'>  <div class='dropdown' dropdown is-open='isOpen'>    <input class='dropdown-toggle' dropdown-toggle type='text' placeholder='Date'  value='{{ngModel | formattedRSDate:dateFormat}}' readonly>    <ul class='dropdown-menu' role='menu'>      <li ng-click='preventClose($event)'>        <rs-calendar ng-model='ngModel' start-date='startDate' end-date='startDate' left right is-open='isOpen' on-select='hideCalendar()'></rs-calendar>      </li>    </ul>  </div></div>"}}),rockspoonUi.directive("rsDeliveryCatering",function(){return{restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"=",type:"@",mapOptions:"="},template:"<div class='rs-delivery-catering'>  <rs-section title='{{::type}}' mandatory='true'>    <rs-section title='{{::type}} Area' mandatory='true'>      <rs-label>Please draw on the map below (by clicking on the bounds) the covered {{::type}} area</rs-label>      <rs-map options='mapOptions' ng-model='ngModel.area'></rs-map>    </rs-section>    <rs-section title='{{::type}} Time Estimate' mandatory='true' separator='true'>      <rs-estimated-time type='{{::type}}' ng-model='ngModel.estimatedTime'></rs-estimated-time>    </rs-section>    <rs-section title='Order Minimum for {{::type}}' mandatory='true'>      <rs-minimum-fee ng-model='ngModel.minimumFee'></rs-minimum-fee>    </rs-section>    <rs-section title='Restaurant {{::type}} Fee' mandatory='true' >      <rs-fee ng-model='ngModel.fee' type='{{::type}}'></rs-fee>    </rs-section>  </rs-section></div>"}}),rockspoonUi.directive("rsDropDown",["$compile",function($compile){return{compile:function(element){var template=angular.element("<div ng-form='form' class='rs-drop-down-directive'>  <div class='rs-drop-down-title'>{{title}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && title'></i></div>  <div class='rs-drop-down dropdown' dropdown on-toggle='toggled(open)'>    <div ng-if='ngModel' class='drop-down dropdown-toggle' dropdown-toggle>      <div>"+element.html()+"</div>      <div class='arrow'></div>    </div>    <div  ng-if='!ngModel' class='drop-down-empty dropdown-toggle' dropdown-toggle>      <div class='arrow'></div>    </div>    <ul class='dropdown-menu'>      <li ng-class='{\"rs-selected\": ngModel.selected}' ng-repeat='ngModel in dropOptions' ng-click='onSelect($index)'>"+element.html()+"</li>    </ul>  </div>  <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='empty'>A non-empty option is required.</ng-message>  </div></div>");return element.empty(),function(scope,element){element.append(template),$compile(template)(scope)}},controller:["$scope",function($scope){function updateValidity(){$scope.form.$setDirty(),$scope.mandatory&&!$scope.ngModel?$scope.form.$setValidity("empty",!1):$scope.form.$setValidity("empty",!0)}var preprocess=function(items){return _.forEach(items,function(item){item.selected=!1}),items};$scope.onSelect=function(index){$scope.dropOptions=preprocess($scope.dropOptions),$scope.ngModel=$scope.dropOptions[index],$scope.ngModel.selected=!0,updateValidity()}}],link:function(scope){scope.$on("kickOffValidations",function(event,args){scope.showValidationErrors=args.show})},replace:!0,restrict:"E",scope:{dropOptions:"=",mandatory:"=",ngModel:"=",title:"@"}}}]),rockspoonUi.directive("rsEmployeesListView",function(){return{controller:["$scope",function($scope){$scope.search=function(value){return null===value?$scope.ngModel:_.filter($scope.ngModel,function(item){var searchText=value.toLowerCase(),itemText=item.userInfo.firstName.toLowerCase()+" "+item.userInfo.lastName.toLowerCase();return itemText.indexOf(searchText)>=0})}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",selected:"="},template:"<div class='rs-employees-list-view'>  <div class='rs-employees-list'>    <rs-generic-list ng-model='ngModel' selected='selected' fetch='search(value)' is-searchable='true'>      <div class='rs-employee'>        <div class='rs-avatar'>          <i class='glyphicon glyphicon-picture' ng-if='!item.userInfo.avatar'></i>          <img ng-src='{{item.userInfo.avatar.loResolution.url}}' ng-if='item.userInfo.avatar' />        </div>        <div class='rs-details'>          <div>{{item.userInfo.firstName}}&nbsp;{{item.userInfo.lastName}}</div>          <div>{{item.userInfo.phone}}</div>          <div style='font-size: 10px;'><i>added by {{item.createdBy}} on {{item.created | date: 'yyyy/MM/dd'}}</i></div>        </div>      </div>    </rs-generic-list>  </div>  <div class='rs-employees-view' ng-if='selected.userInfo'>    <div class='rs-title'>Employee Information</div>    <rs-label>First Name</rs-label>    {{selected.userInfo.firstName}}    <rs-label>Last Name</rs-label>    {{selected.userInfo.lastName}}    <rs-label>Title</rs-label>    {{selected.title}}    <rs-label>Phone</rs-label>    {{selected.userInfo.phone}}    <rs-label>{{selected.userInfo.metadata.internet[0].type}}</rs-label>    {{selected.userInfo.metadata.internet[0].url}}  </div></div>",transclude:!0}}),rockspoonUi.directive("rsEstimatedTime",function(){return{controller:["$scope",function($scope){$scope.timesBegin=[],$scope.timesEnd=[],$scope.durationType=[{value:"d",label:"Days"},{value:"w",label:"Weeks"},{value:"m",label:"Months"}];for(var i=0;60>i;i+=5)$scope.timesBegin.push({label:i+" minutes",value:""+i});$scope.$watchCollection("ngModel.from",function(){$scope.timesEnd=[];for(var from=$scope.ngModel.from?parseInt($scope.ngModel.from):0,i=from;60>i;i+=5)$scope.timesEnd.push({label:i+" minutes",value:""+i})})}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",type:"@"},template:"<table class='rs-estimated-time'>  <tr ng-if='type !== \"Catering\"'>    <td class='label-column'>      Order is estimated to be ready for {{::type}} in    </td>    <td class='rs-margin-left'>      <rs-combo-box mandatory='true' ng-model='ngModel.from' options='timesBegin'></rs-combo-box>    </td>    <td class='rs-margin-left label-column'>      to    </td>    <td class='rs-margin-left'>      <rs-combo-box mandatory='true' ng-model='ngModel.to' options='timesEnd'></rs-combo-box>    </td>    <td class='rs-margin-left label-column'>      after being placed    </td>  </tr>  <tr ng-if='type === \"Catering\"'>    <td class='label-column'>      Order should be made at least    </td>    <td class='rs-margin-left' style='width:50px'>      <rs-text-edit mandatory='true' ng-model='ngModel.duration' digit></rs-text-edit>    </td>    <td class='rs-margin-left'>      <rs-combo-box mandatory='true' ng-model='ngModel.durationType' options='durationType'></rs-combo-box>    <td class='rs-margin-left'>    <td class='label-column'>      in advance    </td>  </tr></table>"}}),rockspoonUi.directive("rsFee",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",type:"@"},template:"<table class='rs-fee'>  <tr>    <td class='label-column'>      {{::type}} fee is    </td>    <td class='rs-margin-left' style='width:50px'>      <rs-text-edit ng-model='ngModel' currency mandatory='true'></rs-text-edit>    </td>  </tr></table>"}}).directive("rsMinimumFee",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<table class='rs-minimum-fee'>  <tr>    <td class='label-column'>      The customer must place an order of at least $    </td>    <td class='rs-margin-left' style='width:50px'>      <rs-text-edit ng-model='ngModel' currency mandatory='true'></rs-text-edit>    </td>    <td class='rs-margin-left label-column'>      for us to deliver    </td>  </tr></div>"}}),rockspoonUi.directive("rsMultiSpot",function(){return{controller:["$scope",function($scope){$scope.shapes=[{label:"Circular",value:"circular"},{label:"Counter",value:"counter"},{label:"Rectangular",value:"rectangular"},{label:"Oval",value:"oval"}],$scope.types=[{label:"Fixed Seating",value:"fixed_seating"},{label:"Fixed Standing",value:"fixed_standing"},{label:"Movable Seating",value:"movable_seating"},{label:"Movable Standing",value:"movable_standing"}],$scope.opts={rowFactory:function(){return{number:null,type:null,shape:null,seats:null,maximumCapacity:null}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-spot'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat='model in internalModel'>      <table>        <tr>          <td>            <rs-text-edit style='width:50px' digit on-change='changed(model)' ng-model='model.number' label='Table #' label-same-line='false'></rs-text-edit>          </td>          <td class='rs-margin-left'>            <rs-combo-box label='Table Type' on-change='changed(model)' label-same-line='false' options='$parent.$parent.$parent.types' ng-model='model.type'></rs-combo-box>          </td>          <td class='rs-margin-left'>            <rs-combo-box label='Table Shape' on-change='changed(model)' label-same-line='false' options='$parent.$parent.$parent.shapes' ng-model='model.shape'></rs-combo-box>          </td>          <td class='rs-margin-left'>            <rs-text-edit style='width:50px' digit on-change='changed(model)' ng-model='model.seats' label='# of Seats' label-same-line='false'></rs-text-edit>          </td>          <td class='rs-margin-left'>            <rs-text-edit style='width:50px' digit on-change='changed(model)' ng-model='model.maximumCapacity' label='Capacity' label-same-line='false'></rs-text-edit>          </td>        </tr>      </table>    </rs-remove-button>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiDiningSection",function(){return{controller:["$scope",function($scope){
$scope.opts={rowFactory:function(){return{name:"",description:null,spots:[]}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-dining-section'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-section separator='!$first' title='Dining Section' mandatory='true' ng-repeat='model in internalModel' ng-class='{lightgray: model.$isNew && !$first}'>      <rs-remove-button>        <rs-text-edit placeholder='Add name' label-same-line='true' on-change='changed(model)' ng-model='model.name'></rs-text-edit>        <rs-text-area label='Description' on-change='changed(model)' ng-model='model.description'></rs-text-area>        <rs-multi-spot ng-if='!$last' ng-model='model.spots'></rs-multi-spot>      </rs-remove-button>    </rs-section>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsFocusNext",["$timeout",function($timeout){return{link:function($scope,element){$scope.next=function(){return element[0].value.length>=element[0].maxLength},$scope.$watch($scope.next,function(newValue){if(newValue){var nextInput=element.next("input");$timeout(function(){1===nextInput.length&&nextInput[0].focus()},0,!1)}})},require:["ngModel"],restrict:"A"}}]),rockspoonUi.directive("rsForgotPassword",function(){return{controller:["$scope",function($scope){$scope.search=function(){$scope.$parent.search()},$scope.selectAccount=function(idx){$scope.$parent.selectAccount(idx)},$scope.sendRequest=function(){$scope.$parent.sendRequest()},$scope.confirmPIN=function(){$scope.$parent.confirmPIN()},$scope.resetPassword=function(){$scope.$parent.resetPassword()}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div ng-form='form' novalidate class='rs-forgot-password'>  <rs-tabs current-step='ngModel.currentStep' selected='ngModel.selectedStep' allow-back='true'>    <rs-tab title='Find Your Account' step mandatory='true'>      <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.search' label='Phone or Email'></rs-text-edit>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='search()'><i class='icon-icons_magnifier'></i>&nbsp;Search</button>      </div>    </rs-tab>    <rs-tab title='Identify your account' step mandatory='true'>      <rs-label>These accounts are compatible with your search</rs-label>      <div class='alert alert-danger' ng-show='ngModel.error'>        <i class='glyphicon glyphicon-exclamation-sign'></i> {{ ngModel.error }}      </div>      <div ng-repeat='match in ngModel.matches'>        <div class='rs-match-row'>          <div class='rs-match-details'>{{ match.name }}</div>          <div class='rs-match-button'>            <rs-spinner ng-show='ngModel.locked'></rs-spinner>            <button ng-show='!ngModel.locked' ng-click='selectAccount($index)'><i class='glyphicon glyphicon-ok'></i>&nbsp;This is my account</button>          </div>        </div>       </div>    </rs-tab>    <rs-tab title='Reset your password' step mandatory='true' ng-if='false'>      <rs-label>How would you like to reset your password?</rs-label>      <div ng-repeat='method in ngModel.selected.methods'>        <rs-radio-button id='{{method}}' value='{{method}}' label='{{ ngModel.methodLabels[method] }}' ng-model='ngModel.resetMethod'></rs-radio-button>      </div>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='sendRequest(ngModel.resetMethod)'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>      </div>    </rs-tab>    <rs-tab title='Validate sent pin' step mandatory='true'>      <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.pin' label='Enter your six-digit confirmation code below to continue resetting your password:'></rs-text-edit>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='confirmPIN()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>      </div>    </rs-tab>    <rs-tab title='Reset your password' step mandatory='true'>      <rs-text-edit mandatory='true' password='!showPassword' ng-model='ngModel.password' label='Password'></rs-text-edit>      <rs-text-edit mandatory='true' password='!showPassword' compare='ngModel.password' ng-model='ngModel.confirmPassword' label='Confirm Password'></rs-text-edit>      <rs-check-box id='showPassword' ng-model='showPassword' label='Show Password'></rs-check-box>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='resetPassword()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>      </div>    </rs-tab>  </rs-tabs></div>"}}),rockspoonUi.directive("rsMultiFruit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{value:null}},options:$scope.options},$scope.$watch(function(){return $scope.options},function(){$scope.opts.options=$scope.options},!0)}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",options:"="},template:"<div class='rs-multi-fruit'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat='model in internalModel'>      <rs-combo-box ng-class='{\"rs-margin-bottom\":!$last}' options='ngOpts.options' on-change='changed(model)' ng-model='model.value'></rs-combo-box>    </rs-remove-button>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsGenericList",["$compile",function($compile){return{controller:["$scope",function($scope){var preprocess=function(items){return _.forEach(items,function(item){item.selected=!1}),items};$scope.$watch(function(){return $scope.ngModel},function(){$scope.selectionFlag&&$scope.isSearcheable||($scope.searchResults=preprocess(_.cloneDeep($scope.ngModel)))},!0),$scope.search=function(value){$scope.selectionFlag=!1,$scope.searchResults=preprocess($scope.fetch({value:value}))},$scope.onSelect=function(index){$scope.selectionFlag=!0,$scope.multiSelect?($scope.searchResults[index].selected=!$scope.searchResults[index].selected,$scope.selected=_.filter($scope.searchResults,function(item){return item.selected===!0})):($scope.searchResults=preprocess($scope.searchResults),$scope.selected=$scope.searchResults[index],$scope.selected.selected=!0)}}],restrict:"E",scope:{isSearchable:"@",ngModel:"=",selected:"=",fetch:"&",multiSelect:"@"},compile:function(element){var template=angular.element("<div class='rs-generic-list'>  <div class='rs-search-box' ng-if='isSearchable'>    <i class='glyphicon glyphicon-search'></i>    <input class='inputbox' type='text' ng-model='searchValue' ng-change='search(searchValue)'>  </div>  <div class='rs-generic-list-results'>    <div>      <div ng-class='{\"rs-selected-list-item\": item.selected}' sf-virtual-repeat='item in searchResults' ng-click='onSelect($index)'>"+element.html()+"</div>    </div>  </div></div>");return element.empty(),function(scope,element){element.append(template),$compile(template)(scope)}}}}]);var PREVIEW_W=200,PREVIEW_H=200,BOX_W=330,BOX_H=330,REAL_BOX_W=1024,REAL_BOX_H=1024;rockspoonUi.directive("rsImagePickerGeneric",function(){return{controller:["$scope","$modal",function($scope,$modal){this.add=function(){var modal=$modal.open({windowClass:"choose-photo",backdrop:"static",template:"<div ng-form='form'>  <div style='padding-top:10px;margin-left:5px;margin-right:5px;display:table'>    <div style='display:table-cell;width:100%;text-align:left'>      <div>        <span style='font-weight:bold'>Upload Photo </span>      </div>    </div>    <div style='display:table-cell;text-align:right'>      <button ng-click='close()'>Cancel</button>    </div>  </div>  <div class='modal-body'>    <div style='text-align:center'>      <center>        <input style='color:white;width:1px;height:1px;border:none' id='imageResult' ng-model='obj.img' value='' type='text' />        <img class='image-result' rs-image-cropped ng-model='obj.result' ng-show='obj.img' image='{{obj.img}}' />      </center>      <rs-image-loader class='image-loader' ng-model='obj.img' ng-hide='obj.img' label=''></rs-image-loader>    </div>  </div>  <div style='margin-top:15px'>    <button ng-click='changePhoto()'>Select Photo</button>  </div>  <div style='padding-bottom:15px'>    <button ng-disabled='!obj.img' ng-click='setImage()'>Upload</button><br />  </div></div>",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.obj={img:null,result:null},$scope.changePhoto=function(){$scope.$broadcast("changePhoto")},$scope.setImage=function(){$modalInstance.close($scope.obj.result)},$scope.close=function(){$modalInstance.close()}}]});modal.result.then(function(model){model&&(_.isUndefined($scope.ngModel.buffer)?$scope.ngModel=model:$scope.ngModel.buffer=model)})}}],scope:{ngModel:"="},require:"ngModel",replace:!0,restrict:"E",transclude:!0,template:"<ng-transclude ng-form='form'></ng-transclude>"}}).directive("rsImagePicker",function(){return{link:function(scope,elem,attrs,controllers){scope.$on("kickOffValidations",function(event,args){scope.showValidationErrors=args.show});var rsImagePickerGenericCtrl=controllers[0],rsImagePickerController=controllers[1];scope.$watchCollection("ngModel",function(){var valid="true"==scope.mandatory?!(!scope.ngModel.url&&!scope.ngModel.buffer):!0;rsImagePickerController.$setValidity("image",valid)}),scope.open=rsImagePickerGenericCtrl.add},controller:["$scope",function($scope){$scope.upload=function(){$scope.open(),$scope.modalOpened=!0}}],require:["^rsImagePickerGeneric","ngModel"],restrict:"E",scope:{ngModel:"=",placeholder:"@",type:"@",mandatory:"@",label:"@",labelSameLine:"="},template:"<div ng-form='form' class='rs-image-picker' ng-if='type === \"image\"'>  <rs-label-field>    <div class='rs-image-picker-empty' ng-click='upload()' ng-if='!ngModel || (!ngModel.url && !ngModel.buffer)'>      <div>        <i class='glyphicon glyphicon-picture'></i>        <div class='add' ng-if='placeholder'><i class='glyphicon glyphicon-camera'></i>&nbsp;{{::placeholder}}</div>      </div>    </div>    <img rs-image='{{ngModel.url}}' ng-if='ngModel.url && !ngModel.buffer' ng-click='upload()' />    <img rs-image='{{ngModel.buffer}}' ng-if='ngModel.buffer' ng-click='upload()' />  </rs-label-field></div><button class='rs-button' ng-click='upload()' ng-if='type !== \"image\"'>Upload</button><button type='button' style='font-size: 12px' class='rs-button' ng-click='upload()' ng-if='type === \"image\"'>Upload Photo</button><div ng-messages='$parent.form.$error' ng-show='modalOpened || showValidationErrors' class='rs-validation-error'>  <ng-message when='image'>Logo required.</ng-message></div>"}}).directive("rsImage",function(){return{controller:["$scope","$element",function($scope,$element){$scope.$watchCollection("rsImage",function(){$scope.rsImage&&$element.attr("src",$scope.rsImage)})}],restrict:"A",scope:{rsImage:"@"}}}).directive("rsImageCropped",function(){function createArea(w,h){var canvas=$("<canvas></canvas>");return canvas.attr("width",w),canvas.attr("height",h),canvas.hide(),canvas}function setImage(api,src,W,H,scope){var w=PREVIEW_W,h=PREVIEW_H,x=W/2-w/2,y=H/2-h/2,x1=x+w,y1=y+h;api.setImage(src,function(){this.setOptions({minSize:[80,80],maxSize:[BOX_W,BOX_H],setSelect:[x,y,x1,y1],bgOpacity:.3,aspectRatio:1,onChange:scope.updateInfo,allowSelect:!1,allowResize:!0,trackDocument:!0}),this.focus()})}function createImageArea(image,mw,mh,isPreview){var area,w=image.width,h=image.height;w>h?(w>mw||isPreview)&&(h=Math.round(h*mw/w),w=mw):(h>mh||isPreview)&&(w=Math.round(w*mh/h),h=mh),area=createArea();var squareSide=w>h?w:h;area=isPreview?createArea(mw,mh):createArea(squareSide,squareSide);var ctx=area.get(0).getContext("2d"),x=0,y=0;return isPreview?(x=mw/2-w/2,y=mh/2-h/2):w>h?y=(w-h)/2:x=(h-w)/2,ctx.drawImage(image,0,0,image.width,image.height,x,y,w,h),area.remove(),{area:area,side:squareSide}}return{controller:["$scope","$element",function($scope,$element){$scope.$watchCollection("image",function(){$scope.image&&$element.attr("src",$scope.image)}),$scope.updateInfo=function(event){var realSide=$scope.realSide,x=realSide*event.x/BOX_W,y=realSide*event.y/BOX_H,w=realSide*event.w/BOX_W,h=realSide*event.h/BOX_H,area=createArea(w,h),ctx=area.get(0).getContext("2d");ctx.drawImage($scope.realArea.get(0),x,y,w,h,0,0,w,h),$scope.ngModel=area.get(0).toDataURL("image/jpeg",1),$scope.$apply(),area.remove()}}],link:function(scope,element){var api=null;scope.img=new Image,element.bind("load",function(){scope.img.onload=function(){var a=createImageArea(this,REAL_BOX_W,REAL_BOX_H,!1);scope.realArea=a.area,scope.realSide=a.side;var src=this.src=createImageArea(this,BOX_W,BOX_H,!0).area.get(0).toDataURL("image/jpeg",1);this.onload=null,api?setImage(api,src,BOX_W,BOX_H,scope):element.Jcrop({bgColor:"#FFFFFF",addClass:"jcrop-light"},function(){setImage(api=this,src,BOX_W,BOX_H,scope)})},scope.img.src=element.attr("src")}),scope.$on("$destroy",function(){element.unbind("load")})},restrict:"A",scope:{image:"@",height:"@",ngModel:"=",width:"@"}}}).directive("rsImageLoader",function(){return{controller:["$scope","$element","$timeout",function($scope,$element,$timeout){$scope.$on("changePhoto",function(e){$scope.choosePicture()}),$scope.choosePicture=function(){var input=$element.find("input:file").first();$timeout(function(){input.click()})},$scope.getFile=function(){var reader=new FileReader;reader.onload=function(){$scope.$apply(function(){$scope.ngModel=reader.result})},reader.readAsDataURL($scope.file)}}],link:function($scope,element){var input=element.find("input:file").first();input.bind("change",function(event){$scope.file=(event.srcElement||event.target).files[0],$scope.getFile()}),$scope.$on("$destroy",function(){input.unbind("change")})},replace:!0,restrict:"E",scope:{label:"@",ngModel:"="},template:"<div style='background:black;display:table'>  <div style='display:table-cell;vertical-align:middle;width:100%;height:100%'>    <input type='file' accept='image/*' ng-hide='true' />    <button ng-click='choosePicture()'>{{label}}</button>  </div></div>"}}),rockspoonUi.directive("rsIngredientsListView",function(){return{controller:["$scope",function($scope){$scope.search=function(value){return null===value?$scope.ngModel:_.filter($scope.ngModel,function(item){var searchText=value.toLowerCase(),itemText=item.title.toLowerCase();return itemText.indexOf(searchText)>=0})},$scope.$watchCollection("isHouseMade",function(){$scope.isHouseMade?$scope.ngModel=$scope.houseMade:$scope.ngModel=$scope.inventory})}],replace:!0,restrict:"E",scope:{inventory:"=",houseMade:"=",selected:"=",newIngredient:"=",isHouseMade:"="},template:"<div class='rs-ingredients-list-view'>  <rs-on-off on='House Made Ingredients' off='Inventory' ng-model='isHouseMade'></rs-on-off>  <div class='rs-ingredients-list'>    <rs-ingredients-list ng-model='ngModel' selected='selected' fetch='search(value)' is-searchable='true'>      <div class='rs-ingredient'>        <div class='rs-details'>          <div>{{item.title}}</div>        </div>      </div>    </rs-ingredients-list>  </div></div>",transclude:!0}}),rockspoonUi.directive("rsIngredientsList",["$compile",function($compile){return{controller:["$scope",function($scope){var preprocess=function(items){return _.forEach(items,function(item){item.selected=!1}),items};$scope.$watch(function(){return $scope.ngModel},function(){$scope.selectionFlag||($scope.searchResults=preprocess(_.cloneDeep($scope.ngModel)))},!0),$scope.search=function(value){$scope.selectionFlag=!1,$scope.searchResults=preprocess($scope.fetch({value:value}))},$scope.onSelect=function(index){$scope.selectionFlag=!0,$scope.multiSelect?($scope.searchResults[index].selected=!$scope.searchResults[index].selected,$scope.selected=_.filter($scope.searchResults,function(item){return item.selected===!0})):($scope.searchResults=preprocess($scope.searchResults),$scope.searchResults[index].selected=!0)},$scope.newIngredient=function(){$scope.$parent.newIngredient()}}],restrict:"E",scope:{isSearchable:"@",ngModel:"=",selected:"=",fetch:"&",multiSelect:"@"},compile:function(element){var template=angular.element("<div class='rs-generic-list'>  <div class='rs-search-box' ng-if='isSearchable'>    <i class='glyphicon glyphicon-search'></i>    <input class='inputbox' type='text' ng-model='searchValue' ng-change='search(searchValue)'>  </div>  <div class='rs-generic-list-buttons'>    <button ng-click='newIngredient()'>      <i class='icon-icons_Add' style='font-size: 9px;'></i>      New    </button>  </div>  <div class='rs-generic-list-results' style='margin-top: 5px'>    <div>      <div ng-class='{\"rs-selected-list-item\": item.selected}' sf-virtual-repeat='item in searchResults' ng-click='onSelect($index)'>"+element.html()+"</div>    </div>  </div></div>");return element.empty(),function(scope,element){element.append(template),$compile(template)(scope)}}}}]),rockspoonUi.directive("rsIngredientsView",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.nextStep=function(){$scope.currentStep++}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",currentStep:"=",selected:"=",options:"="},template:"<div class='rs-ingredients-view'>  <rs-section>    <div class='rs-next-step'>      <button class='rs-button' ng-click='nextStep()'>Continue <i class='icon-icons_ArrowRight'></i></button>    </div>    <rs-tabs current-step='currentStep' selected='selected'>      <rs-tab title='General Information' step mandatory='true'>         <rs-section>           <rs-title-description ng-model='ngModel' type='House Made Ingredient'></rs-title-description>         </rs-section>      </rs-tab>      <rs-tab title='Recipes' step>        <rs-section title='Coming Soon!'></rs-section>      </rs-tab>      <rs-tab title='Tags' step>        <rs-item-tags ng-model='ngModel' tag-options='options.tagOptions'></rs-item-tags>      </rs-tab>      <rs-tab title='Photos' step>        <rs-item-photos ng-model='ngModel'></rs-item-photos>      </rs-tab>    </rs-tabs>  </rs-section></div>"}}),rockspoonUi.directive("rsInvoiceInfo",function(){return{controller:["$scope",function($scope){$scope.model=_.clone($scope.ngModel),$scope.cancel=function(){$scope.ngModel=_.clone($scope.model)},$scope.list=function(){var cb=function(err,result){err?$scope.ngModel.supplierName="":result&&($scope.ngModel.supplierName=result.name),$scope.$apply()};$scope.listOptions({cb:cb})},$scope.$watch(function(){return $scope.ngModel},function(){$scope.ngModel.totalPrice=$scope.ngModel.bottles*$scope.ngModel.unitPrice},!0)}],replace:!0,require:"ngModel",restrict:"E",scope:{listOptions:"&",ngModel:"=",save:"&"},template:"<div class='rs-invoice-info'><table><tr><td class='rs-date'><rs-label>Date</rs-label></td><td class='rs-supplier'><rs-label>Supplier Name</rs-label></td><td class='rs-invoice'><rs-label>Invoice Number</rs-label></td><td class='rs-small'><rs-label>Bottles</rs-label></td><td class='rs-date'><rs-label>$ Unit Price</rs-label></td><td class='rs-date'><rs-label>$ Total Price</rs-label></td><td class='rs-small'>&nbsp;</td><td class='rs-small'>&nbsp;</td></tr><tr><td><rs-year-date ng-model='ngModel.date' start-date='ngModel.start'></rs-year-date></td><td class='rs-supplier'><button class='rs-button' ng-click='add()'><i class='icon-icons_SaveAsDraft'></i><span ng-if = '!ngModel.supplierName'>&nbsp;Add from supplier list</span><span ng-if = 'ngModel.supplierName'>&nbsp;{{ ngModel.supplierName }}</span></button></td><td><rs-text-edit ng-model='ngModel.invoiceNumber'></rs-text-edit></td><td><rs-text-edit ng-model='ngModel.bottles'></rs-text-edit></td><td><rs-text-edit ng-model='ngModel.unitPrice'></rs-text-edit></td><td><rs-text-edit ng-disabled='true' ng-model='ngModel.totalPrice'></rs-text-edit></td><td><button class='rs-button' ng-click='save()'>&nbsp;Save</button></td><td><button class='rs-button' ng-click='cancel()'>&nbsp;Cancel</button></td></tr></table></div>"}}),rockspoonUi.directive("rsItemPhotos",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-item-photos'>  <rs-section>    <rs-photos gallery='ngModel.photos'></rs-photos>  </rs-section></div>"}}),rockspoonUi.directive("rsItemTags",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",tagOptions:"="},template:"<div class='rs-item-tags'>  <rs-section title='Categories'>    <rs-section title='Cuisine'>      <rs-section title='Suggested by Rockspoon' ng-if='ngModel.cuisines.rockspoon.length > 0'>        <rs-suggested-tags ng-model='ngModel.cuisines.rockspoon' tags-list='tagOptions.cuisines'></rs-suggested-tags>      </rs-section>      <rs-section title='Added by Restaurant'>        <rs-tags ng-model='ngModel.cuisines.restaurant' tags-list='tagOptions.cuisines'></rs-tags>      </rs-section>    </rs-section>    <rs-section title='Diet' separator='true'>      <rs-section title='Suggested by Rockspoon' ng-if='ngModel.diets.rockspoon.length > 0'>        <rs-suggested-tags ng-model='ngModel.diets.rockspoon' tags-list='tagOptions.diets'></rs-suggested-tags>      </rs-section>      <rs-section title='Added by Restaurant'>        <rs-tags ng-model='ngModel.diets.restaurant' tags-list='tagOptions.diets'></rs-tags>      </rs-section>    </rs-section>    <rs-section title='Food Description' separator='true'>      <rs-section>        <rs-tags ng-model='ngModel.foodDesc' tags-list='tagOptions.foodDesc'></rs-tags>      </rs-section>    </rs-section>    <rs-section separator='true'>      <rs-section class='no-padding'>        <rs-allergens-tags ng-model='ngModel.allergens' allergens-list='tagOptions.allergens'></rs-allergens-tags>      </rs-section>    </rs-section>  </rs-section></div>"}}),rockspoonUi.directive("rsLabelField",function(){return{replace:!1,restrict:"E",scope:!1,transclude:!0,link:function(scope,element,attrs,ctrls,transclude){transclude(scope.$parent,function(clone){element.find("placeholder").replaceWith(clone)})},template:"<table class='rs-label-field'>  <tr ng-if='!labelSameLine && label'>    <td>      <rs-label mandatory='mandatory' label='{{label}}'></rs-label>    </td>  </tr>  <tr>    <td class='rs-label-same-line' ng-if='labelSameLine && label'>      <rs-label mandatory='mandatory' label='{{label}}'></rs-label>    </td>    <td class='rs-inner-field'>      <div class='rs-inner-field'>        <placeholder></placeholder>      </div>    </td>  </tr>  <tr ng-show='form.$dirty || showValidationErrors'>    <td ng-if='labelSameLine && label'>    </td>    <td>      <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>        <ng-message when='required'>This field is required.</ng-message>        <ng-message when='maxlength'>The input is too long.</ng-message>        <ng-message when='minlength'>The input is too short.</ng-message>        <ng-message when='pattern'>The format is not valid.</ng-message>        <ng-message when='match'>Fields do not match.</ng-message>      </div>    </td>  </tr></table>"}}),rockspoonUi.directive("rsLabel",["$compile",function($compile){return{link:function($scope,elm,attrs,ctrl,transclude){transclude($scope,function(clone,scope){var html=clone.html();null===html||void 0===html?elm.append($compile("<div class='rs-label'>  <label>{{::label}}</label><i class='glyphicon glyphicon-asterisk' ng-if='mandatory'></i>  </div>")($scope)):elm.append($compile("<div class='rs-label'>  <label>"+html+"</label><i class='glyphicon glyphicon-asterisk' ng-if='mandatory'></i>  </div>")($scope.$parent))})},replace:!0,restrict:"E",scope:{label:"@",mandatory:"="},template:"<div></div>",transclude:!0}}]),rockspoonUi.directive("rsLink",[function(){return{replace:!0,restrict:"E",scope:{label:"@",action:"&"},template:"<a class='rs-link' ng-click='action()'>{{::label}}</a>"}}]),rockspoonUi.directive("rsMap",["$timeout",function($timeout){return{link:function(scope,elem,attr,ctrl){function clearSelection(){selectedShape&&(selectedShape=null)}function setSelection(shape){map.controls[google.maps.ControlPosition.TOP_CENTER].push(deleteControlDiv),clearSelection(),selectedShape=shape,drawingManager.setDrawingMode(null),drawingManager.setOptions({drawingControl:!1})}function deleteShapeControl(controlDiv){var controlUI=document.createElement("div");controlUI.className=scope.options.deleteControlClassName||"deleteControl",controlUI.title=scope.options.deleteControlTitle||"Delete Drawn Area",controlUI.innerHTML=scope.options.deleteControlText||"Delete Drawn Area",controlDiv.appendChild(controlUI),google.maps.event.addDomListener(controlUI,"click",deleteSelectedShape)}function deleteSelectedShape(){for(;scope.ngModel.length>0;)scope.ngModel.pop();map.controls[google.maps.ControlPosition.TOP_CENTER].clear(),selectedShape&&selectedShape.setMap(null),drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON),drawingManager.setOptions({drawingControl:!0}),$timeout(function(){scope.$apply(function(){ctrl.$setValidity("area",!1)})})}function getPolygonData(e){for(var vertices=e.getPath(),i=0;i<vertices.getLength();++i){var xy=vertices.getAt(i);scope.ngModel.push(xy.lat()),scope.ngModel.push(xy.lng())}var newShape=e;setSelection(newShape),scope.$$phase||scope.$apply(function(){ctrl.$setValidity("area",scope.ngModel.length>0),ctrl.$setViewValue(scope.ngModel)})}scope.ngModel||(scope.ngModel=[]),ctrl.$setValidity("area",scope.ngModel.length>0);var selectedShape=null,mapOptions={zoom:scope.options.mapZoom||12},polyOptions={strokeWeight:scope.options.polygonStrokeWeight||1,fillOpacity:scope.options.polygonFillOpacity||.45},map=new google.maps.Map(elem[0].childNodes[0],mapOptions),deleteControlDiv=document.createElement("div");deleteShapeControl(deleteControlDiv,map),deleteControlDiv.index=1;var drawingManager=new google.maps.drawing.DrawingManager({drawingMode:google.maps.drawing.OverlayType.POLYGON,drawingControl:!0,polygonOptions:polyOptions,map:map,drawingControlOptions:{position:google.maps.ControlPosition.TOP_CENTER,drawingModes:[google.maps.drawing.OverlayType.POLYGON]}});if(scope.options.showPin)var marker=new google.maps.Marker({map:map,draggable:!1,position:mapOptions.center,title:scope.options.pinTitle});google.maps.event.addListener(drawingManager,"polygoncomplete",getPolygonData),scope.$watchCollection("ngModel",function(){if(google&&0===scope.ngModel.length&&deleteSelectedShape(),scope.ngModel.length>0&&_.isNull(selectedShape)){for(var polygonCoords=[],i=0;i<scope.ngModel.length;i+=2)polygonCoords.push(new google.maps.LatLng(scope.ngModel[i],scope.ngModel[i+1]));var polygon=new google.maps.Polygon({paths:polygonCoords,strokeWeight:scope.options.polygonStrokeWeight||1,fillOpacity:scope.options.polygonFillOpacity||.45});polygon.setMap(map),setSelection(polygon),drawingManager.setDrawingMode(null),drawingManager.setOptions({drawingControl:!1}),$timeout(function(){scope.$apply(function(){ctrl.$setValidity("area",scope.ngModel.length>0)})})}else drawingManager.setMap(map)}),scope.$watch(function(){return scope.options},function(){scope.options.mapCenter.latitude&&scope.options.mapCenter.longitude&&(mapOptions={zoom:scope.options.mapZoom||12,center:new google.maps.LatLng(scope.options.mapCenter.latitude,scope.options.mapCenter.longitude)},marker.setPosition(mapOptions.center),map.panTo(marker.getPosition()))},!0)},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",options:"="},template:"<div class='rs-map'><div class='rs-map-container'></div></div>"}}]),rockspoonUi.directive("rsMenuBar",function(){return{replace:!0,restrict:"E",scope:{title:"@"},template:"<div class='rs-menu-bar'>  <div class='rs-menu-bar-title' ng-bind='title'></div>  <div class='rs-menu-bar-items' ng-transclude></div></div>",transclude:!0}}).directive("rsMenuBarButtons",function(){return{controller:["$scope",function($scope){var self=this;this.resize=function(){$scope.isHorizontal=$(window).width()<=$scope.minWidth},this.onResize=function(){$scope.$apply(function(){self.resize()})}}],link:function(scope,element,attr,ctrl){$(window).resize(ctrl.onResize),scope.$on("$destroy",function(){$(window).off("resize")}),ctrl.resize()},replace:!0,restrict:"E",scope:{title:"@",iconClass:"@",minWidth:"@"},template:"<div>  <div class='rs-menu-bar-buttons' ng-transclude ng-show='!isHorizontal'></div>  <rs-menu-bar-dropdown title='{{title}}' icon-class='{{iconClass}}' ng-show='isHorizontal'>    <ng-transclude></ng-transclude>  </rs-menu-bar-dropdown></div>",transclude:!0}}).directive("rsMenuBarDropdown",function(){return{replace:!0,restrict:"E",scope:{title:"@",iconClass:"@"},template:"<span class='rs-menu-bar-dropdown dropdown' dropdown on-toggle='toggled(open)'>  <a href class='dropdown-toggle' dropdown-toggle>    <span class='{{iconClass}}'></span>    {{title}}    <b class='caret'></b>  </a>  <ul class='dropdown-menu'>    <ng-transclude></ng-transclude>  </ul></span>",transclude:!0}}).directive("rsMenuBarDropdownLink",function(){return{replace:!0,restrict:"E",scope:{iconClass:"@"},template:"<li class='rs-menu-bar-dropdown-link'>  <span class='{{iconClass}}'></span>  <div ng-transclude></div></li>",transclude:!0}}),rockspoonUi.directive("rsMenuForm",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-menu-form'>  <rs-section>    <rs-title-description ng-model='ngModel' type='Menu'></rs-title-description>  </rs-section>  <rs-section  title='Available for' separator='true'>    <rs-check-box-list ng-model='ngModel.availableFor'></rs-check-box-list>  </rs-section>  <rs-section>    <rs-daily-availability label='Availability Period' ng-model='ngModel'></rs-daily-availability>  </rs-section></div>"}}),function(){"use strict";function calculateHeight(idx,models,templates,stopSameLevel){if(null===models||void 0===models||!models.length)return 0;for(var height=stopSameLevel?0:templates[models[idx].level].height,findNextLevel=-1,level=models[idx].level,i=idx+1;i<models.length;++i){var model=models[i];if(stopSameLevel&&model.level<=level)break;-1!==findNextLevel&&model.level>findNextLevel||(height+=templates[model.level].height,findNextLevel=model.isOpen?-1:model.level)}return height}function createRowTemplates($element,models){var templates={};return _.forEach(models,function(model){if(null===templates[model.level]||void 0===templates[model.level]){var template=angular.element("<rs-menu-item-vertical level='"+model.level+"' class='rs-menu-item rs-level"+model.level+"'></rs-menu-item-vertical>");$element.append(template),templates[model.level]={height:template.height(),template:template,cache:[]},template.remove()}}),templates}rockspoonUi.directive("rsMenu",function(){return{controller:["$scope",function($scope){}],link:function(scope,element,attr,ctrls){var ctrl=ctrls[1];$(window).resize(ctrl.onResize),scope.$on("$destroy",function(){$(window).off("resize")}),scope.$watch(function(){return scope.ngModel},function(){scope.$broadcast("update")},!0)},replace:!0,restrict:"E",require:["ngModel","rsMenu"],scope:{currentStep:"=",selected:"=",ngModel:"=",minWidth:"=",controllerWidth:"="},template:"<div class='rs-menu vertical'>  <div class='rs-control-vertical' rs-viewport style='width: {{controllerWidth}}px'>    <rs-menu-control-vertical selected='selected' current-step='currentStep' ng-model='ngModel'></rs-menu-control-vertical>  </div>  <div class='rs-content' ng-transclude></div></div>",transclude:!0}}).directive("rsMenuControlVertical",["$compile",function($compile){return{controller:["$rootScope","$scope","$element",function($rootScope,$scope,$element){var self=this;$scope.$on("update",function(){self.update()}),this.onUpdate=function(){$scope.$apply(function(){self.update()})},$scope.$on("$destroy",$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){
$scope.selected.state=toState.name,$scope.selected.data=toParams})),$scope.$watch(function(){return $scope.selected},function(){_.forEach($scope.ngModel,function(model){model.selected=!1});var possibleModel;_.forEach($element.children(),function(entry){var scope=$(entry).scope(),model=null!==scope?scope.ngModel:null;if(_.isUndefined(model))return!0;if(scope.currentStep=$scope.currentStep,model.id===$scope.selected.state)if(possibleModel){if(model.state){var match=!0;for(var attr in model.state)if(""+model.state[attr]!==$scope.selected.data[attr]){match=!1;break}match&&(possibleModel=model)}}else possibleModel=model}),possibleModel&&(possibleModel.selected=!0,$scope.$emit("menu-clicked",possibleModel.id,$scope.selected.data))},!0),this.selectModel=function(selectedModel){$scope.$emit("menu-clicked",selectedModel.id,selectedModel.state)};var templates=createRowTemplates($element,$scope.ngModel);$element.height(calculateHeight(0,$scope.ngModel,templates,!1)),this.toggle=function(toggledModel){var idx=_.findIndex($scope.ngModel,function(model){return toggledModel===model}),height=calculateHeight(idx,$scope.ngModel,templates,!0);$element.height($element.height()+height*(toggledModel.isOpen?1:-1)),self.update()},this.update=function(){var port={top:self.viewport.scrollTop(),bottom:self.viewport.scrollTop()+self.viewport.outerHeight()},bounds={top:0,bottom:0};_.forEach($element.children(),function(entry){null!==$(entry).scope&&void 0!==$(entry).scope&&($(entry).is(":visible")&&templates[$(entry).attr("level")].cache.push($(entry)),$(entry).hide())});for(var findNextLevel=-1,i=0;i<$scope.ngModel.length&&!(bounds.top>=2*port.bottom);++i){var model=$scope.ngModel[i],template=templates[model.level];if(!(-1!==findNextLevel&&model.level>findNextLevel)){if(findNextLevel=-1,bounds.bottom+=template.height,!(bounds.top<=port.top&&bounds.bottom<=port.top)){var entry,cache=templates[model.level].cache;if(cache.length)entry=cache[0],cache=templates[model.level].cache=cache.slice(1),entry.scope().ngModel=model,entry.scope().currentStep=$scope.currentStep;else{entry=templates[model.level].template.clone(),entry.hide(),$element.append(entry);var scope=$scope.$new();scope.ngModel=model,scope.currentStep=$scope.currentStep,$compile(entry)(scope,void 0,{transcludeControllers:self})}entry.css({top:bounds.top+"px","z-index":i}),entry.show()}bounds.top=bounds.bottom,model.isOpen||(findNextLevel=model.level)}}}}],link:function($scope,element,attr,ctrls){var ctrl=ctrls[1];ctrl.viewport=ctrls[0].viewport,ctrl.viewport.css({"overflow-y":"auto",display:"block"}),ctrl.viewport.bind("scroll",ctrl.onUpdate),$(window).resize(ctrl.onUpdate),$scope.$on("$destroy",function(){$(window).off("resize"),ctrl.viewport.unbind("scroll")}),$scope.$watch("currentStep",function(){_.forEach($scope.ngModel,function(model){model.step===$scope.currentStep&&($scope.selected.state=model.id)})}),ctrl.update()},replace:!0,require:["^rsViewport","rsMenuControlVertical"],restrict:"E",scope:{currentStep:"=",selected:"=",ngModel:"="},template:"<div class='rs-menu-control-vertical'></div>"}}]).directive("rsMenuItemVertical",function(){return{link:function($scope,element,attr,ctrl){$scope.clicked=function(){(_.isUndefined($scope.ngModel.step)||!(!_.isUndefined($scope.ngModel.enableInStep)&&$scope.currentStep<$scope.ngModel.enableInStep||_.isUndefined($scope.ngModel.enableInStep)&&$scope.currentStep<$scope.ngModel.step))&&($scope.ngModel.hasSubmenu?($scope.ngModel.isOpen=!$scope.ngModel.isOpen,ctrl.toggle($scope.ngModel)):ctrl.selectModel($scope.ngModel))}},replace:!0,require:"^rsMenuControlVertical",restrict:"E",template:"<div ng-click='clicked()' ng-class='{selected:ngModel.selected, disabled:(ngModel.enableInStep && currentStep < ngModel.enableInStep) || (!ngModel.enableInStep && currentStep < ngModel.step)}'>  <table>    <tr>      <td class='rs-menu-item-toggle' ng-if='ngModel.hasSubmenu'>        <i ng-class='{\"icon-icons_ArrowDown\":ngModel.isOpen, \"icon-icons_ArrowUp\":!ngModel.isOpen}'></i>      </td>      <td ng-if='ngModel.icon' class='rs-icon'>        <i class='{{ngModel.icon}}'></i>      </td>      <td style='width:20px' ng-if='ngModel.step'>        <div class='rs-step-container'>          <div class='rs-step'>Step</div>          <div style='margin-top:-4px'>{{ngModel.step}}</div>        </div>      </td>      <td>{{ngModel.title}}</td>    </tr>  </table></div>"}})}.call(this),rockspoonUi.directive("rsMultiLine",["UID","focus",function(UID,focus){return{link:function($scope,elm,attrs,ctrl,transclude){if(!_.isObject($scope.ngOpts))throw new Error("Must pass the ng-opts");if(!_.isFunction($scope.ngOpts.rowFactory))throw new Error("Must pass a row factory in ng-options");$scope.uid=UID.create(),transclude($scope,function(clone,scope){elm.append(clone)});var cloneModel=function(){$scope.ngModel||($scope.ngModel=[]),$scope.internalModel=_.clone($scope.ngModel);var obj=$scope.ngOpts.rowFactory();obj.$isNew=!0,obj.fnChanged=$scope.changed,$scope.internalModel.push(obj),setTimeout(function(){$scope.$apply()},0)};$scope.remove=function(model){_.isFunction($scope.ngOpts.onBeforeRowRemove)?$scope.ngOpts.onBeforeRowRemove(model,$scope):$scope.performRemove(model)},$scope.performRemove=function(model){elm.parent().removeClass("ng-pristine"),_.pull($scope.ngModel,model),_.pull($scope.internalModel,model),_.isFunction($scope.ngOpts.onRowRemoved)&&$scope.ngOpts.onRowRemoved(model),focus($scope.uid),focus($scope.uid+"_last")},$scope.changed=function(model){elm.removeClass("ng-pristine"),_.isUndefined(model)||_.isUndefined(model.$isNew)?!_.isString($scope.ngOpts.autoDeleteKey)||_.isUndefined(model[$scope.ngOpts.autoDeleteKey])||model[$scope.ngOpts.autoDeleteKey].length||$scope.remove(model):(delete model.$isNew,delete model.fnChanged,$scope.ngModel.push(model),cloneModel(),elm.find("#"+$scope.uid+"_last").length&&focus($scope.uid))},$scope.$watchCollection("ngModel",function(){cloneModel()}),$scope.$watch(function(){return $scope.internalModel},function(newM,oldM){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed(newM,oldM)},!0),$scope.sortableOptions={cursor:"move",handle:".handler",stop:function(){$scope.ngModel.length=0;for(var i=0;i<$scope.internalModel.length-1;++i)$scope.ngModel.push($scope.internalModel[i]);_.isFunction($scope.ngOpts.onMove)&&$scope.ngOpts.onMove()},items:"tr:not(.not-sortable)"}},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",ngOpts:"="},template:"<div></div>",transclude:!0}}]),rockspoonUi.directive("rsNavbar",function(){return{replace:!0,restrict:"E",template:"<div class='rs-navbar'>  <div class='rs-navbar-wrapper' ng-transclude></div></div>",transclude:!0}}).directive("rsQuickMenu",function(){return{controller:["$scope",function($scope){this.addLink=function(link){$scope.links.push(link)},$scope.links=[]}],replace:!0,restrict:"E",template:"<div class='rs-navbar-menu' dropdown on-toggle='toggled(open)'>  <div class='rs-navbar-menu-icon' dropdown-toggle>    <div class='icon-icons_QuickMenu'></div>  </div>  <div class='rs-navbar-menu-bubble' ng-transclude></div></div>",transclude:!0}}).directive("rsQuickMenuLink",function(){return{link:function($scope,element,attr,rsQuickMenu){rsQuickMenu.addLink($scope)},replace:!0,require:"^rsQuickMenu",restrict:"E",scope:{iconClass:"@",toState:"@"},template:"<div class='rs-navbar-menu-circle' ui-sref='{{toState}}' ui-sref-active='selected'>  <span class='{{iconClass}}'></span>  <div ng-transclude></div><div>",transclude:!0}}).directive("rsNavbarLogo",function(){return{replace:!0,restrict:"E",scope:{logoClass:"@"},template:"<div class='rs-navbar-logo'>  <span class='{{logoClass}}'></span></div>"}}).directive("rsNavbarTitle",function(){return{replace:!0,restrict:"E",scope:{description:"@"},template:"<div class='rs-navbar-title'>  <div>    <ng-transclude></ng-transclude>    <div class='rs-title-description' title='{{description}}'>{{description}}</div>  </div></div>",transclude:!0}}).directive("rsNavbarVenues",function(){return{controller:["$scope","$rootScope",function($scope,$rootScope){$("#rs-stopclose").on("click",function(e){e.stopPropagation()});var unregClose=$rootScope.$on("closeBalloon",function(){$scope.balloonOpen=!1});$scope.$on("$destroy",unregClose)}],replace:!0,restrict:"E",scope:{ngModel:"=",enableDropDown:"="},template:"<div class='rs-navbar-dropdown rs-navbar-title' dropdown is-open='balloonOpen'>  <div dropdown-toggle ng-disabled='!enableDropDown'>    <span ng-hide='ngModel.venueId'>      (New Restaurant)    </span>    <span ng-show='ngModel.venueId'>      {{ngModel.brand.name}}    </span>    <div ng-show='ngModel.venueId' class='rs-title-description'>{{ngModel.address.address1}}, {{ngModel.address.city}}, {{ngModel.address.region}} <b class='caret' ng-if='enableDropDown'></b></div>  </div>  <ul class='dropdown-menu'>    <li id='rs-stopclose' ng-transclude>    </li>  </ul></div>",transclude:!0}}).directive("rsNavbarOperatingEntities",function(){return{controller:["$scope","$rootScope",function($scope,$rootScope){$("#rs-stopclose").on("click",function(e){e.stopPropagation()});var unregClose=$rootScope.$on("closeBalloon",function(){$scope.balloonOpen=!1});$scope.$on("$destroy",unregClose)}],replace:!0,restrict:"E",scope:{ngModel:"=",enableDropDown:"="},template:"<div class='rs-navbar-dropdown rs-navbar-title' dropdown is-open='balloonOpen'>  <div dropdown-toggle ng-disabled='!enableDropDown'>    <span>      {{ngModel.name}}    </span>    <div class='rs-title-description'>{{ngModel.fullAddress}} <b class='caret' ng-if='enableDropDown'></b></div>  </div>  <ul class='dropdown-menu'>    <li id='rs-stopclose' ng-transclude>    </li>  </ul></div>",transclude:!0}}).directive("rsNavbarDropdown",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<span class='rs-navbar-dropdown dropdown' dropdown on-toggle='toggled(open)'>  <a href class='dropdown-toggle' dropdown-toggle>    <img class='rs-navbar-avatar' ng-src='{{ngModel.avatar.url}}' ng-if='ngModel.avatar.url' />    <span class='icon-icons_Avatar' ng-if='!ngModel.avatar.url'></span>    {{ngModel.firstName}} {{ngModel.lastName}}    <b class='caret'></b>  </a>  <ul class='dropdown-menu'><ng-transclude></ng-transclude></ul></span>",transclude:!0}}).directive("rsNavbarDropdownLink",function(){return{replace:!0,restrict:"E",scope:{iconClass:"@",thumb:"="},template:"<li class='rs-dropdown-link'>  <img class='rs-navbar-avatar' ng-src='{{thumb}}' ng-if='thumb' />    <span class='{{iconClass}}' ng-if='!thumb'></span>  <div ng-transclude></div></li>",transclude:!0}}).directive("rsNavbarSection",function(){return{replace:!0,restrict:"E",template:"<div class='rs-navbar-section'>  <div ng-transclude></div></div>",transclude:!0}}),rockspoonUi.directive("rsOnOff",function(){return{link:function($scope){$scope.internalModel=$scope.ngModel?$scope.on:$scope.off,$scope.$watchCollection("ngModel",function(){$scope.internalModel=$scope.ngModel?$scope.on:$scope.off});var isStart=!0;$scope.$watchCollection("internalModel",function(){$scope.ngModel=$scope.internalModel===$scope.on,isStart||setTimeout(function(){$scope.$apply(function(){$scope.onChange()})},0),isStart=!1})},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",onChange:"&",off:"@",on:"@"},template:"<div class='rs-on-off'>  <div class='btn-group'>    <label class='btn btn-primary' ng-model='internalModel' btn-radio=\"'{{::on}}'\">{{::on}} <i ng-class='{\"icon-icons_Success\":ngModel === true}'></i></label>    <label class='btn btn-primary' ng-model='internalModel' btn-radio=\"'{{::off}}'\">{{::off}} <i ng-class='{\"icon-icons_Success\":ngModel === false}'></i></label>  </div></div>"}}),rockspoonUi.directive("rsSingleOpeningHours",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",last:"="},template:"<div class='rs-single-opening-hours'>  <table>    <tr>      <td style='width:80px'>        <rs-label class='rs-day' label={{::ngModel.day}}></rs-label>      </td>      <td class='rs-margin-left'>        <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.day}}' ng-model='ngModel.closed' label='Closed all day'></rs-check-box>      </td>    </tr>  </table>  <rs-multi-time ng-if='!ngModel.closed' ng-model='ngModel.time' ></rs-multi-time>  <hr class='separator' ng-class='{\"rs-opening-hours-separator\":!last}'/></div>"}}).directive("rsOpeningHours",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-opening-hours'>  <rs-single-opening-hours ng-repeat='day in ngModel' last='$last' ng-model='day'></rs-single-opening-hours></div>"}}).directive("rsSingleAvailability",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-single-availability'>  <div class='day-container'>    <rs-label class='day' label={{::ngModel.day}}></rs-label>    <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.day}}' ng-model='ngModel.unavailable' label='Unavailable'></rs-check-box>  </div>  <rs-multi-time class='multi' ng-if='!ngModel.unavailable' ng-model='ngModel.time' ></rs-multi-time>  <hr class='separator'/></div>"}}).directive("rsAvailabilityPeriod",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-availability'>  <rs-radio-button id='availability_always' value='always' label='Always Available' ng-model='ngModel.availability'></rs-radio-button>  <rs-radio-button id='availability_sometimes' value='sometimes' label='During a period' ng-model='ngModel.availability'></rs-radio-button>  <rs-single-availability  ng-if='ngModel.availability === \"sometimes\"' ng-repeat='day in ngModel.days' ng-model=day></rs-single-availability></div>"}}).directive("rsDailyAvailability",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",label:"@"},template:"<div class='rs-availability'>  <rs-label label={{::label}}></rs-label>  <table>     <tr>      <td>        <rs-radio-button id='availability_always' value='true' label='Always Available' ng-model='ngModel.alwaysAvailable'></rs-radio-button>      </td>      <td class='rs-margin-left'>        <rs-radio-button id='availability_sometimes' value='false' label='During a period' ng-model='ngModel.alwaysAvailable'></rs-radio-button>      </td>    </tr>  </table>   <rs-single-availability  ng-if='ngModel.alwaysAvailable === false' ng-repeat='day in ngModel.dailyAvailability' ng-model=day></rs-single-availability></div>"}}),rockspoonUi.directive("rsOrderMethod",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],require:"ngModel",restrict:"E",replace:!0,scope:{ngModel:"="},template:"<div class='rs-order-method'>  <b>Order Method</b> (This is how we will inform you about new orders)  <div class='rs-order-method-radios'>    <rs-radio-button  id='rs-printer-order-{{::uid}}' value='rockPrinter' label='RockPrinter' ng-model='ngModel.orderMethod'></rs-radio-button>    <rs-radio-button  id='rs-fax-order-{{::uid}}' value='fax' label='By Fax' ng-model='ngModel.orderMethod'></rs-radio-button>    <rs-radio-button  id='rs-email-order-{{::uid}}' value='email' label='by Email' ng-model='ngModel.orderMethod'></rs-radio-button>  </div>  <rs-contact-info-validation ng-model='ngModel'>    <rs-order-methods ng-model='ngModel'></rs-order-methods>  </rs-contact-info-validation></div>"}}).directive("rsOrderMethods",function(){return{controller:["$scope",function($scope){$scope.validate=function(type,model){$scope.verify(type,model)}}],link:function(scope,elem,attrs,rsContactInfoValidationCtrl){scope.verify=rsContactInfoValidationCtrl.verify},require:"^rsContactInfoValidation",restrict:"E",replace:!0,scope:{ngModel:"="},template:"<div class='rs-order-methods'>  <div class='rs-method' ng-if='ngModel.orderMethod === \"email\"'>    <rs-text-edit mandatory='true' label='Email' placeholder='Email' ng-model='ngModel.orderEmail' label-same-line='false'></rs-text-edit>    <div class='rs-order-method-validation'>      <button class='rs-button' ng-click='validate(\"email\" , { email: ngModel.orderEmail })' ng-if='!ngModel.validatedEmail && ngModel.orderEmail !== \"\"'>Validate Email</button>      <label ng-if='ngModel.validatedEmail'>Validated</label>    </div>  </div>  <div class='rs-method' ng-if='ngModel.orderMethod === \"fax\"'>    <div class='rs-phone-input' ng-class='{lightgray:ngModel.$isNew}'>      <div style='display:table-row'>        <div class='text-label' style='display:table-cell'>          <label style='text-align:right'>Fax<i class='glyphicon glyphicon-asterisk'></i></label>        </div>      </div>      <div style='display:table-row'>        <div class='text-field' style='width:100%;display:table-cell'>          <input type='tel' id='order-fax-{{::uid}}' rs-intl-phone-number ng-model='ngModel.orderFax' default-country='us' preferred-countries='us'/>        </div>      </div>    </div>    <div class='rs-order-method-validation'>      <button class='rs-button' ng-click='validate(\"fax\", { fax: ngModel.orderFax })' ng-if='!ngModel.validatedFax && ngModel.orderFax !== \"\"'>Validate Fax</button>      <label ng-if='ngModel.validatedFax'>Validated</label>    </div>  </div>  <rs-multi-call-back-phones ng-model='ngModel.callbackPhones' ng-if='ngModel.orderMethod !== \"rockPrinter\"'></rs-multi-call-back-phones></div>"}}).directive("rsMultiCallBackPhones",function(){return{controller:["$scope",function($scope){$scope.validate=function(type,model){$scope.verify(type,model)},$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{isValidated:!1,phone:null}}}}],link:function(scope,elem,attrs,rsContactInfoValidationCtrl){scope.verify=rsContactInfoValidationCtrl.verify},replace:!1,require:"^rsContactInfoValidation",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts'>  <div class='rs-multi-call-back-phones'>    <div ng-repeat='model in internalModel'>      <div class='rs-phone-container'>        <rs-phone-input label='Call Back Phone {{$index+1}}' ng-model='model'></rs-phone-input>      </div>      <div class='remove-button'>        <button ng-if='!$last && !($first && model.isValidated)' ng-click='remove(model)'>          <i class='icon-icons_Delete'></i>        </button>      </div>      <div class='rs-order-method-validation' ng-if='!$last'>        <button class='rs-button' ng-click='$parent.$parent.$parent.validate(\"phone\", model)' ng-show='!model.isValidated'>Validate Phone</button>        <label ng-if='model.isValidated'>Validated</label>      </div>    </div>  </div></rs-multi-line>"}}).directive("rsContactInfoValidation",function(){return{controller:["$scope","$modal",function($scope,$modal){this.verify=function(type,model){var modal=$modal.open({windowClass:"centered-modal",backdrop:"static",resolve:{type:function(){return type},model:function(){return model}},template:"<div class='modal-body'>  <div ng-if='type === \"email\"'>    <p>You will receive an automated email at <a style='font-weight: bold;'>{{model.email}}</a><br />Please enter the PIN from that email in the field below:</p>    <p>      <input type='text' ng-model='validation.pin' placeholder='######' autofocus maxlength='6' size='6' ui-keypress='{ 13:\"submit()\" }' />      <div class='rs-error' ng-show='form.error'>        Invalid Pin      </div>    </p>  </div>  <div ng-if='type === \"fax\"'>    <p>You will receive an automated fax at <a style='font-weight: bold;'>{{model.fax}}</a><br />Please enter the PIN from that fax in the field below:    </p>    <p>      <input type='text' ng-model='validation.pin' placeholder='######' auto-focus='true' maxlength='6' size='6' ui-keypress='{ 13:\"submit()\" }' />      <div class='rs-error' ng-show='form.error'>        Invalid Pin      </div>    </p>  </div>  <div ng-if='type === \"phone\"'>    <p ng-if='pin'>      You will receive an automated phone call at <a style='font-weight: bold;'>{{model.phone}}</a>      <br />Please use the phone touchpad      <br />to enter the following PIN code:      <h2>{{pin}}</h2>    </p>    <div ng-if='error' class='alert alert-danger text-left'>      <i class='glyphicon glyphicon-exclamation-sign'></i>{{ error }}    </div>  </div>  <button ng-click='submit()' ng-hide='form.locked' ng-if='type !== \"phone\"'>    Submit  </button>  <button ng-click='cancel()' ng-hide='form.locked'>    Cancel  </button>  <label ng-show='form.locked' ng-if='type !== \"phone\"'>    Loading...  </label></div>",controller:["$scope","$modalInstance","$timeout","type","model","ValidationService",function($scope,$modalInstance,$timeout,type,model,validation){$scope.type=type,$scope.model=model;var handleError=function(err){$scope.form.locked=!1};switch($scope.form={locked:!1},$scope.validation={pin:""},$scope.$watch("validation.pin",function(){$scope.validation.error=!1,$scope.validation.pin=$scope.validation.pin.replace(/[^0-9]/g,"")}),$scope.type){case"phone":$scope.value=model.phone;var pollValidation=function(){$scope.poll=$timeout(function(){validation.performPhoneValidation($scope.pin,$scope.value).then(function(result){model.isValidated=!0,$modalInstance.close()})["catch"](function(err){pollValidation()})},5e3)};validation.triggerPhoneValidation($scope.value).then(function(result){$scope.pin=result,pollValidation()})["catch"](function(err){$scope.error=err.message,handleError(err)});break;case"email":$scope.value=model.email,validation.triggerEmailValidation(model.email)["catch"](handleError),$scope.submit=function(){$scope.form.locked=!0,validation.performEmailValidation($scope.validation.pin,$scope.value).then(function(){$scope.form.locked=!1,$modalInstance.close("EMAIL_VALIDATED")})["catch"](function(err){$scope.form.locked=!1,"InternalServerError"===err.name||"ForbiddenAccessError"===err.name?handleError(err):$scope.form.error=!0})};break;case"fax":$scope.value=model.fax,validation.triggerFaxValidation(model.fax)["catch"](handleError),$scope.submit=function(){$scope.form.locked=!0,validation.performFaxValidation($scope.validation.pin,$scope.value).then(function(){$scope.form.locked=!1,$modalInstance.close("FAX_VALIDATED")})["catch"](function(err){$scope.form.locked=!1,"InternalServerError"===err.name||"ForbiddenAccessError"===err.name?handleError(err):$scope.form.error=!0})}}$scope.cancel=function(){$scope.poll&&$timeout.cancel($scope.poll),$modalInstance.close()}}]});modal.result.then(function(result){"EMAIL_VALIDATED"===result?$scope.ngModel.validatedEmail=!0:"FAX_VALIDATED"===result&&($scope.ngModel.validatedFax=!0)})}}],scope:{ngModel:"="},require:"ngModel",replace:!0,restrict:"E",transclude:!0,template:"<ng-transclude></ng-transclude>"}}),rockspoonUi.directive("rsParkingAddress",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"=",typeLabel:"@"},template:"<div class='rs-parking-address'><rs-label>{{::label}}</rs-label><div class='address-info'><rs-combo-box class='parking-type' label-same-line='false' label='{{::typeLabel}}' ng-model='ngModel.parkingType' ></rs-combo-box><rs-check-box label='Same as property address' ng-model='samePropertyAddress'></rs-check-box><rs-address ng-model='ngModel'></rs-address></div></div>"}}),rockspoonUi.directive("rsPaymentMethod",function(){return{require:"ngModel",restrict:"E",replace:!0,scope:{ngModel:"=",options:"="},controller:["$scope",function($scope){$scope.$watch(function(){return $scope.ngModel},function(newP,oldP){"weekly"===newP?$scope.description=$scope.options.weekly:"monthly"===newP&&($scope.description=$scope.options.monthly),$scope.enabled=!0})}],template:"<div class='rs-section'>  <p>Payment Method<i> (Select how you would prefer to be paid by RockSpoon)*</i></p>  <div class='rs-payment-radio-container'>    <div class='rs-payment-radio-left'>      <input type='radio' value='weekly' label='Automatic Transfer(once per week)' ng-model='ngModel' />      Automatic transfer (once per week)    </div>    <div class='rs-payment-radio-right'>      <input type='radio' value='monthly' label='Check(once per month)' ng-model='ngModel' />      Check (once per month)    </div>  </div>  <div class='rs-payment-description' ng-show='enabled'>    <p>{{description.title}}</p>    <ul>      <li ng-repeat='option in description.options'>        {{option}}      </li>    </ul>  </div></div>"}}),rockspoonUi.directive("rsPersonInCharge",function(){return{controller:["$scope","$modal","FetchEmployee",function($scope,$modal,fetch){$scope.selectPersonInCharge=function(model){var modal=$modal.open({windowClass:"centered-modal",backdrop:"static",resolve:{model:function(){return model}},template:"<div>  <rs-menu-bar title='Employees'>    <rs-menu-bar-buttons>      <button ng-click='cancel()'>Cancel</button>      <button ng-click='use()'>Use</button>    </rs-menu-bar-buttons>  </rs-menu-bar>  <div style='width:600px; height:400px; border: 1px solid #D3D3D3; padding: 10px; overflow: hidden;'>    <rs-employees-list-view ng-model='list' selected='model'></rs-employees-list-view>  </div></div>",controller:["$scope","$modalInstance","model",function($scope,$modalInstance,model){$scope.model=model,$scope.list=[],fetch.fetchEmployee().then(function(result){$scope.list=result}),$scope.use=function(){$modalInstance.close($scope.model)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]});modal.result.then(function(result){$scope.ngModel=result})}}],restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"="},template:"<div class='rs-person-in-charge'>  <a ng-click='selectPersonInCharge(ngModel)'>    <i class='icon-icons_Database'></i>    <span ng-if='!ngModel.userInfo.firstName'>Click here to access your employee contact list</span>    <span ng-if='ngModel.userInfo.firstName'>{{ngModel.userInfo.firstName}}&nbsp;{{ngModel.userInfo.lastName}}</span>  </a></div>"}}),rockspoonUi.directive("rsIntlPhoneNumber",function(){return{link:function(scope,elm,attr,ctrl){scope.$watchCollection(function(){return elm.val()},function(){""!==elm.val()&&elm.intlTelInput("setNumber",elm.val())});var read=function(){return ctrl.$setViewValue(elm.val())},handleArrays=function(value){return"object"==typeof value?value:value.toString().replace(/[ ]/g,"").split(",")},options={autoFormat:!0,autoHideDialCode:!0,defaultCountry:"",nationalMode:!1,numberType:"",onlyCountries:void 0,preferredCountries:["us","gb"],responsiveDropdown:!0,utilsScript:""};return angular.forEach(options,function(value,key){var option;return option=attr[key],angular.isDefined(option)?void("preferredCountries"===key?options.preferredCountries=handleArrays(option):"onlyCountries"===key?options.onlyCountries=handleArrays(option):"boolean"==typeof value?options[key]="true"===option:options[key]=option):void 0}),elm.intlTelInput(options),elm.intlTelInput("loadUtils","/3rdparty/intl-tel-input/lib/libphonenumber/build/utils.js"),ctrl.$parsers.push(function(value){return value?value.replace(/[^\+\d]/g,""):value}),ctrl.$parsers.push(function(value){return value?ctrl.$setValidity("intlPhoneNumber",elm.intlTelInput("isValidNumber")):(value="",delete ctrl.$error.intlPhoneNumber),value}),elm.on("blur keyup change",function(){return scope.$apply(read)}),elm.on("invalidkey",function(){elm.addClass("invalid-flash"),setTimeout(function(){elm.removeClass("invalid-flash")},100)}),elm.on("$destroy",function(){return elm.off("blur keyup change")})},restrict:"A",require:"^ngModel"}}).directive("rsPhoneInput",["UID",function(UID){return{controller:["$scope",function($scope){$scope.uid=UID.create(),$scope.changed=function(){if(_.isFunction($scope.$parent.changed)){var dialCode="+"+$("#phone_"+$scope.uid).intlTelInput("getSelectedCountryData").dialCode;if($scope.ngModel.phone===dialCode||""===$scope.ngModel.phone)return;$scope.$parent.changed($scope.ngModel)}}}],link:function(scope,elm,attrs){scope.$on("kickOffValidations",function(event,args){scope.showValidationErrors=args.show})},replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",mandatory:"=",ngModel:"="},template:"<div ng-form='form' class='rs-phone-input' ng-class='{lightgray:ngModel.$isNew}'>  <div style='display:table-row' ng-if='label'>    <div class='text-label' style='display:table-cell'>      <label style='text-align:right'>{{label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>    </div>  </div>  <div style='display:table-row'>    <div class='text-field' style='width:100%;display:table-cell'>      <input type='tel' id='phone_{{::uid}}' rs-intl-phone-number ng-model='ngModel.phone' default-country='us' preferred-countries='us' ng-required='mandatory' ng-change='changed()' />      <div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'>        <ng-message when='required'>This field is required.</ng-message>        <ng-message when='intlPhoneNumber'>This number is invalid.</ng-message>      </div>    </div>  </div></div>"}}]).directive("rsPhoneTextEdit",["UID",function(UID){return{controller:["$scope",function($scope){$scope.uid=UID.create(),$scope.changed=function(){if(_.isFunction($scope.$parent.changed)){var dialCode="+"+$("#phone_"+$scope.uid).intlTelInput("getSelectedCountryData").dialCode;if($scope.ngModel.phone===dialCode||""===$scope.ngModel.phone)return;$scope.$parent.changed($scope.ngModel)}},$scope.phoneType=[{label:"Mobile",value:"Mobile"},{label:"Landline",value:"Landline"}]}],link:function(scope,elm,attrs){scope.$on("kickOffValidations",function(event,args){scope.showValidationErrors=args.show})},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",mandatory:"=",last:"="},template:"<table class='rs-phone-text-edit' ng-class='{\"rs-margin-bottom\":!last}'>  <tr>    <td style='vertical-align:top'>      <rs-combo-box mandatory='mandatory' ng-model='ngModel.type' options='phoneType' on-change='changed()'></rs-combo-box>    </td>    <td ng-form='form' class='rs-phone-field'>      <input type='tel' id='phone_{{::uid}}' rs-intl-phone-number ng-model='ngModel.phone' ng-change='changed()' default-country='us' preferred-countries='us'>      <div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'>        <ng-message when='required'>This field is required.</ng-message>        <ng-message when='intlPhoneNumber'>This number is invalid.</ng-message>      </div>    </td>  </tr></table>"}}]).directive("rsMultiPhoneTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{type:"Mobile",phone:null}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-label>{{::label}}</rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'>  <rs-remove-button ng-repeat='model in internalModel'>    <rs-phone-text-edit last='$last' ng-model='model'></rs-phone-text-edit>  </rs-remove-button></rs-multi-line>"}}),rockspoonUi.directive("rsPhotos",[function(){return{controller:["$scope","UID",function($scope,UID){$scope.isDescEnabled=!0,$scope.selectedPhotoIds=[],$scope.newPhoto={},$scope.selectPhoto=function(photo,$index){photo.selected?(photo.selected=!1,_.pull($scope.selectedPhotoIds,$index)):(photo.selected=!0,$scope.selectedPhotoIds.push($index))},$scope.toggleDescription=function(){$scope.isDescEnabled=!$scope.isDescEnabled},$scope.deletePhotos=function(){_.pullAt($scope.gallery,$scope.selectedPhotoIds),$scope.selectedPhotoIds=[]},$scope.makeDefault=function(){for(var newDefaultIndex=$scope.selectedPhotoIds[0],i=0;i<$scope.gallery.length;i++)$scope.gallery[i].selected=!1;$scope.gallery.unshift(_.pullAt($scope.gallery,newDefaultIndex)[0]),$scope.selectedPhotoIds=[]}}],link:function(scope){scope.$watch(function(){return scope.newPhoto;
},function(newP,oldP){newP!==oldP&&scope.gallery.push({buffer:newP})},!0)},replace:!0,restrict:"E",scope:{gallery:"=",descriptionToggle:"="},template:"<div class='rs-photos' ng-model='newPhoto'>  <div class='rs-photos-bar'>    <button class='rs-button' ng-click='toggleDescription()' ng-if='descriptionToggle'>      <span ng-if='isDescEnabled'>Hide Description</span>      <span ng-if='!isDescEnabled'>Show Description</span>    </button>    <button class='rs-button' ng-click='deletePhotos()' ng-disabled='selectedPhotoIds.length === 0'>Delete</button>    <button class='rs-button' ng-click='makeDefault()' ng-disabled='selectedPhotoIds.length !== 1'>Make as Default</button>    <rs-image-picker-generic ng-model='newPhoto'><rs-image-picker ng-model='newPhoto'></rs-image-picker></rs-image-picker-generic>  </div>  <div ng-if='!gallery || gallery.length === 0' class='rs-no-photos'>    No Photos yet, Please add some  </div>  <div class='rs-photos-container' ng-if='gallery && gallery.length > 0'>    <div ng-repeat='photo in gallery track by $index' class='rs-photo' ng-class='{ noDescription : !isDescEnabled }'>      <div class='rs-ribbon' ng-if='$index === 0'>        <span>Default</span>      </div>      <img ng-src='{{photo.url}}' ng-if='photo.buffer == null' ng-class='{ selected: photo.selected }' ng-click='selectPhoto(photo, $index)' />      <img ng-src='{{photo.buffer}}' ng-if='photo.buffer != null' ng-class='{ selected: photo.selected }' ng-click='selectPhoto(photo, $index)' />      <input placeholder='Title' ng-model='photo.title' />      <textarea placeholder='Description' ng-model='photo.description'></textarea>    </div>  </div></div>"}}]),rockspoonUi.directive("rsPinInput",["UID","focus",function(UID,focus){var state={INIT:1,VALIDATING:2,VALIDATED:3,FAILED:4,FAILED_REQUEST:5,REQUESTING_PIN:6};return{controller:["$scope",function($scope){$scope.validate=function(pin){$scope.state=state.VALIDATING,$scope.isDisabled=!0;var validator=function(err,result){if(err){for(var i=0;i<$scope.arr.length;++i)$scope.arr[i]="";$scope.state=state.FAILED,$scope.isDisabled=!1,focus("pin["+$scope.uid+"_0]")}else result&&($scope.state=state.VALIDATED,$scope.isDisabled=!0,$scope.onValidated());$scope.$apply()};$scope.validatePin({pin:pin,cb:validator})},$scope.request=function(){$scope.state=state.REQUESTING_PIN,$scope.isDisabled=!0;var cb=function(err,result){if(err)$scope.state=state.FAILED_REQUEST;else if(result){$scope.state=state.INIT;for(var i=0;i<$scope.arr.length;++i)$scope.arr[i]=""}$scope.isDisabled=!1,$scope.$apply()};$scope.requestPin({cb:cb})}}],link:function($scope){$scope.state=state.INIT,$scope.isDisabled=!1,$scope.pin="",$scope.uid=UID.create();var pLength=parseInt($scope.length,10);$scope.arr=new Array(pLength);for(var i=0;i<$scope.arr.length;++i)$scope.arr[i]="";$scope.request(),$scope.$watch(function(){return $scope.arr},function(){$scope.pin="";for(var i=0;i<$scope.arr.length;++i)$scope.pin+=$scope.arr[i];$scope.pin.length==$scope.length&&$scope.validate($scope.pin)},!0)},replace:!0,restrict:"E",scope:{label:"@",length:"@",onValidated:"&",requestPin:"&",validatePin:"&"},template:"<div class='rs-pin-input'><rs-label>{{::label}}</rs-label><input digit ng-disabled='isDisabled' id='pin[{{uid}}_{{$index}}]' focus-on='pin[{{uid}}_{{$index}}]' ng-class='{ \"rs-error\" : state == 4, \"rs-success\": state == 3 }' ng-repeat='n in arr' placeholder = '#' class='box' rs-focus-next ng-model='arr[$index]' maxlength='1' /><span ng-if='state == 4' class='rs-error'><i class='glyphicon glyphicon-remove' style='margin: 0 5px;'></i>Wrong Pin Code <span class='sep'>&nbsp;</span> <button class='rs-button' ng-click='request()'>Resend a new PIN Code</button></span><span ng-if='state == 3' class='rs-success'><i class='glyphicon glyphicon-ok' style='margin:0 5px;'></i>PIN code validated</span><span ng-if='state == 2'><i class='glyphicon glyphicon-refresh' style='margin:0 5px;'></i>Validating</span><span ng-if='state == 5' class='rs-error'><i class='glyphicon glyphicon-remove' style='margin: 0 5px;'></i> Failed to generate a new PIN <span class='sep'>&nbsp;</span> <button class='rs-button' ng-click='request()'>Resend a new PIN Code</button></span><span ng-if='state == 6'><i class='glyphicon glyphicon-refresh' style='margin:0 5px;'></i>Requesting a PIN</span></div>"}}]),rockspoonUi.directive("rsPosManager",function(){return{controller:["$scope",function($scope){function updateSelectedDevice(){$scope.showManagerBar=$scope.selectedDevices.length>0,$scope.selectedDevices.length>1?($scope.showposData=!1,$scope.posData=$scope.selectedDevices):($scope.showposData=!0,$scope.posData=$scope.selectedDevices[0],void 0!==$scope.posData&&$scope.wifiOptions.forEach(function(wifi){return wifi.name===$scope.posData.wifi.name?($scope.wifiModel=JSON.parse(JSON.stringify(wifi)),!1):void 0}))}$scope.selectedDevices=[],$scope.showManagerBar=!1,$scope.showposData=!1,$scope.posData={},$scope.sendSMSPhone={},$scope.wifiModel={};var sorter=function(predicate,reverse){var key=function(x){return x[predicate]};return reverse=reverse?-1:1,function(a,b){return a=key(a),b=key(b),reverse*((a>b)-(b>a))}};$scope.sortBy=function(cb){$scope.ngModel.sort(sorter($scope.tableOptions.predicate,$scope.tableOptions.reverse)),setTimeout(function(){cb()},2e3)},$scope.nextPage=function(cb){setTimeout(function(){cb(!0,!1)},100)},$scope.localCall=function(){var fn=[].shift.apply(arguments);fn=fn&&"[object Function]"==Object.prototype.toString.call(fn)?fn():void 0,void 0!==fn&&fn.apply(this,arguments)},$scope.wifiDiscardChanges=function(){updateSelectedDevice()},$scope.$watchCollection("selectedDevices",updateSelectedDevice)}],replace:!0,require:["ngModel","tableOptions"],restrict:"E",scope:{ngModel:"=",tableOptions:"=",wifiOptions:"=",editName:"&",sendSms:"&",printCode:"&",editPos:"&",restartPos:"&",deletePos:"&",saveWireless:"&"},template:"<div novalidate class='rs-pos-manager'> <div class='holder'>   <div class='content'>     <rs-table options='tableOptions' ng-model='ngModel' style='height:500px;' next-page='nextPage(cb)' sort-by='sortBy(cb)' selected='selectedDevices'>       <rs-table-column model-column='name' header='Printer Name'></rs-table-column>       <rs-table-column model-column='type' header='PoS Type'>         {{ngModel.type.label}}       </rs-table-column>       <rs-table-column model-column='user' header='in use by'>         {{ngModel.user.name}}       </rs-table-column>       <rs-table-column model-column='wifi' width='180' header='Wireless'>         {{ngModel.wifi.name}}          <div style='float: right' ng-show='ngModel.wifi.name!==\"\"'>            <i ng-class='{\"icon-icons_Lock\": ngModel.wifi.security}'></i>            <i ng-class='{\"glyphicon glyphicon-screenshot\": ngModel.wifi.passwordSaved}'></i>            <rs-connectivity-signal ng-model='ngModel.wifi.signal' type='wifi'></rs-connectivity-signal>          </div>       </rs-table-column>       <rs-table-column model-column='cellular' width='100' header='Cellular'>         {{ngModel.cellular.networkType}}         <rs-connectivity-signal ng-show='ngModel.cellular.networkType!==\"\"' ng-model='ngModel.cellular.signal' type='operator'></rs-connectivity-signal>       </rs-table-column>       <rs-table-column model-column='status' width='120' header='Status'></rs-table-column>     </rs-table>   </div>   <div class='tab-separator'/>   <div ng-show='!showManagerBar' class='manager lightgray'>     Select PoS to: <BR/>     - Change Wi-Fi Network<BR/>     - Edit Details<BR/>     - Delete<BR/>     - Restart PoS<BR/>   </div>   <div ng-show='showManagerBar' class='manager'>     <div ng-show='showposData'>       <div ng-show='!posData.registered'>         To activate your PoS, please turn it on and use the registration code:<BR/><BR/>         Registration Code<BR/>         {{posData.regCode}}         <BR/>         <BR/>         <table>           <tr>             <td><rs-phone-input label-same-line='false' ng-model='sendSMSPhone' label='Send by SMS'/></td>             <td class='column-space buttontab'><button ng-click='localCall(sendSms, posData, sendSMSPhone)' class='rs-button'>Send</button></td>           </tr>         </table>         <BR/>         <div style='text-align: center'>           <button ng-click='localCall(printCode, posData)' class='rs-button'>Print Code</button>         </div>       </div>       <div ng-show='posData.registered'>         <rs-wifi-select ng-model='wifiModel' table-options='wifiOptions' discard-changes='wifiDiscardChanges()' save-changes='localCall(saveWireless, wifiModel)'></rs-wifi-select>         <hr class='thickseparator'/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>IMEI</td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{posData.cellular.imei}}</td>           </tr>         </table>       </div>       <hr class='thickseparator'/>       <div>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Printer Name</td>             <td class='column-space buttontab'><button ng-click='localCall(editName, posData)' class='rs-button'>Edit</button></td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{posData.name}}</td>           </tr>         </table>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>in use by</td>           </tr>           <tr>             <td class='fieldgray'>{{posData.user.name}}</td>           </tr>         </table>       </div>       <hr class='thickseparator'/>     </div>     <div style='text-align: center'>       <button ng-click='localCall(restartPos, [].concat(posData))' class='rs-button'>Restart PoS</button><BR/><BR/>       <button ng-click='localCall(deletePos, [].concat(posData))' class='rs-button'>Delete PoS</button>     </div>   </div> </div></div>"}}),rockspoonUi.directive("rsPrice",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-price'>  <rs-text-edit class='price-input' ng-model='ngModel.price' label='Price $' label-same-line='false' placeholder=0.00 currency></rs-text-edit>  <rs-label class='select-label' label='Select how many items customers can order:'></rs-label>  <div class='items-container'>Enter how many items customers can order in total <input digit ng-model='ngModel.totalItems' type='text' placeholder='0' /></div>  <div class='items-container'>Enter how many items per category customers can  order <input digit ng-model='ngModel.categoryItems' type='text' placeholder='0'/></div></div>"}}),rockspoonUi.directive("rsPrinterForm",function(){return{controller:["$scope","$q","$element","PrinterDataService",function($scope,$q,$element,printerData){function loadPrinterData(){printerData.fetchStationNames().then(function(stations){$scope.stationNames=stations.slice()},function(reason){$scope.stationNames=[],console.log("cannot fetch StationNames: "+reason)}),printerData.fetchLocationNames().then(function(locations){$scope.locationNames=locations.slice()},function(reason){$scope.locationNames=[],console.log("cannot fetch LocationNames: "+reason)}),printerData.fetchPrinterTypes().then(function(types){$scope.printerTypes=types.slice()},function(reason){$scope.printerTypes=[],console.log("cannot fetch PrinterTypes: "+reason)})}$scope.printer={printerStation:void 0,printerLocation:void 0,printerType:void 0,printerName:""},loadPrinterData(),$scope.create=function(){for(var k in $scope.printer)$scope.ngModel[k]=$scope.printer[k];$scope.$emit("printer-created",$scope.printer)},$scope.cancel=function(){$scope.printer.printerStation=void 0,$scope.printer.printerLocation=void 0,$scope.printer.printerType=void 0,$scope.printer.printerName="",$scope.$emit("printer-cancel",$scope.printer)}}],replace:!0,require:["ngModel"],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-printer-form'>  <div class='rs-printer-name'>    <rs-text-edit label='Enter Printer Name' label-same-line='false' ng-model='printer.printerName'></rs-text-edit>  </div>  <div class='rs-printer-type' ng-hide='!printer.printerName'>    <rs-combo-box label='Printer Type' label-same-line='false' ng-model='printer.printerType' options='printerTypes' ng-disabled='!printer.printerName'></rs-combo-box>  </div>  <div class='rs-printer-location' ng-hide='!printer.printerName || !printer.printerType'>    <rs-combo-box label='Select Location Name' label-same-line='false' ng-model='printer.printerLocation' options='locationNames'></rs-combo-box>  </div>  <div class='rs-printer-station' ng-hide='!printer.printerName || !printer.printerType || !printer.printerLocation'>    <rs-combo-box label='Select Station Name' label-same-line='false' ng-model='printer.printerStation' options='stationNames'></rs-combo-box>  </div>  <div class='rs-printer-buttons'>    <button class='rs-button' ng-hide='!printer.printerName || !printer.printerType || !printer.printerLocation || !printer.printerStation' ng-click='create()'>Create</button>    <button class='rs-button' ng-hide='!printer.printerName' ng-click='cancel()'>Cancel</button>  </div></div>"}}),rockspoonUi.directive("rsPrinterManager",function(){return{controller:["$scope",function($scope){function updateSelectedDevice(){$scope.showManagerBar=$scope.selectedDevices.length>0,$scope.selectedDevices.length>1?($scope.showPrinterData=!1,$scope.printerData=$scope.selectedDevices):($scope.showPrinterData=!0,$scope.printerData=$scope.selectedDevices[0],void 0!==$scope.printerData&&$scope.wifiOptions.forEach(function(wifi){return wifi.name===$scope.printerData.wifi.name?($scope.wifiModel=JSON.parse(JSON.stringify(wifi)),!1):void 0}))}$scope.selectedDevices=[],$scope.showPrinterData=!1,$scope.showManagerBar=!1,$scope.printerData={},$scope.sendSMSPhone={},$scope.wifiModel={};var sorter=function(predicate,reverse){var key=function(x){return x[predicate]};return reverse=reverse?-1:1,function(a,b){return a=key(a),b=key(b),reverse*((a>b)-(b>a))}};$scope.sortBy=function(cb){$scope.ngModel.sort(sorter($scope.tableOptions.predicate,$scope.tableOptions.reverse)),setTimeout(function(){cb()},2e3)},$scope.nextPage=function(cb){setTimeout(function(){cb(!0,!1)},100)},$scope.localCall=function(){var fn=[].shift.apply(arguments);fn=fn&&"[object Function]"==Object.prototype.toString.call(fn)?fn():void 0,void 0!==fn&&fn.apply(this,arguments)},$scope.wifiDiscardChanges=function(){updateSelectedDevice()},$scope.$watchCollection("selectedDevices",updateSelectedDevice)}],replace:!0,require:["ngModel","tableOptions"],restrict:"E",scope:{ngModel:"=",tableOptions:"=",wifiOptions:"=",editName:"&",sendSms:"&",printCode:"&",editPrinter:"&",restartPrinters:"&",deletePrinters:"&",saveWireless:"&"},template:"<div novalidate class='rs-printer-manager'> <div class='holder'>   <div class='content'>     <rs-table options='tableOptions' ng-model='ngModel' style='height:500px;' next-page='nextPage(cb)' sort-by='sortBy(cb)' selected='selectedDevices'>       <rs-table-column model-column='name' header='Device Name'></rs-table-column>       <rs-table-column model-column='type' header='Type'>{{ngModel.type.label}}</rs-table-column>       <rs-table-column model-column='productionarea' header='Location'>         {{ngModel.fullLocationName}}       </rs-table-column>       <rs-table-column model-column='wifi' width='180' header='Wireless'>         {{ngModel.wifi.name}}          <div style='float: right' ng-show='ngModel.wifi.name!==\"\"'>            <i ng-class='{\"icon-icons_Lock\": ngModel.wifi.security}'></i>            <i ng-class='{\"glyphicon glyphicon-screenshot\": ngModel.wifi.passwordSaved}'></i>            <rs-connectivity-signal ng-model='ngModel.wifi.signal' type='wifi'></rs-connectivity-signal>          </div>       </rs-table-column>       <rs-table-column model-column='cellular' width='100' header='Cellular'>         {{ngModel.cellular.networkType}}         <rs-connectivity-signal ng-show='ngModel.cellular.networkType!==\"\"' ng-model='ngModel.cellular.signal' type='operator'></rs-connectivity-signal>       </rs-table-column>       <rs-table-column model-column='status' width='120' header='Status'></rs-table-column>     </rs-table>   </div>   <div class='tab-separator'/>   <div ng-show='!showManagerBar' class='manager lightgray'>     Select Devices to: <BR/>     - Change Wi-Fi Network<BR/>     - Edit Details<BR/>     - Delete<BR/>     - Restart<BR/>   </div>   <div ng-show='showManagerBar' class='manager'>     <div ng-show='showPrinterData'>       <div ng-show='printerData.status===\"unregistered\"'>         To activate your device, please turn it on and use the registration code:<BR/><BR/>         Registration Code<BR/>         {{printerData.regCode}}         <BR/>         <BR/>         <table>           <tr>             <td><rs-phone-input label-same-line='false' ng-model='sendSMSPhone' label='Send by SMS'/></td>             <td class='column-space buttontab'><button ng-click='localCall(sendSms, printerData, sendSMSPhone)' class='rs-button'>Send</button></td>           </tr>         </table>         <BR/>         <div style='text-align: center'>           <button ng-click='localCall(printCode, printerData)' class='rs-button'>Print Code</button>         </div>       </div>       <div ng-show='printerData.status!==\"unregistered\"'>         <rs-wifi-select ng-model='wifiModel' table-options='wifiOptions' discard-changes='wifiDiscardChanges()' save-changes='localCall(saveWireless, wifiModel)'></rs-wifi-select>         <hr class='thickseparator'/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>IMEI</td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{printerData.cellular.imei}}</td>           </tr>         </table>       </div>       <hr class='thickseparator'/>       <div>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Device Name</td>             <td class='column-space buttontab'><button ng-click='localCall(editName, printerData)' class='rs-button'>Edit</button></td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{printerData.name}}</td>           </tr>         </table>         <hr class='separator'/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Device Type</td>             <td class='column-space buttontab'><button ng-click='localCall(editPrinter, printerData)' class='rs-button'>Edit</button></td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{printerData.type.label}}</td>           </tr>         </table>         <BR/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Location</td>           </tr>           <tr>             <td class='fieldgray'>{{printerData.fullLocationName}}</td>           </tr>         </table>         <BR ng-show='printerData.stations.length > 0'/>         <table ng-show='printerData.stations.length > 0'>           <tr>             <td class='fieldlabel' style='width: 200px'>Station Name</td>           </tr>           <tr ng-repeat='model in printerData.stations'>             <td class='fieldgray'>{{model.name}}</td>           </tr>         </table>       </div>       <hr class='thickseparator'/>     </div>     <div style='text-align: center'>       <button ng-click='localCall(restartPrinters, [].concat(printerData))' class='rs-button'>Restart</button><BR/><BR/>       <button ng-click='localCall(deletePrinters, [].concat(printerData))' class='rs-button'>Delete</button>     </div>   </div> </div></div>"}}),rockspoonUi.directive("rsMultiStation",function(){return{controller:["$scope",function($scope){$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show}),$scope.opts={rowFactory:function(){return{name:"",substations:[]}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-station'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-section title='Station Name' ng-repeat='model in internalModel'>      <rs-remove-button>        <rs-text-edit placeholder='Add name' mandatory='!model.$isNew' on-change='changed(model)' ng-model='model.name' index='$index + 1'></rs-text-edit>        <rs-multi-substation ng-if='!$last' ng-model='model.substations'></rs-multi-substation>      </rs-remove-button>    </rs-section>  </rs-multi-line>  <div ng-show='form.$dirty || showValidationErrors'>    <div ng-form='form' class='rs-station-error'>      <input type='text' ng-required='ngModel.length === 0' ng-model='$$dummy' ng-show='false'/>      <div ng-messages='form.$error' class='rs-validation-error'>        <ng-message when='required'>You must have at least one station</ng-message>      </div>    </div>  </div></div>"}}),rockspoonUi.directive("rsMultiProductionArea",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:"",stations:[]}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-production-area'> <rs-multi-line ng-model='ngModel' ng-opts='opts'>   <rs-section title='Location Name' separator='!$last' mandatory='true' ng-repeat='model in internalModel' ng-class='{lightgray: model.$isNew && !$first}'>     <rs-remove-button>       <rs-text-edit placeholder='Add name' on-change='changed(model)' ng-model='model.name'></rs-text-edit>       <rs-multi-station ng-model='model.stations' ng-if='!$last'></rs-multi-station>     </rs-remove-button>   </rs-section> </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiSubstation",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:""}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-substation'>  <rs-section title='Sub-station Name'>    <rs-multi-line ng-model='ngModel' ng-opts='opts'>      <rs-remove-button ng-repeat='model in internalModel' class='rs-margin-bottom'>        <rs-text-edit placeholder='Add name' on-change='changed(model)' ng-model='model.name' index='$index + 1'></rs-text-edit>      </rs-remove-button>    </rs-multi-line>  </rs-section></div>"}}),rockspoonUi.directive("rsRadioButton",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id,scope.changed=function(model){setTimeout(function(){scope.$apply(function(){scope.onChange()})},0)}},controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",replace:!0,require:"ngModel",scope:{label:"@",value:"=",ngModel:"=",ngDisabled:"@",onChange:"&"},template:"<div class='rs-radio-button'>  <span>    <input id='rdb[{{::id}}_{{::uid}}]' type='radio' ng-value='value' ng-model='ngModel' ng-disabled='ngDisabled' ng-change='changed()'/>    <label for='rdb[{{::id}}_{{::uid}}]'>{{::label}}</label>  </span></div>"}}),rockspoonUi.directive("rsReadOnly",function(){return{restrict:"A",link:function(scope,elem,attrs){"true"==attrs.rsReadOnly&&(elem.find("input").attr("readonly",!0),elem.find("textarea").attr("readonly",!0),elem.find("select").attr("disabled",!0))}}}),rockspoonUi.directive("rsRemoveButton",function(){return{replace:!0,restrict:"E",scope:!1,transclude:!0,template:"<table class='rs-remove-button' ng-class='{lightgray:model.$isNew && !$first}'>  <tr>    <td class='remove-button'>      <div ng-if='!$last' ng-click='remove(model)'>        <i class='icon-icons_Delete'></i>      </div>    </td>    <td class='rs-margin-left-remove'>      <div ng-transclude></div>    </td>  </tr></table>"}}),rockspoonUi.directive("rsRolesCreationView",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",selected:"=",currentStep:"="},template:"<div class='rs-roles-creation-view'>  <rs-section>    <rs-tabs current-step='currentStep' selected='selected'>      <rs-tab title='General Information' mandatory='true'>         <rs-section>           <rs-title-description ng-model='ngModel' type='Role'></rs-title-description>         </rs-section>      </rs-tab>      <rs-tab title='Access Rights'>        <rs-section title='Grant user access to' style='font-weight: normal'>          <rs-access-control ng-model='ngModel.accessRights'></rs-access-control>        </rs-section>      </rs-tab>  </rs-section></div>"}}),rockspoonUi.directive("rsRolesView",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",listWidth:"=",onClick:"=",selected:"="},template:"<div class='rs-roles-view' >  <div class='rs-list' style='width: {{listWidth}}px' ng-if='ngModel.length > 0'>    <rs-generic-list ng-model='ngModel' selected='selected' ng-if='ngModel.length > 0' ng-click='onClick(selected.roleId)'>      <div class='rs-role'>        {{item.title}}      </div>    </rs-generic-list>  </div>  <div class='rs-details' ng-transclude></div></div>",transclude:!0}}),rockspoonUi.directive("rsRoutingSettings",function(){return{controller:["$scope","$stateParams","FetchProductionArea",function($scope,sp,f){$scope.pOptions=[],$scope.sOptions=[];var areas={},done=!1,checkProductionArea=function(){if($scope.ngModel)if($scope.sOptions.length=0,areas.stations&&areas.stations[$scope.ngModel.productionArea]){var found=!1;_.forEach(areas.stations[$scope.ngModel.productionArea],function(station){$scope.sOptions.push(station),station.value===$scope.ngModel.station&&(found=!0)}),found||($scope.ngModel.station="")}else done&&$scope.ngModel&&$scope.ngModel.station&&($scope.ngModel.station="")};f.fetch(sp.venueId).then(function(a){areas=a,$scope.pOptions.length=0,$scope.sOptions.length=0,_.forEach(areas.productionAreas,function(area){$scope.pOptions.push(area)}),done=!0,checkProductionArea()}),$scope.$watchCollection("ngModel.productionArea",checkProductionArea)}],restrict:"E",replace:!0,require:"?ngModel",scope:{ngModel:"="},template:"<div class='rs-routing-settings'>  <table width='400px'>    <tr>      <td width='50%'>        <rs-combo-box options='pOptions' label='Production Area' ng-model='ngModel.productionArea' on-change='$parent.changed(ngModel)'></rs-combo-box>      </td>      <td width='50%' class='rs-margin-left'>        <rs-combo-box options='sOptions' on-change='$parent.changed(ngModel)' label='Station' ng-model='ngModel.station'></rs-combo-box>      </td>    </tr>  </table></div>"}}).directive("rsMultiRoutingSettings",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{productionArea:null,station:null}}}}],restrict:"E",replace:!0,require:"?ngModel",scope:{ngModel:"="},template:"<div class='rs-multi-routing-settings'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat='model in internalModel'>      <rs-routing-settings ng-model='model'></rs-routing-settings>    </rs-remove-button>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsSalesInfo",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"=",availableSalesOptions:"=",dinein:"@"},template:"<div class='rs-sales-info'>  <rs-section>    <table>      <tr>        <td>          <rs-text-edit mandatory='true' class='rs-sales-tax' label='Sales Tax' label-same-line='true' ng-model='ngModel.salesTax' percentage></rs-text-edit>        </td>        <td class='rs-margin-left'>          %        </td>      </tr>    </table>  </rs-section>  <rs-section>    <rs-check-box-list title='Available Sales Options' min-required='1' ng-model='availableSalesOptions'></rs-check-box-list>  </rs-section>  <rs-section title='Dine-in' separator='true' ng-if='dinein'>    <rs-check-box id='sales_tax{::uid}}' ng-model='ngModel.isMandatoryGratuity' label='Mandatory Gratuity'></rs-check-box>    <table ng-if='ngModel.isMandatoryGratuity' class='rs-gratuity'>      <tr>        <td>          <rs-text-edit ng-model='ngModel.mandatoryGratuityPercentage' percentage></rs-text-edit>        </td>        <td class='rs-margin-left'>          <rs-text-edit ng-model='ngModel.mandatoryGratuityLargerThan' label='% Mandatory Gratuity will be paid for party larger than' label-same-line='true' digit></rs-text-edit>        </td>      </tr>    </table>  </rs-section></div>"}}),rockspoonUi.directive("rsSection",function(){return{replace:!0,restrict:"E",scope:{mandatory:"=",separator:"=",title:"@",subtitle:"@"},template:"<div class='rs-section'>  <div class='title'>    {{::title}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i>    <label ng-if='subtitle' class='subtitle'>{{::subtitle}}</label>   </div>  <div ng-transclude></div>  <hr class='separator' ng-if='separator === true'/></div>",transclude:!0}}),rockspoonUi.directive("rsSettingsPricesListView",function(){return{controller:["$scope",function($scope){$scope.search=function(value){return null===value?$scope.ngModel:_.filter($scope.ngModel,function(item){var searchText=value.toLowerCase(),itemText=item.name.toLowerCase();return itemText.indexOf(searchText)>=0})}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",selected:"="},template:"<div class='rs-settings-prices-list-view'>  <div class='rs-settings-prices-list'>    <rs-generic-list ng-model='ngModel' selected='selected' fetch='search(value)' is-searchable='true'>      <div class='rs-settings-prices'>        <div class='rs-details'>          <div>{{item.name}}</div>          <div>created at {{item.created | date:'MM/dd/yyyy h:mma'}}</div>        </div>      </div>    </rs-generic-list>  </div></div>",transclude:!0}}),rockspoonUi.directive("rsSizePrice",function(){return{link:function($scope,elm,attrs){$scope.id=attrs.id,$scope.singlePrice=[{size:"single",price:null}],$scope.multiPrice=[];var auto=!0,updateModel=function(){auto=!1;var m=$scope.isSingleSize?$scope.singlePrice:$scope.multiPrice;_.isEqual(m,$scope.ngModel)||($scope.ngModel.length=0,_.forEach(m,function(price){$scope.ngModel.push(price)}))};$scope.$watch(function(){return $scope.ngModel},function(){if(auto){var m=$scope.isSingleSize?$scope.singlePrice:$scope.multiPrice;m.length=0,_.forEach($scope.ngModel,function(price){m.push(price)})}auto=!0},!0),$scope.$watch(function(){return $scope.singlePrice},updateModel,!0),$scope.$watch(function(){return $scope.multiPrice},updateModel,!0),$scope.$watchCollection("isSingleSize",updateModel)},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",isSingleSize:"=",showInfo:"="},template:"<div class='rs-size-price'>  <rs-on-off on='Single Size' off='Multiple Sizes' ng-model='isSingleSize'></rs-on-off>  <div class='rs-price-container' ng-class='{\"hide-border\": !showInfo}'>    <div class='rs-price-title' ng-if='showInfo'>Price must be re-entered for the item</div>    <rs-multi-size-price-text-edit ng-model='multiPrice' ng-if='!isSingleSize'></rs-multi-size-price-text-edit>    <div class='rs-size-price-text-edit' ng-if='isSingleSize'>      <table>        <thead>          <tr>            <td>            </td>            <td>              <rs-label>Price</rs-label>            </td>          </tr>        </thead>        <tbody          <tr>            <td width='30'>              &nbsp;            </td>            <td width='100'>              <rs-text-edit currency mandatory='true' ng-model='singlePrice[0].price' placeholder='0.00'></rs-text-edit>            </td>          </tr>        </tbody>      </table>    </div>  </div></div>"}}).directive("rsMultiSizePriceTextEdit",function(){return{controller:["$scope","UID",function($scope,UID){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{size:"",price:null}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-size-price-text-edit'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table width='100%'>      <thead>        <tr>          <td width='20px'>            &nbsp;          </td>          <td class='rs-margin-left'>            <rs-label>Size</rs-label>          </td>          <td class='rs-margin-left' width='100px'>            <rs-label>Price</rs-label>          </td>          <td>          </td>        </tr>      </thead>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>          <td colspan='3'>            <rs-remove-button ng-model='model'>              <table ng-class='{\"rs-margin-bottom\":!$last}' width='100%'>                <tr>                  <td>                    <rs-text-edit mandatory='!$last' ng-model='model.size' placeholder='Add Size' on-change='changed(model)' index='$index + 1'></rs-text-edit>                  </td>                  <td class='rs-margin-left' width='100px'>                    <rs-text-edit ng-model='model.price' mandatory='!$last' placeholder='0.00' currency on-change='changed(model)'></rs-text-edit>                  </td>                </tr>              </table>            </rs-remove-button>          </td>          <td class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>      </tbody>    </table>  </rs-multi-line></div>"
}}),rockspoonUi.directive("rsHttpPrefix",function(){return{link:function(scope,elm,attrs,ctrl){function ensureHttpPrefix(value){return value&&!/^(https?):\/\//i.test(value)&&-1==="http://".indexOf(value)&&-1==="https://".indexOf(value)?(ctrl.$setViewValue("http://"+value),ctrl.$render(),"http://"+value):value}ctrl.$formatters.push(ensureHttpPrefix),ctrl.$parsers.push(ensureHttpPrefix)},require:"ngModel",restrict:"A"}}).directive("rsSocialTextEdit",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)},$scope.socialType=[{label:"Website",value:"Website"},{label:"Facebook",value:"Facebook"},{label:"Twitter",value:"Twitter"}]}],link:function(scope,elm,attrs){scope.$on("kickOffValidations",function(event,args){scope.showValidationErrors=args.show})},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",mandatory:"=",last:"="},template:"<table ng-form='form' class='rs-social-text-edit' ng-class='{\"rs-margin-bottom\":!last}'>  <tr>    <td>      <rs-combo-box mandatory='mandatory' ng-model='ngModel.type' options='socialType' on-change='changed()'></rs-combo-box>    </td>    <td class='social-field'>      <input type='text' ng-required='mandatory' rs-http-prefix placeholder='Add URL' ng-model='ngModel.url' ng-change='changed()' />      <div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'>        <ng-message when='required'>This field is required.</ng-message>      </div>    </td>  </tr></table>"}}).directive("rsMultiSocialTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{url:null,type:"Website"}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"="},template:"<div class='rs-multi-social-text-edit'>  <rs-label label='{{::label}}'></rs-label>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat='model in internalModel'>      <rs-social-text-edit last='$last' ng-model='model'></rs-social-text-edit>    </rs-remove-button>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsSpinBox",["$compile",function($compile){return{controller:["$scope",function($scope){$scope.incrementNumber=function(){++$scope.ngModel},$scope.decrementNumber=function(){--$scope.ngModel}}],link:function(scope,elm){var d,paddingClass="";(null===scope.ngModel||void 0===scope.ngModel)&&(scope.ngModel=0),null!==scope.label&&void 0!==scope.label&&""!==scope.label&&(paddingClass="label-space"),d=void 0!==scope.labelSameLine&&scope.labelSameLine!==!0?$compile("<div style='display:table-row'><div class='text-label' style='display:table-cell'><label class='"+paddingClass+"' style='text-align:right'>{{::label}}</label></div></div><div style='display:table-row'><div class='text-field' style='width:100%;display:table-cell'><table><tr class='text-center'><td><a ng-click='incrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowUp'></span></a></td></tr><tr class='text-center'><td><input type='text' ng-model='ngModel' class='text-center' ng-readonly='true' maxlength='2' readonly='readonly'></td></tr><tr class='text-center'><td><a ng-click='decrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowDown'></span></a></td></tr></table></div></div>")(scope):$compile("<div class='text-label' style='display:table-cell'><label class='"+paddingClass+"' style='text-align:right'>{{::label}}</label></div><div class='text-field' style='width:100%;display:table-cell'><table><tr class='text-center'><td><a ng-click='incrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowUp'></span></a></td></tr><tr class='text-center'><td><input type='text' ng-model='ngModel' class='text-center' ng-readonly='true' maxlength='2' readonly='readonly'></td></tr><tr class='text-center'><td><a ng-click='decrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowDown'></span></a></td></tr></table></div>")(scope),elm.append(d)},replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",labelSameLine:"=",ngModel:"="},template:"<div class='rs-spin-box'></div>"}}]),rockspoonUi.directive("rsSpinner",function(){return{replace:!0,restrict:"E",template:"<div class='rs-spinner'>  <div></div>  <div></div>  <div></div></div>"}}).directive("rsSpinnerOverlay",function(){return{replace:!0,restrict:"E",template:"<div class='rs-spinner-overlay'>  <div class='overlay'></div>  <div class='content'>    <div class='pos'>      <rs-spinner></rs-spinner>    </div>  </div></div>"}}),rockspoonUi.directive("rsSubstitution",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id},replace:!0,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<div class='rs-substitution'>  <rs-label label='Optional'></rs-label>  <rs-multi-substitution ng-model='ngModel' item-list='itemList'></rs-multi-substitution></div>"}}).directive("rsMultiSubstitution",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){return{name:"",substitutions:[]}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts'>  <table class='rs-main-table'>    <tr ng-repeat-start='model in internalModel' ng-class='{lightgray: model.$isNew && !$first}'>      <td width='30'>        <div class='remove-button'>          <div ng-if='!$last' ng-click='remove(model)'>            <i class='icon-icons_Delete'></i>          </div>        </div>      </td>      <td>        <div class='rs-substitution-container'>          <input type='text' style='padding-right: 20px' placeholder='Add Item' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' ng-change='changed(model)' ng-model='model.name' />          <div class='line-number'>            <div class='number'>{{$index + 1}}</div>          </div>          <div class='database-icon'>            <i class='icon-icons_Database'></i>          </div>        </div>      </td>      <td class='rs-substitution-not-available-header'><div ng-if='$first'>Substitution not available</div></td>      <td class='rs-handler'>&nbsp;</td>    </tr>    <tr ng-repeat-end ng-if='!$last'>      <td colspan='4'><rs-multi-substitution-choice item-list='ngOpts.itemList' ng-model='model.substitutions'></rs-multi-substitution-choice></td>    </tr>  </table></rs-multi-line>"}}).directive("rsMultiSubstitutionChoice",function(){return{controller:["$scope","UID",function($scope,UID){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){var tmp=moment(),from=moment.utc([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),to=from.clone();return{isNotAvailable:!1,name:"",preparationTime:new Date(0,0,0,0,0,0),notAvailable:{from:from,to:to},$uid:UID.create()}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<rs-multi-line class='rs-substitution-choice' ng-model='ngModel' ng-opts='opts'>  <div style='padding-left:30px; width: 100%'>    <table class='rs-substitution-choice-table'>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last, lightgray: model.$isNew && !$first}'>          <td width='30' style='vertical-align:top;' ng-class='{selected: model.isNotAvailable}'>            <div class='remove-button'>              <div ng-if='!$last' ng-click='remove(model)'>                <i class='icon-icons_Delete'></i>              </div>            </div>          </td>          <td width='30' class='rs-with' ng-class='{selected: model.isNotAvailable}' ng-if='$first'>With</td>          <td width='30' class='rs-with' ng-class='{selected: model.isNotAvailable}' ng-if='!$first'>or</td>          <td ng-class='{selected: model.isNotAvailable}'>            <table class='rs-substitution-table' ng-class='{selected: model.isNotAvailable}'>              <tr>                <td colspan='2'>                  <div class='rs-substitution-container'>                    <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Substitute' ng-change='changed(model)' ng-model='model.name' />                    <div class='database-icon substitute'>                      <i class='icon-icons_Database'></i>                    </div>                  </div>                </td>                <td class='rs-substitution-not-available-check'>                  <rs-check-box id='rs-substitution_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>                </td>              </tr>              <tr>                <td align='right'>                  Preparation time                </td>                <td align='right' style='width:100px'>                  <rs-time ng-model='model.preparationTime' on-change='changed(model)' time-options='{ show24Hours: true }'></rs-time>                </td>                <td class='rs-substitution-not-available-check'>                  &nbsp;                </td>              </tr>              <tr ng-if='model.isNotAvailable'>                <td class='not-available' colspan='3' ng-if='model.isNotAvailable'>                  <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>                </td>              </tr>            </table>          </td>          <td ng-class='{selected: model.isNotAvailable}' class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>           </div>         </td>        </tr>      </tbody>    </table>  </div></rs-multi-line>"}}),rockspoonUi.directive("rsTabs",[function(){return{controller:["$scope",function($scope){var tabs=[],self=this;this.showSteps=$scope.showSteps,this.selected=$scope.selected=0,this.addTab=function(tabCtrl){tabs.push(tabCtrl),tabCtrl.added(tabs.length-1,self.barContainer)},this.clicked=function(idx){$scope.selected=idx,$scope.allowBack===!0&&($scope.currentStep=idx+1)},this.notifyClick=function(idx){var forward=self.selected<=idx;_.forEach(tabs,function(tab,i){tab.selected(idx,forward)}),self.selected=idx};var step=1;this.updateStep=function(currentStep){step>currentStep&&($scope.selected=currentStep-1,_.forEach(tabs,function(tab){tab.updateStep(currentStep)}))},this.nextStep=function(){return step++}}],link:function($scope,element,attr,ctrl,transclude){ctrl.barContainer=element.find(".rs-tab-bar"),ctrl.contentContainer=element.find(".rs-content"),transclude($scope.$parent,function(clone){ctrl.contentContainer.append(clone)}),$scope.$watch("selected",function(){ctrl.notifyClick(parseInt($scope.selected)||0)}),$scope.$watch("currentStep",function(){ctrl.updateStep($scope.currentStep)})},replace:!0,require:"rsTabs",restrict:"E",scope:{selected:"=",currentStep:"=",showSteps:"=",allowBack:"="},template:"<div class='rs-tabs'><div class='rs-tab-bar'></div><div class='rs-content'></div></div>",transclude:!0}}]).directive("rsTab",["$compile",function($compile){return{controller:["$scope","$element",function($scope,$element){var self=this,button=angular.element("<div class='rs-tab-button' ng-class='{selected:selected, mandatory : (mandatory === true && currentStep <= step ) }' ng-click='click()'><div class='rs-step' ng-if='step && showStep'>Step {{step}}</div><div ng-if='!step'>&nbsp;</div><div class='title'>{{title}}</div></div>");this.added=function(idx,barContainer){button=$compile(button)($scope),barContainer.append($compile(button)($scope)),self.idx=idx},this.selected=function(idx,forward){forward?$element.addClass("forward"):$element.removeClass("forward"),$scope.selected=idx==self.idx},this.updateStep=function(currentStep){$scope.currentStep=currentStep,!$scope.step||$scope.step<=$scope.currentStep?button.removeClass("disabled"):button.addClass("disabled")}}],link:function($scope,element,attr,ctrls,transclude){var tabsCtrl=ctrls[0],ctrl=ctrls[1];ctrl.scope=$scope,$scope.showStep=tabsCtrl.showSteps,""===attr.step&&($scope.step=tabsCtrl.nextStep()),$scope.click=function(){(null===$scope.step||void 0===$scope.step||$scope.step<=$scope.currentStep)&&tabsCtrl.clicked(ctrl.idx)},tabsCtrl.addTab(ctrl),transclude($scope.$parent,function(clone){element.append(clone)})},replace:!0,require:["^rsTabs","rsTab"],restrict:"E",scope:{mandatory:"=",title:"@"},template:"<div class='rs-tab' ng-hide='!selected'></div>",transclude:!0}}]),rockspoonUi.directive("rsTable",function(){return{controller:["$scope",function($scope){$scope.busy=!1,$scope.columns=[],this.addColumn=function(column){$scope.columns.push(column)},this.loadMore=function(callback){var cb=function(){$scope.busy=!1,$scope.$apply(),callback()};$scope.busy||($scope.busy=!0,$scope.nextPage({cb:cb}))},this.scrollDistance=function(){return $scope.options.scrollDistance?30*$scope.options.scrollDistance:0},$scope.filterSelected=function(){$scope.selected=_.filter($scope.ngModel,function(item){return item.selected===!0}),$scope.selected.length===$scope.ngModel.length&&($scope.selectedAll=!0)},$scope.checkAll=function(){$scope.selectedAll=!$scope.selectedAll,angular.forEach($scope.ngModel,function(item){item.selected=$scope.selectedAll}),$scope.filterSelected()},$scope.sort=function(key){var cb=function(){$scope.busy=!1,$scope.$broadcast("sort")};$scope.busy||($scope.busy=!0,$scope.options.predicate=key,$scope.options.reverse=!$scope.options.reverse,$scope.sortBy({cb:cb}))}}],replace:!0,require:"ngModel",restrict:"E",scope:{nextPage:"&",ngModel:"=",selected:"=",options:"=",sortBy:"&"},template:"<div class='rs-table'><ng-transclude style='display: none;'></ng-transclude><div class='rs-table-container'><div class='rs-loading' ng-show='options.showSpinner && busy'><div class='rs-spinner'><div></div><div></div><div></div></div></div><div class='rs-table-header'>  <div class='rs-table-column' style='width:30px'>    <rs-check-box ng-model='selectedAll' ng-click='checkAll()'></rs-check-box>  </div><div class='rs-table-column' ng-repeat='column in columns' ng-style='{ \"width\" : column.width + \"px\" }' ng-class='{ \"rs-last-column\": $last, \"rs-flex\": !column.width, \"rs-sortable\": column.sortable, \"sort-asc\": options.predicate === column.key && !options.reverse, \"sort-desc\": options.predicate === column.key && options.reverse }'><div ng-if='column.sortable' ng-click='sort(column.key)'>{{::column.title}}</div><div ng-if='!column.sortable'>{{::column.title}}</div></div></div><div class='rs-table-body' rs-viewport><rs-table-control columns='columns' ng-model='ngModel' selected='selected'></rs-table-control></div></div></div>",transclude:!0}}).directive("rsTableControl",["$compile",function($compile){function calculateHeight(models){return null!==models&&void 0!==models&&models.length?30*models.length:0}function createRowTemplate($element){var row={};if(!row.template){var template=angular.element("<rs-table-row></rs-table-row>");$element.append(template),row={height:template.height(),template:template,cache:[]},template.remove()}return row}return{controller:["$scope","$element",function($scope,$element){var self=this;$scope.busy=!1;var parentController,scrollDistance=0;$scope.filterSelected=function(){$scope.$parent.filterSelected()},this.setParent=function(parent){parentController=parent,scrollDistance=parentController.scrollDistance()},this.loadMore=function(){var cb=function(){$element.height(calculateHeight($scope.ngModel))};parentController.loadMore(cb)};var templates=createRowTemplate($element,$scope.ngModel);$element.height(calculateHeight($scope.ngModel)),this.update=function(){var port={top:self.viewport.scrollTop(),bottom:self.viewport.scrollTop()+self.viewport.outerHeight()};port.bottom>=$element.height()-scrollDistance&&this.loadMore();var bounds={top:0,bottom:0};_.forEach($element.children(),function(entry){null!==$(entry).scope&&void 0!==$(entry).scope&&$(entry).is(":visible")&&($(entry).hide(),templates.cache.push($(entry)))});for(var i=0;i<$scope.ngModel.length&&!(bounds.top>=port.bottom);++i){var model=$scope.ngModel[i];if(bounds.bottom+=30,!(bounds.top<=port.top&&bounds.bottom<=port.top)){var entry,cache=templates.cache;if(cache.length)entry=cache.pop(),entry.scope().ngModel=model,entry.scope().columns=$scope.columns;else{entry=templates.template.clone(),$element.append(entry);var scope=$scope.$new();scope.ngModel=model,scope.columns=$scope.columns,$compile(entry)(scope,void 0,{transcludeControllers:self})}entry.css({top:bounds.top+"px"}),entry.show()}bounds.top=bounds.bottom}},this.onUpdate=function(){$scope.$apply(function(){self.update()})}}],link:function($scope,element,attr,ctrls){var ctrl=ctrls[1],parentController=ctrls[2];ctrl.setParent(parentController),ctrl.viewport=ctrls[0].viewport,ctrl.viewport.css({"overflow-y":"auto",display:"block"}),ctrl.viewport.bind("scroll",ctrl.onUpdate),$(window).resize(ctrl.onUpdate),$scope.$on("sort",function(){ctrl.onUpdate()}),$scope.$on("$destroy",function(){$(window).off("resize"),ctrl.viewport.unbind("scroll")}),$scope.$watch(function(){return $scope.ngModel},function(){ctrl.update()},!0)},replace:!0,require:["?^rsViewport","rsTableControl","^rsTable"],restrict:"E",scope:{columns:"=",ngModel:"=",selected:"="},template:"<div class='rs-table-control'></div>"}}]).directive("rsTableRow",function(){return{controller:["$scope",function($scope){$scope.onSelect=function(){$scope.ngModel.selected=!$scope.ngModel.selected,$scope.filterSelected()}}],replace:!0,restrict:"E",template:"<div class='rs-table-row' ng-class='{\"rs-selected-table-row\": ngModel.selected}' ng-click='onSelect()'>  <div class='rs-table-column' style='width:30px'>    <rs-check-box ng-model='ngModel.selected'></rs-check-box>  </div>  <div class='rs-table-column test' ng-repeat='column in columns' ng-class='{ \"rs-flex\": !column.width }' ng-style='{ \"width\" : column.width + \"px\" }'>    <span ng-if='!column.template'>{{ngModel[column.key]}}</span>    <div ng-if='column.template' bind-html-compile='column.template'></div>  </div></div>"}}).directive("rsTableColumn",["$sce",function($sce){return{transclude:!0,link:function(scope,element,attrs,rsTable,transclude){var col={};col.key=scope.modelColumn,col.title=scope.header?scope.header:scope.modelColumn.charAt(0).toUpperCase()+scope.modelColumn.slice(1),scope.sortable&&(col.sortable=scope.sortable),scope.width&&(col.width=scope.width),transclude(function(clone,scope){if(clone.length>0){for(var template="",i=0;i<clone.length;++i)clone[i].outerHTML&&(template+=clone[i].outerHTML);col.template=$sce.trustAsHtml(template)}}),rsTable.addColumn(col)},replace:!0,require:"^rsTable",restrict:"E",scope:{header:"@",modelColumn:"@",sortable:"@",width:"@"}}}]),rockspoonUi.directive("rsTags",[function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{tag:null}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",tagsList:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-tags'>  <label class='rs-tag' for='rs-tag-input-{{$index}}' ng-repeat='tag in internalModel'>    <a ng-click='remove(tag)' ng-if='!$last'>      <i class='icon-icons_Delete'></i>    </a>    <input class='rs-tag-input' type='text'            ng-change='changed(tag)' ng-model='tag.tag'            placeholder='Add Tag'            typeahead='tag as tag.tag for tag in $parent.$parent.tagsList | filter: $viewValue'            name='rs-tag-input-{{$index}}' />  </label></div>"}}]).directive("rsSuggestedTags",[function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{tag:null}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",tagsList:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-tags'>  <label class='rs-tag' for='rs-tag-input-{{$index}}' ng-repeat='tag in internalModel' ng-if='!$last'>    <a ng-click='remove(tag)' ng-if='!$last'>      <i class='icon-icons_Delete'></i>    </a>    <input class='rs-tag-input' type='text'            ng-change='changed(tag)' ng-model='tag.tag'            placeholder='Add Tag'            typeahead='tag as tag.tag for tag in $parent.$parent.tagsList | filter: $viewValue'            name='rs-tag-input-{{$index}}' disabled='disabled'/>  </label></div>"}}]),rockspoonUi.directive("rsTakeoutInfo",function(){return{restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"="},template:"<div class='rs-takeout-info'>  <rs-section title='Takeout'>    <rs-section title='Takeout Time Estimate' mandatory='true'>      <rs-estimated-time type='Takeout' ng-model='ngModel.estimatedTime'></rs-estimated-time>    </rs-section>    <rs-section title='Person in charge Takeout'>      <rs-person-in-charge ng-model='ngModel.personInCharge'></rs-person-in-charge>    </rs-section>  </rs-section></div>"}}),rockspoonUi.directive("rsTempClosure",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-temp-closure'>  <rs-label ng-if='ngModel.tempClosedTime.from == null' label='This restaurant is currently operating under normal scheduled business hours (including holidays)'></rs-label>  <rs-label ng-if='ngModel.tempClosedTime.from == null' class='no-additional-label' label='No additional closures are scheduled'></rs-label>  <rs-date-range temporary-closure='true' label-from='From' label-to='To' ng-model='ngModel.tempClosedTime' label-same-line='true'></rs-date-range>  <rs-label ng-if='ngModel.tempClosedTime.from != null' label='Reason'></rs-label>  <textarea ng-if='ngModel.tempClosedTime.from != null' ng-model='ngModel.reason'></textarea></div>"}}),rockspoonUi.directive("currency",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^((\-|\+)|(\-|\+)?(\d{1,6})(\.\d{0,2})?)$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("digit",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^[\d]*$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("decimal",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^[\d]*(\.[\d]*)?$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("percentage",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^\d{0,2}(\.\d{0,2})?$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)||"100"===inputValue?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("rsTextEdit",["$compile",function($compile){return{compile:function(elm,attrs){return elm.find("input").each(function(idx,input){input=$(input),_.forEach(["currency","digit","decimal","percentage"],function(type){attrs.hasOwnProperty(type)&&input.attr(type,"")}),attrs.hasOwnProperty("compare")||input.removeAttr("match")}),{post:function(scope,elm,attrs){$compile(elm)(scope)}}},controller:["$scope","UID",function($scope,UID){$scope.showValidationErrors=!1,$scope.uid=UID.create(),$scope.$watchCollection("password",function(){$scope.inputType=$scope.password?"password":"text"}),$scope.focus=function(model){setTimeout(function(){$scope.$apply(function(){$scope.onFocus()})},0)},$scope.changed=function(model){setTimeout(function(){$scope.$apply(function(){$scope.onChange()})},0)},$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show})}],replace:!0,require:"?ngModel",restrict:"E",scope:{label:"@",index:"=",password:"=",labelSameLine:"=",mandatory:"=",ngModel:"=",onChange:"&",compare:"=",placeholder:"@",maxLength:"=",minLength:"=",pattern:"@",database:"=",onFocus:"&"},template:"<div ng-form='form' class='rs-text-edit'>  <rs-label-field ng-if='!index'>    <input ng-focus='focus()' ng-readonly='database' ng-class='{ database: database }' ng-pattern='pattern' ng-maxlength='maxLength || 999' ng-minlength='minLength || 0' match='compare' ng-model-options='{allowInvalid:true}' name='field_{{::uid}}' type='{{inputType}}' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='changed()' ng-required='mandatory'/>  </rs-label-field>  <rs-label-field ng-if='index'>    <div class='rs-text-index'>      <input ng-focus='focus()' ng-readonly='database' ng-class='{ database: database }' ng-pattern='pattern' ng-maxlength='maxLength || 999' ng-minlength='minLength || 0' match='compare' ng-model-options='{allowInvalid:true}' name='field_{{::uid}}' type='{{inputType}}' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='changed()' ng-required='mandatory'/>      <div class='line-number'>        <div class='number'>{{index}}</div>      </div>    </div>  </rs-label-field></div>"}}]).directive("rsTextArea",function(){return{controller:["$scope","UID",function($scope,UID){$scope.showValidationErrors=!1,$scope.uid=UID.create(),$scope.$watchCollection("password",function(){$scope.inputType=$scope.password?"password":"text"}),$scope.changed=function(model){setTimeout(function(){$scope.$apply(function(){$scope.onChange()})},0)},$scope.$on("kickOffValidations",function(event,args){$scope.showValidationErrors=args.show})}],replace:!0,require:"?ngModel",restrict:"E",scope:{label:"@",labelSameLine:"=",mandatory:"=",ngModel:"=",onChange:"&",placeholder:"@"},template:"<div ng-form='form' class='rs-text-area'>  <rs-label-field ng-if='true'>    <textarea name='field_{{::uid}}' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='changed()' ng-required='mandatory'/>  </rs-label-field></div>"}}),rockspoonUi.directive("rsTimeEntry",["$filter","$parse",function($filter,$parse){return{restrict:"A",require:"?^ngModel",scope:{timeOptions:"="},link:function(scope,element,attrs,ngModel){function checkMinMaxValid(){null!==minDate&&ngModel.$modelValue<minDate?ngModel.$setValidity("time-min",!1):null!==minDate&&ngModel.$setValidity("time-min",!0),null!==maxDate&&ngModel.$modelValue>maxDate?ngModel.$setValidity("time-max",!1):null!==maxDate&&ngModel.$setValidity("time-max",!0)}function doFocus(){var input=element.nodeName&&"input"===element.nodeName.toLowerCase()?element:this;lastInput!==input&&(focused=!0,lastInput=input,blurredInput=null,parseTime(),setTimeout(function(){showField()},10))}function doBlur(){blurredInput=lastInput,lastInput=null}function doClick(event){var input=event.target,prevField=selectedField;focused||(selectedField=getSelection(input,event)),prevField!==selectedField&&(lastChr=""),parseTime(),setTimeout(function(){showField()},10),focused=!1}function doKeyDown(event){if(event.keyCode>=48)return!0;switch(event.keyCode){case 9:return changeField(1,!0);case 37:changeField(-1,!1);break;case 38:adjustField(1);break;case 39:changeField(1,!1);break;case 40:adjustField(-1);break;case 8:lastChr="";break;default:return!0}return!1}function parseTime(){var currentTime=extractTime();currentTime&&(selectedHour=currentTime[0],selectedMinute=currentTime[1]),meridianField=scope.timeOptions.show24Hours?-1:2,lastChr=""}function extractTime(value){value=value||element.val();var currentTime=value.split(settings.separator);if(currentTime.length>=2){var isAM=!scope.timeOptions.show24Hours&&value.indexOf(settings.meridianNames[0])>-1,isPM=!scope.timeOptions.show24Hours&&value.indexOf(settings.meridianNames[1])>-1,hour=parseInt(currentTime[0],10);hour=isNaN(hour)?0:hour,hour=((isAM||isPM)&&12===hour?0:hour)+(isPM?12:0);var minute=parseInt(currentTime[1],10);return minute=isNaN(minute)?0:minute,[hour,minute]}return null}function doKeyPress(event){var chr=String.fromCharCode(void 0===event.charCode?event.keyCode:event.charCode);return" ">chr?!0:(handleKeyPress(chr),!1)}function handleKeyPress(chr){if(chr===settings.separator)changeField(1,!1);else if(chr>="0"&&"9">=chr){var key=parseInt(chr,10),value=parseInt(lastChr+chr,10),hour=0!==selectedField?selectedHour:scope.timeOptions.show24Hours?24>value?value:key:(value>=1&&12>=value?value:key>0?key:selectedHour)%12+(selectedHour>=12?12:0),minute=1!==selectedField?selectedMinute:60>value?value:key,fields=[hour,minute];setTime(new Date(0,0,0,fields[0],fields[1],0)),lastChr=chr}else if(!scope.timeOptions.show24Hours&&(chr=chr.toLowerCase(),chr===settings.meridianNames[0].substring(0,1).toLowerCase()&&selectedHour>=12||chr===settings.meridianNames[1].substring(0,1).toLowerCase()&&12>selectedHour)){var saveField=selectedField;selectedField=meridianField,adjustField(1),selectedField=saveField,showField()}}function changeField(offset,moveOut){var atFirstLast=""===element.val()||selectedField===(-1===offset?0:Math.max(1,meridianField));return atFirstLast||(selectedField+=offset),showField(),lastChr="",atFirstLast&&moveOut}function adjustField(offset){setTime(new Date(0,0,0,selectedHour+(0===selectedField?offset:0)+(selectedField===meridianField?12*offset:0),selectedMinute+(1===selectedField?offset*minuteStep:0),0))}function setTime(time){var fields=time?[time.getHours(),time.getMinutes(),time.getSeconds()]:null;time=new Date(0,0,0,fields[0],fields[1],fields[2]),minDate&&maxDate&&minDate>maxDate?minDate>time&&time>maxDate&&(time=Math.abs(time-minDate)<Math.abs(time-maxDate)?minDate:maxDate):time=minDate&&minDate>time?minDate:maxDate&&time>maxDate?maxDate:time,fields[0]=time.getHours(),fields[1]=time.getMinutes(),selectedHour=fields[0],selectedMinute=fields[1],showTime()}function getSelection(input){var select=0,fieldSizes=[element.val().split(settings.separator)[0].length,2,2];if(null!==input.selectionStart)for(var fEnd=0,fField=0;fField<=Math.max(1,meridianField)&&(fEnd+=0===fField?fieldSizes[fField]+settings.separator.length:1===fField?fieldSizes[fField]+settings.meridianPrefix.length:settings.meridianNames[0].length,select=fField,!(input.selectionStart<fEnd));fField++);return select}function showTime(){var currentTime=formatNumber(scope.timeOptions.show24Hours?selectedHour:(selectedHour+11)%12+1)+settings.separator+formatNumber(selectedMinute)+(scope.timeOptions.show24Hours?"":settings.meridianPrefix+settings.meridianNames[12>selectedHour?0:1]);setValue(currentTime),showField()}function showField(){for(var input=element[0],fieldSizes=[element.val().split(settings.separator)[0].length,2,2],start=0,field=0;selectedField>field;)start+=fieldSizes[field]+(field===Math.max(1,-1)?0:settings.separator.length),field++;var end=start+(selectedField!==meridianField?fieldSizes[field]:settings.meridianPrefix.length+settings.meridianNames[0].length);input.setSelectionRange&&input.setSelectionRange(start,end),input.disabled||input.focus()}function formatNumber(value){return(10>value?"0":"")+value}function setValue(value){value!==element.val()&&scope.$apply(function(){ngModel.$setViewValue(createDateFromTime(ngModel.$modelValue))})}function createDateFromTime(cdate){return isNaN(cdate)&&(cdate=getDefaultDate()),cdate.setHours(selectedHour,selectedMinute),new Date(cdate)}function getDefaultDate(){return null!==minDate?new Date(minDate):null!==maxDate?new Date(maxDate):new Date}function parser(value){return value?angular.isDate(value)?(checkMinMaxValid(),ngModel.$setValidity("time",!0),null!==minDate&&minDate>value&&(value=minDate),null!==maxDate&&value>maxDate&&(value=maxDate),
value):(ngModel.$setValidity("time",!1),ngModel.$modelValue):void 0}function formatter(value){return value?$filter("date")(value,timeFormat):void 0}if(ngModel){var settings={minuteStep:5,minDate:null,maxDate:null,fixedDay:!0,separator:" : ",meridianPrefix:" ",meridianNames:["AM","PM"]},minuteStep=scope.timeOptions.minuteStep||settings.minuteStep,fixedDay=scope.timeOptions.fixedDay||settings.fixedDay,timeFormat=scope.timeOptions.show24Hours?"HH"+settings.separator+"mm":"hh"+settings.separator+"mm"+settings.meridianPrefix+"a",maxDate=null,minDate=null,selectedField=0,selectedHour=0,selectedMinute=0,meridianField=-1,lastChr="",blurredInput=null,lastInput=null,focused=!1;(attrs.min||attrs.max)&&(fixedDay=!1),attrs.max&&scope.$parent.$watch($parse(attrs.max),function(value){maxDate=value?new Date(value):null,checkMinMaxValid()}),attrs.min&&scope.$parent.$watch($parse(attrs.min),function(value){minDate=value?new Date(value):null,checkMinMaxValid()}),element.on("keydown",doKeyDown).on("keypress",doKeyPress).on("click",doClick).on("blur",doBlur).on("focus",doFocus),ngModel.$parsers.push(parser),ngModel.$formatters.push(formatter)}}}}]),rockspoonUi.directive("rsTime",function(){return{compile:function(){return{pre:function(scope,element,attributes){scope.settings={minuteStep:1,minDate:null,maxDate:null,fixedDay:!0,show24Hours:!1};var timeOptions=scope.$eval(attributes.timeOptions);if(timeOptions)for(var key in timeOptions)scope.settings[key]=timeOptions[key]}}},controller:["$scope",function($scope){(null===$scope.ngModel||void 0===$scope.ngModel)&&($scope.ngModel=new Date),$scope.$watch(function(){return $scope.ngModel},function(){$scope.ngModel&&($scope.internalModel=moment($scope.ngModel).clone().toDate())},!0),$scope.$watch(function(){return $scope.internalModel},function(){$scope.internalModel&&($scope.ngModel=moment($scope.internalModel))},!0)}],require:"ngModel",restrict:"E",scope:{minuteStep:"=",ngModel:"=",onChange:"&"},template:"<input class='rs-time' type='text' ng-model='internalModel' rs-time-entry ng-change='onChange()' time-options='settings' />"}}).directive("rsTimeRange",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)},$scope.options=[{label:"Same Day",value:"Same Day"},{label:"Next Day",value:"Next Day"}]}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",timeOptions:"="},template:"<table class='rs-time-range'>  <tr>    <td>      <rs-label label='From'></rs-label>    </td>    <td class='rs-margin-left'>      <rs-time time-options='timeOptions' ng-model='ngModel.from' on-change='changed()'></rs-time>    </td>    <td class='rs-margin-left'>      <rs-label label='To'></rs-label>    </td>    <td class='rs-margin-left'>      <rs-combo-box options='options' on-change='changed()' ng-model='ngModel.whichDay'></rs-combo-box>    </td>    <td class='rs-margin-left'>      <rs-time time-options='timeOptions' ng-model='ngModel.to' on-change='changed()'></rs-time>    </td>  </tr></table>"}}).directive("rsMultiTime",function(){var lastHour=moment("1970-01-01T23:59:00.000Z");return{controller:["$scope",function($scope){$scope.changed=function(newD,oldD){for(var i=0;i<newD.length;++i){if((null===newD[i].whichDay||void 0===newD[i].whichDay)&&(newD[i].whichDay=oldD[i].whichDay),newD.length>i+1&&newD[i+1].from.isBefore(newD[i].to)&&(newD[i+1].from=newD[i].to.clone()),"Next Day"===newD[i].whichDay)return(newD[i].to.isAfter(newD[0].from)||newD[i].to.isSame(newD[0].from))&&(newD[i].to=newD[0].from.clone()),newD[i].isFinal=!0,void(i+1<newD.length&&$scope.ngModel.splice(i+1,$scope.ngModel.length-i-1));!newD[i].from.isSame(newD[i].to)&&newD[i].from.isAfter(newD[i].to)&&(newD[i].to=newD[i].from.clone()),newD[i].to.toDate()>=lastHour?newD[i].isFinal=!0:newD[i].isFinal=!1}},$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},_.forEach($scope.ngModel,function(model){model.from.isSame(model.to,"day")?model.whichDay="Same Day":model.whichDay="Next Day"}),$scope.opts={rowFactory:function(){return{from:moment("1970-01-01T11:00:00.000"),to:moment("1970-01-01T23:00:00.000"),whichDay:"Same Day"}}}}],replace:!0,require:"ngModel",restrict:"E",scope:{id:"@",label:"@",ngDisabled:"=",ngModel:"=",timeOptions:"="},template:"<div class='rs-multi-time'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <rs-remove-button ng-repeat='model in internalModel' ng-hide='$last && internalModel[$index - 1].isFinal'>      <rs-time-range ng-class='{\"rs-margin-bottom\":!$last && !internalModel[$index - 1].isFinal}' ng-model='model' time-options='$parent.$parent.timeOptions'></rs-time-range>    </rs-remove-button>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsTitleDescription",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",type:"@",showAbbreviation:"@"},template:"<div ng-form='form' novalidate class='rs-title-description'>  <rs-text-edit label='{{type}} Name' placeholder='{{type}} Name' label-same-line='false' mandatory='true' ng-model='ngModel.title'></rs-text-edit>  <rs-text-edit label='Abbreviation' placeholder='Abbreviation' label-same-line='false' mandatory='true' ng-model='ngModel.abbreviation' ng-if='showAbbreviation'></rs-text-edit>  <rs-text-area label='{{type}} Description' placeholder='{{type}} Description' ng-model='ngModel.description'></rs-text-area></div>"}}),rockspoonUi.directive("rsUtensils",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)},$scope.options=[0,1,2,3,4,5,6,7,8,9,10]}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-utensils' ng-class='{lightgray:ngModel.$isNew}'><table><tr><td><rs-text-edit label='Name' ng-model='ngModel.name' label-same-line='true' on-change='changed()'></rs-text-edit></td><td></td></tr><tr><td><rs-combo-box label='Customer can request up to' ng-model='ngModel.quantity' options='options'></rs-combo-box></td><td><rs-label class='rs-extra-label'>extra items free of charge.</rs-label></td></tr><tr><td><rs-text-edit class='rs-currency' label='Cost of each additional extra item $' ng-model='ngModel.price' label-same-line='true' currency on-change='changed()'></rs-text-edit></td><td></td></tr></div>"}}).directive("rsMultiUtensils",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{name:"",quantity:0,price:0}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-label label='{{::label}}'></rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'><div class='rs-multi-utensils'><div style='display:table' ng-repeat='model in internalModel'><div class='remove-button'><div ng-if='!$last' ng-click='remove(model)'><i class='icon-icons_Delete'></i></div></div><div style='display:table-cell;width:90%'><rs-utensils ng-model='model'></rs-utensils></div></div></div></rs-multi-line>"}}),rockspoonUi.directive("rsVenues",function(){return{controller:["$scope","$rootScope",function($scope,$rootScope){$scope.statuses={PUBLISHED:"enabled",CLOSED:"disabled",ARCHIVED:"deleted"},$scope.menuFilters={all:[$scope.statuses.PUBLISHED,$scope.statuses.CLOSED,$scope.statuses.ARCHIVED],published:[$scope.statuses.PUBLISHED],archived:[$scope.statuses.ARCHIVED],closed:[$scope.statuses.CLOSED]},$scope.menu=$scope.menuFilters.all,$scope.$watchCollection("ngModel",function(){$scope.all=$scope.published=$scope.closed=$scope.archived=0,angular.forEach($scope.ngModel,function(venue){++$scope.all,venue.status===$scope.statuses.PUBLISHED&&++$scope.published,venue.status===$scope.statuses.CLOSED&&++$scope.closed,venue.status===$scope.statuses.ARCHIVED&&++$scope.archived})}),$scope.contains=function(arr,value){return _.contains(arr,value)},$scope.addVenue=function(){$scope.close(),$scope.$parent.addVenue()},$scope.close=function(){$rootScope.$emit("closeBalloon")}}],replace:!0,restrict:"E",scope:{ngModel:"=",allowAdd:"="},template:"<div class='rs-venues'>  <rs-menu-bar title='Menu Bar'>    <rs-menu-bar-buttons>      <button ng-if='allowAdd' class='rs-button' ng-click='addVenue()'><i class='icon-icons_Add'></i>&nbsp;New Venue</button>    </rs-menu-bar-buttons>  </rs-menu-bar>  <div class='rs-venues-body'>    <div class='rs-venues-filters'>      <a class='button' ng-model='menu' btn-radio='{{menuFilters.all}}'>        All        <span ng-if='all > 0'>          ({{all}})        </span>      </a>      <hr />      <a class='button' ng-model='menu' btn-radio='{{menuFilters.published}}'>        Published        <span ng-if='published > 0'>          ({{published}})        </span>      </a>      <hr />      <a class='button' ng-model='menu' btn-radio='{{menuFilters.closed}}'>        Closed        <span ng-if='closed > 0'>          ({{closed}})        </span>      </a>      <hr />      <a class='button' ng-model='menu' btn-radio='{{menuFilters.archived}}'>        Archived        <span ng-if='archived > 0'>          ({{archived}})        </span>      </a>    </div>    <div class='rs-venues-list'>      <rs-menu-bar title='Select a Restaurant to View'>      </rs-menu-bar>      <div class='line text-center' ng-if='ngModel.length === 0'>        <h4>No restaurants available yet.</h4>      </div>      <div id='restaurant_{{$index}}' ng-repeat='venue in ngModel' class='venues' ng-if='contains(menu, venue.status)'>        <div class='venue' ui-sref='properties.general_info({ venueId: venue.venueId })' ng-click='close()'>          <div class='info'>            <div class='title'>{{venue.brand.name}}</div>            <div>{{venue.address.address1}}, {{venue.address.city}}, {{venue.address.region}}</div>          </div>          <div class='status'>            <div ng-if='venue.status === statuses.PUBLISHED'>Published</div>            <div ng-if='venue.status === statuses.ARCHIVED'>Archived</div>            <div class='highlight' ng-if='venue.status === statuses.CLOSED'>Closed</div>          </div>        </div>      </div>    </div>  </div></div>"}}),rockspoonUi.directive("rsViewport",function(){return{controller:["$element",function($element){this.viewport=$element}]}}),rockspoonUi.directive("rsViews",function(){return{restrict:"E",controller:function(){var registeredViews={};this.$registerView=function(ctrl){registeredViews[ctrl.$name]=ctrl},this.$switchTo=function(viewName){for(var k in registeredViews)k==viewName?registeredViews[k].$show():registeredViews[k].$hide()}},link:function(scope,element,attrs,viewsCtrl){element.on("click","[view-target]",function(){var viewName=angular.element(this).attr("view-target");viewsCtrl.$switchTo(viewName)}),scope.$views=viewsCtrl}}}).directive("rsView",function(){return{restrict:"E",require:["rsView","^rsViews"],controller:function($element,$attrs){this.$name=$attrs.name,this.$show=function(){$element.show()},this.$hide=function(){$element.hide()}},link:function(scope,el,attrs,ctrls){var viewCtrl=ctrls[0],viewsCtrl=ctrls[1];viewsCtrl.$registerView(viewCtrl),void 0!==attrs.initial?viewCtrl.$show():viewCtrl.$hide()}}}),rockspoonUi.directive("rsWifiSelect",function(){return{controller:["$scope",function($scope){$scope.securityTypes=[{value:null,label:"None"},{value:"WEP",label:"WEP"},{value:"WPA",label:"WPA/WPA2"}],$scope.$watch("showPassword",function(){$scope.showPassword?$scope.inputType="text":$scope.inputType="password"}),$scope.localSaveChanges=function(){null===$scope.ngModel.id&&($scope.ngModel.securityType=$scope.securityType.value,$scope.ngModel.security=null!==$scope.ngModel.securityType),$scope.saveChanges()},$scope.showPassword=!1,$scope.inputType="password"}],replace:!0,require:["ngModel","tableOptions"],restrict:"E",scope:{ngModel:"=",tableOptions:"=",saveChanges:"&",discardChanges:"&"},template:"<div novalidate class='rs-wifi-select'> <rs-drop-down drop-options='tableOptions' ng-model='ngModel' title='Wi-Fi' mandatory='true'>   {{ngModel.name}}   <div style='float: right' ng-show='ngModel.id!==null'>     <i ng-class='{\"icon-icons_Lock\": ngModel.security}'></i>     <i ng-class='{\"glyphicon glyphicon-screenshot\": ngModel.passwordSaved}'></i>     <rs-connectivity-signal ng-model='ngModel.signal' type='wifi'></rs-connectivity-signal>   </div> </rs-drop-down> <div ng-show='ngModel.id===null'>   <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.name' label='Network Name'></rs-text-edit>   <rs-drop-down drop-options='securityTypes' ng-model='securityType' title='Security Type' mandatory='true'>     {{ngModel.label}}   </rs-drop-down> </div> <rs-text-edit input-type='{{inputType}}' mandatory='true' label-same-line='false' ng-model='ngModel.password' label='Password'></rs-text-edit> <rs-check-box id='showPassword' ng-model='showPassword' label='Show Password'></rs-check-box> <div style='text-align: center'>   <button ng-click='localSaveChanges()' class='rs-button'>Save Changes</button><BR/><BR/>   <button ng-click='discardChanges()' class='rs-button'>Discard Changes</button> </div></div>"}}),rockspoonUi.factory("UID",function(){var nextUid=0;return{create:function(){for(var str=nextUid.toString(36);str.length<3;)str="0"+str;return nextUid++,str}}}),function(angular){"use strict";var module=angular.module("angular-bind-html-compile",[]);module.directive("bindHtmlCompile",["$compile",function($compile){return{restrict:"A",link:function(scope,element,attrs){scope.$watch(function(){return scope.$eval(attrs.bindHtmlCompile)},function(value){element.html(value&&value.toString());var compileScope=scope;attrs.bindHtmlScope&&(compileScope=scope.$eval(attrs.bindHtmlScope)),$compile(element.contents())(compileScope)})}}}])}(window.angular);