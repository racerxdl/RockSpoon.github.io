var rockspoonUi = angular.module("rockspoon-ui", ["ui.bootstrap", "sly", "ngAnimate", "ui.sortable", "ps.inputTime", "sf.virtualScroll", "ngMessages"]);
/*global rockspoonUi: true */
rockspoonUi.factory("focus", ["$rootScope", "$timeout", function($rootScope, $timeout) {
  return function(name) {
    return $timeout(function() {
      return $rootScope.$broadcast("focusOn", name);
    }, 20);
  };
}]).directive("focusOn", function() {
  return function(scope, elem, attr) {
    return scope.$on("focusOn", function(e, name) {
      if (name === attr.focusOn) {
        elem.focus();
        var val = elem.val();
        elem.val("").val(val);
      }
    });
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsALaCarteMenu", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-a-la-carte-menu'>" +
      "  <div class='rs-control'>" +
      "    <rs-a-la-carte-menu-buttons></rs-a-la-carte-menu-buttons>" +
      "    <rs-a-la-carte-menu-control ng-model='ngModel'></rs-a-la-carte-menu-control>" +
      "  </div>" +
      "  <div class='rs-content' ng-transclude></div>" +
      "</div>",
    transclude: true
  };
}).directive("rsALaCarteMenuControl", ["$compile", function($compile) {
  return {
    link: function($scope) {
      $scope.select = function(idx) {
        $scope.selected = idx;
      };
    },
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-a-la-carte-menu-control'>" +
      "  <div class='rs-a-la-carte-menu' ng-class='{ \"rs-selected\": selected === -1 }' ng-click='select(-1)'>" +
      "    <div class='rs-menu-title'><span class='icon-icons_Menu'></span>&nbsp;{{ngModel.title}}</div>" +
      "    <div class='rs-menu-description'>{{ngModel.description}}</div><hr class='separator'/>" +
      "  </div>" +
      "  <rs-a-la-carte-menu-items select='select' selected='selected' ng-model='ngModel.items'></rs-a-la-carte-menu-items>" +
      "</div>"
  };
}]).directive("rsALaCarteMenuButtons", function() {
  return {
    replace: true,
    restrict: "E",
    template:
      "<div class='rs-a-la-carte-menu-button'>" +
      "  <rs-add-menu-item-bar menus='[" +
      "    { name: \"Category\" }," +
      "    { name: \"Sub-Category\" }," +
      "    { name: \"Menu Item\"," +
      "      menus: [ { name: \"Food\" }, { name: \"Beverages\" }, { name: \"Wine\" }, { name: \"Spirits\" }, { name: \"Beer\" }, { name: \"Cocktails\" }, { name: \"Coffe\" }, { name: \"Tee\" } ]" +
      "    }]'>" +
      "  </rs-add-menu-item-bar>" +
      "</div>"
  };
}).directive("rsALaCarteMenuItems", ["$compile", function($compile) {
  return {
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "=",
      select: "=",
      selected: "="
    },
    template:
      "<div class='rs-a-la-carte-menu-items'>" +
      "  <div sly-repeat='item in ngModel'>" +
      "    <rs-a-la-carte-menu-section ng-if='item.type === \"section\"' idx='$index' ng-model='item' last='$last'></rs-a-la-carte-menu-section>" +
      "    <rs-a-la-carte-menu-item ng-if='item.type === \"item\"' idx='$index' ng-model='item' last='$last'></rs-a-la-carte-menu-item>" +
      "  </div>" +
      "</div>"
  };
}]).directive("rsALaCarteMenuSection", ["$compile", function($compile) {
  return {
    link: function($scope, elm) {
      var obj = $compile(
        "<div ng-class='{ \"rs-selected\": $parent.selected === idx }' class='rs-a-la-carte-menu-section rs-level" + $scope.ngModel.level + "' ng-click='$parent.select(idx)'>" +
        "  <div class='rs-menu-title'>{{ngModel.name}}</div>" +
        "  <div align='' class='rs-menu-description'>{{ngModel.description}}</div>" +
        "</div>")($scope);

      elm.addClass("rs-level" + $scope.ngModel.level);
      elm.prepend(obj);
    },
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "=",
      last: "=",
      idx: "="
    },
    template:
      "<div class='rs-a-la-carte-menu-section-container'><div></div><hr class='separator' ng-if='!last' /></div>"
  };
}]).directive("rsALaCarteMenuItem", ["$compile", function($compile) {
  return {
    link: function($scope, elm) {
      var obj = $compile(
        "<div style='display:table;width:100%' ng-class='{ \"rs-selected\": $parent.selected === idx }' class='rs-a-la-carte-menu-item rs-level" + $scope.ngModel.level + "' ng-click='$parent.select(idx)'>" +
        "  <div class='rs-photo'><i class='glyphicon glyphicon-picture' ng-if='!ngModel.img'></i><img ng-src='{{ngModel.img}}' ng-if='ngModel.img' /></div>" +
        "  <div style='display:table-cell; padding-left:10px'>" +
        "    <div class='rs-menu-title'>{{ngModel.name}}</div>" +
        "    <div align='' class='rs-menu-description'>{{ngModel.description}}</div>" +
        "  </div>" +
        "</div>")($scope);

      elm.addClass("rs-level" + $scope.ngModel.level);
      elm.prepend(obj);
    },
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "=",
      last: "=",
      idx: "="
    },
    template:
      "<div class='rs-a-la-carte-menu-item-container'><hr class='separator' ng-if='!last' /></div>"
  };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive("rsAccessControl", function() {
  return {
    controller: ["$scope", function($scope) {
      function parentCheckChange(item) {
        for (var i in item.items) {
          item.items[i].checked = item.checked;
          if (item.items[i].items) {
            parentCheckChange(item.items[i]);
          }
        }
      }

      function childCheckChange(parent) {
        var allChecks = true;
        for (var i in parent.items) {
          if (!parent.items[i].checked) {
            allChecks = false;
            break;
          }
        }
        parent.checked = !!allChecks;
        if (parent.parent) {
          childCheckChange(parent.parent);
        }
      }

      $scope.checkChange = function(item) {
        if (item.id === $scope.ngModel.id) {
          parentCheckChange(item);
        }
        else {
          if (item.items) parentCheckChange(item);
          childCheckChange(item.parent);
        }
      };

    }],
    link: function($scope) {
      function setParent(obj) {
        if (obj.items !== undefined && obj.items !== null) {
          for (var i in obj.items) {
            obj.items[i].parent = obj;
            setParent(obj.items[i]);
          }
        }
      }

      setParent($scope.ngModel);
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template: "<div class='rs-access-control'>" +
    "<rs-section ng-if='ngModel.id'>" +
    "<rs-access-control-check-box ng-model='ngModel'></rs-access-control-check-box>" +
    "</rs-section>" +
    "<rs-access-control-section ng-repeat='section in ngModel.items' ng-model='section'>" +
    "<rs-access-control-check-box ng-repeat='item in section.items' ng-model='item' ng-class='{\"no-border\" :  $last }'></rs-access-control-check-box>" +
    "</rs-access-control-section>" +
    "</div>"
  };
}).directive("rsAccessControlCheckBox", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.checkChange = function(item) {
        $scope.$parent.checkChange(item);
      };
    }],
    link: function(scope) {
      scope.ngModel.label = scope.ngModel.label ? scope.ngModel.label : scope.ngModel.id.charAt(0).toUpperCase() + scope.ngModel.id.slice(1);
    },
    replace: true,
    require: [ "ngModel", "rsAccessControlCheckBox", "^rsAccessControl" ],
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template: "<div class='rs-check-box'><span><input id='chk[{{::ngModel.id}}]' type='checkbox' ng-model='ngModel.checked' ng-change='checkChange(ngModel)'><label for='chk[{{::ngModel.id}}]'>{{::ngModel.label}}</label></span>" +
    "<span ng-if='ngModel.mode && ngModel.checked'>" +
    "<rs-radio-button id='edit_{{::ngModel.id}}' value='view' label='Can View' ng-model='ngModel.mode'></rs-radio-button>" +
    "<rs-radio-button id='view_{{::ngModel.id}}' value='edit' label='Can Edit' ng-model='ngModel.mode'></rs-radio-button>" +
    "</span></div>"
  };
}).directive("rsAccessControlSection", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.checkChange = function(item) {
        $scope.$parent.checkChange(item);
      };
    }],
    replace: true,
    require: [ "ngModel", "rsAccessControlSection", "^rsAccessControl" ],
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template: "<div class='rs-access-control-section'><hr class='separator'/>" +
    "<rs-access-control-check-box ng-model='ngModel' ng-class='{\"title\" :  ngModel.canCheck }' ng-if='ngModel.canCheck'></rs-access-control-check-box>" +
    "<div class='title' ng-if='!ngModel.canCheck'>{{::ngModel.label}}<i class='glyphicon glyphicon-asterisk' ng-if='ngModel.isRequired === true'></i></div>" +
    "<div ng-transclude class='rs-access-control-section-content'></div></div>",
    transclude: true
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsAddMenuItemBar", function() {
  var pad = function(number, n) {
    var N = Math.pow(10, n);
    return number < N ? ("" + (N + number)).slice(1) : "" + number;
  };

  var split = function (collection, columns) {
    return _.groupBy(collection, function(el, idx) {
      return pad(Math.floor(idx / (columns || 1)), 5);
    });
  };

  return {
    replace: true,
    restrict: "E",
    scope: {
      menus: "="
    },
    link: function($scope, elm, attrs) {
      //TODO: Break in columns!!

      $scope.options = null;
      _.forEach($scope.menus, function(menu) {
        if (menu.menus) {
          $scope.options = menu;
        //menu.menus = split(menu.menus, 3);

          return false;
        }
      });
    },
    template:
      "<div class='rs-add-menu-item-bar'>" +
      "  <div class='rs-add-menu-item-bar-categories'>" +
      "    <div class='rs-add-menu-item-bar-category' ng-repeat='model in menus' ng-if='!model.menus'>" +
      "      <i class='icon-icons_Add'></i> {{::model.name}}" +
      "    </div>" +
      "  </div>" +
      "  <div class='rs-add-menu-item-bar-items'>" +
      "    <input type='checkbox' id='rs-menu-items-toggle'>" +
      "    <div class='rs-add-menu-item-bar-item'>" +
      "      <label for='rs-menu-items-toggle'>" +
      "        <i class='icon-icons_Add'></i> {{::options.name}} " +
      "        <b class='caret'></b>" +
      "      </label>" +
      "    </div>" +
      "    <div class='rs-add-menu-item-bar-item-types'>" +
      "        <div ng-repeat='menu in options.menus' class='rs-add-menu-item-bar-item-type'>" +
      "          <i class='icon-icons_Add'></i> {{::menu.name}}" +
      "        </div>" +
      "    </div>" +
      "    <hr />" +
      "  </div>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsAddress", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      mandatory: "="
    },
    template:
      "<div ng-form='form' novalidate class='rs-address'>" +
      "  <table>" +
      "    <tr>" +
      "      <td colspan='1'>" +
      "        <rs-country mandatory='mandatory' ng-model='ngModel.country' label-same-line='false'></rs-country>" +
      "      </td>" +
      "    </tr>" +
      "    <tr>" +
      "      <td colspan='3'>" +
      "        <rs-text-edit mandatory='mandatory' class='address' ng-model='ngModel.address' label='Address' label-same-line='false' placeholder='e.g: Street address, P.O Box, Apartment, Suit, Unit, Floor'></rs-text-edit>" +
      "      </td>" +
      "    </tr>" +
      "    <tr>" +
      "      <td style='width:37%'>" +
      "        <rs-text-edit mandatory='mandatory' class='city' ng-model='ngModel.city' label='City' label-same-line='false'></rs-text-edit>" +
      "      </td>" +
      "      <td class='column-space' style='width:37%'>" +
      "        <rs-state mandatory='mandatory' country='ngModel.country' ng-model='ngModel.state' label-same-line='false'></rs-state>" +
      "      </td>" +
      "      <td class='column-space'>" +
      "        <rs-text-edit label='Zip Code' mandatory='mandatory' label-same-line='false' ng-model='ngModel.zipCode' placeholder='Enter Number'></rs-text-edit>" +
      "      </td>" +
      "    </tr>" +
      "  </table>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsAllergensTags", [function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();

      $scope.opts = {
        rowFactory: function() {
          return {
            name: "",
            status: 0
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      allergensList: "="
    },
    template:
    "<div class='rs-allergens'>" +
    "  Allergens (Select Yes or No)" +
    "</div>" +
    "<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-allergens-tags'>" +
    "  <div ng-repeat='allergen in internalModel' >" +
    "    <label class='rs-allergen' for='rs-allergen-input-{{uid}}' ng-class='{lightgray:allergen.$isNew}'>" +
    "      <a ng-click='remove(allergen)' ng-if='!$last'>" +
    "        <i class='icon-icons_Delete'></i>" +
    "      </a>" +
    "      <input class='rs-allergen-input' type='text' " +
    "             ng-change='changed(allergen)' ng-model='allergen.name' " +
    "             placeholder='Add Allergen' " +
    "             typeahead='allergen as allergen.name for allergen in $parent.$parent.allergensList | filter: $viewValue' " +
    "             name='rs-allergen-input-{{$index}}' />" +
    "    </label>" +
    "    <rs-on-off style='width:150px; display: inline-block' on='Yes' off='No' ng-model='allergen.status' ng-if='!$last'></rs-on-off>" +
    "  </div>" +
    "</div>"
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsSingleAnnualClosures", function() {
  return  {
    controller: ["$scope", "$element", "UID", function($scope, $element, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-single-annual-closures'>" +
    "  <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.name}}' ng-model='ngModel.closed' label='{{ngModel.name}} ({{ngModel.formattedDate}})'></rs-check-box>" +
    "  <div class='day-container' ng-if='ngModel.closed'>" +
    "    <div class='rs-opening-hours-radios'>" +
    "      <rs-radio-button id='{{::uid}}_{{::ngModel.name}}_partial' value='partial' label='Modified opening hours' ng-model='ngModel.availability'></rs-radio-button>" +
    "      <rs-radio-button id='{{::uid}}_{{::ngModel.name}}_closed' value='closed' label='Closed all day' ng-model='ngModel.availability'></rs-radio-button>" +
    "    </div>" +
    "  <rs-multi-time class='multi' ng-if='ngModel.availability === \"partial\"' ng-model='ngModel.time' ></rs-multi-time>" +
    "  </div>" +
    "</div>"
  };
}).directive("rsAnnualClosures", function() {
  return {
    controller: ["$scope", "$element", "UID", function($scope, $element, UID) {
      $scope.uid = UID.create();
      $scope.addCustomHoliday = function(holiday) {
        $scope.ngModel.push({
          name: holiday.name,
          formattedDate: moment.utc(holiday.date).format("MMMM Do"),
          date: holiday.date
        });
        $scope.holidayCalendar.date = null;
        $scope.holidayCalendar.name = null;
      };
    }],
    replace : true,
    require : "ngModel",
    restrict: "E",
    scope   : {
      ngModel: "="
    },
    template:
    "<div class='rs-annual-closures'>" +
    "  <b>Annual Closure</b>" +
    "  <rs-label label='Select which events are observed:'></rs-label>" +
    "  <rs-single-annual-closures ng-repeat='holiday in ngModel' ng-model=holiday></rs-single-annual-closures>" +
    "  <div class='new-holiday'>" +
    "    <rs-text-edit class='new-holiday-name' ng-model='holidayCalendar.name' placeholder='Name e.g. Owner birthday'></rs-text-edit>" +
    "    <rs-date class='new-holiday-date' ng-model='holidayCalendar.date'></rs-date>" +
    "    <button class='new-holiday-add' ng-disabled='!holidayCalendar.name || !holidayCalendar.date' ng-click='addCustomHoliday(holidayCalendar)'>Add</button>" +
    "  </div>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsAutoComplete", [function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "=",
      srcList: "=",
      iconClassName: "@",
      placeholder: "@"
    },
    template:
      "<div class='rs-auto-complete'>" +
      "  <label class='rs-auto-complete-label' for='rs-auto-complete'>" +
      "    <i class='{{::iconClassName}}' ng-if='iconClassName'></i>" +
      "    <input class='rs-auto-complete-input' type='text' ng-model='ngModel' placeholder='{{::placeholder}}' typeahead='item as item.name for item in srcList | filter:$viewValue' data-typeahead-editable='false' name='rs-auto-complete' />" +
      "  </label>" +
      "</div>",
    transclude: true
  };
}]);
/*global rockspoonUi: directive */
rockspoonUi.directive("rsAvailableOn", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-available-on'>" +
      "  <div class='rs-day-container' ng-repeat='option in ngModel.days track by $index' ng-class='{ \"disabled\" :option.closed }'>" +
      "    <span>{{option.day}}</span> " +
      "  </div>" +
      "</div>"

  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsBankInfo", function() {
  return {
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      ngModel: "="
    },
    template: "<div class='rs-bank-info'><rs-text-edit label='Beneficiary Account' ng-model='ngModel.beneficiaryAccount'></rs-text-edit><rs-text-edit label='Beneficiary Bank Name' ng-model='ngModel.beneficiaryBankName'></rs-text-edit><rs-text-edit label='Bank City/State' ng-model='ngModel.bankCityState'></rs-text-edit><rs-text-edit label='Bank Country' ng-model='ngModel.bankCountry'></rs-text-edit><rs-text-edit label='ABA of Swift Code' ng-model='ngModel.abaSwiftCode'></rs-text-edit></div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsBarChart", function() {
  return {
    replace: true,
    restrict: "E",
    link: function($scope) {
      $scope.count = 0;
      _.forEach($scope.ngModel, function(model) {
        $scope.count += model.count;
      });
    },
    scope: {
      ngModel: "=",
      title: "@"
    },
    template: "<div class='bar-chart-container'><div ng-if='title' class='bar-chart-title'>{{title}}</div><div class='bar-chart'><div ng-repeat='item in ngModel' class='bar-chart-row'><div class='bar-chart-title'>{{item.title}}</div><progressbar value='item.count' max='count' class='bar-chart-bar'></progressbar><div class='bar-chart-count'>{{item.count}}</div></div></div></div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsBeneficiaryInfo", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-beneficiary-info'>" +
    "  <rs-label label='Beneficiary Information'></rs-label>" +
    "  <rs-check-box id='business_{{::uid}}' ng-model='ngModel.sameBusiness' label='Same as Business Entity Information'></rs-check-box>" +
    "  <div ng-if='!ngModel.sameBusiness'>" +
    "    <rs-text-edit label='Beneficiary Name' ng-model='ngModel.name' label-same-line='false'></rs-text-edit>" +
    "    <div class='address-container'>" +
    "      <div class='address-inner'>" +
    "        <rs-label class='address' label='Address'></rs-label>" +
    "      </div>" +
    "      <div class='operating-container'>" +
    "        <rs-check-box id='operating_{{::uid}}' ng-model='ngModel.sameOperating' label='Same as Operating Entity Address'></rs-check-box>" +
    "      </div>" +
    "    </div>" +
    "    <rs-address ng-if='!ngModel.sameOperating' ng-model='ngModel.address'></rs-address>" +
    "  </div>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsBrandInfo", function() {
  return {
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-brand-info'>" +
      "  <rs-text-edit label='Name' label-same-line='false' placeholder='Supplier Name' ng-model='ngModel.name'></rs-text-edit>" +
      "  <table>" +
      "    <tr>" +
      "      <td>" +
      "        <rs-label>Logo</rs-label>" +
      "      </td>" +
      "      <td>" +
      "        <div class='description'>" +
      "          <rs-label>Description</rs-label>" +
      "        </div>" +
      "      </td>" +
      "    </tr>" +
      "    <tr>" +
      "      <td>" +
      "        <rs-image-picker-generic ng-model='ngModel.logo'>" +
      "          <rs-image-picker ng-model='ngModel.logo' type=\"image\"></rs-image-picker>" +
      "        </rs-image-picker-generic>" +
      "      </td>" +
      "      <td class='description-column'>" +
      "        <div>" +
      "          <textarea ng-model='ngModel.description'></textarea>" +
      "        </div>" +
      "      </td>" +
      "    </tr>" +
      "  </table>" +
      "</div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsBusinessEntity", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div ng-form='form' novalidate class='rs-business-entity'>" +
    "  <rs-text-edit mandatory='true' label='Business Entity Name' ng-model='ngModel.name' label-same-line='false'></rs-text-edit>" +
    "  <rs-text-edit label='Doing Business as' ng-model='ngModel.business' label-same-line='false'></rs-text-edit>" +
    "  <rs-country mandatory='true' label='Country' ng-model='ngModel.country' label-same-line='false'></rs-country>" +
    "  <rs-combo-box mandatory='true' label='Type of business entity' options='businessEntityOptions' label-same-line='false' ng-model='ngModel.businessType'></rs-combo-box>" +
    "  <rs-text-edit mandatory='true' class='rs-tax-id' label='Tax ID' placeholde='Enter Tax Id' ng-model='ngModel.taxId' label-same-line='false'></rs-text-edit>" +
    "  <div style='display:table'>" +
    "    <div style='display:table-cell'>" +
    "      <rs-label class='address' label='Address'></rs-label>" +
    "    </div>" +
    "    <div style='display:table-cell;padding-left:5px;'>" +
    "      <rs-check-box id='{{::uid}}' ng-model='sameProperty' label='same as property address'></rs-check-box>" +
    "    </div>" +
    "  </div>" +
    "  <rs-address mandatory='true' ng-model='ngModel.address'></rs-address>" +
    "  <rs-multi-phone-text-edit ng-model='ngModel.phones' label='Phone'></rs-multi-phone-text-edit>" +
    "  <rs-multi-social-text-edit ng-model='ngModel.internet' label='Internet'></rs-multi-social-text-edit>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSaveDraftButton", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.save = function() {
        $scope.$parent.save();
      };
    }],
    restrict: "E",
    replace: true,
    scope: {
      label: "@"
    },
    template: "<button class='rs-button' ng-click='save()'><i class='icon-icons_SaveAsDraft'></i>&nbsp;Save as Draft</button>"
  };
}).directive("rsPublishButton", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.publish = function() {
        $scope.$parent.publish();
      };
    }],
    restrict: "E",
    replace: true,
    scope: {
      label: "@"
    },
    template: "<button class='rs-button' ng-click='publish()'><i class='icon-icons_Publish'></i>&nbsp;Publish</button>"
  };
}).directive("rsContinueButton", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.continue = function() {
        $scope.$parent.continue();
      };
    }],
    restrict: "E",
    replace: true,
    scope: {
      label: "@"
    },
    template: "<button class='rs-button' ng-click='continue()'><i class='icon-icons_Continue'></i>&nbsp;Continue</button>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsCategoryForm", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-category-form'>" +
      "  <rs-title-description ng-model='ngModel' type='Category'></rs-title-description>" +
      "</div>"
  };
});
/*global rockspoonUi: directive */
rockspoonUi.directive("rsCheckBoxList", function() {
  return {
    restrict: "E",
    scope: {
      ngModel: "=",
      title: "@"
    },
    template:
      "<div class='rs-section'>" +
      "  <p class='rs-checklist-title'>{{title}}</p>" +
      "  <div class='rs-check-box-container' ng-repeat='option in ngModel track by $index'>" +
      "    <rs-check-box id='checkbox_{{$index}}' ng-model='option.status' label='{{option.type}}'></rs-check-box>" +
      "  </div>" +
      "</div>"

  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsCheckBox", function() {
  return {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;
    },
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      label: "@",
      ngModel: "=",
      onChange: "&"
    },
    template:
      "<div class='rs-check-box'>" +
      "  <span>" +
      "    <input id='chk[{{::id}}]' type='checkbox' ng-model='ngModel' ng-change='onChange(model)' />" +
      "    <label for='chk[{{::id}}]'>{{::label}}</label>" +
      "  </span>" +
      "</div>"
  };
}).directive("rsMultiCheckBox", ["$timeout", "UID", "focus", function($timeout, UID, focus) {
    function pad(number, n) {
      var N = Math.pow(10, n);
      return number < N ? ("" + (N + number)).slice(1) : "" + number;
    }

    function split(collection, columns) {
      return _.groupBy(collection, function(el, idx) {
        return pad(Math.floor(idx / (columns || 1)), 5);
      });
    }

    return {
      link: function($scope, elm, attrs, ctrl) {
        $scope.uid = UID.create();
        $scope.$dirty = false;

        var selected = 0;
        var watchers = [];

        $scope.focus = function() {
          elm.addClass("ng-focus");
        };

        $scope.blur = function() {
          elm.removeClass("ng-focus");
        };

        var checkPressed = function(newModel, oldModel) {
          if (newModel !== oldModel) {
            if (newModel)
              ++selected;
            else
              --selected;

            ctrl.$setViewValue($scope.ngModel);
          }

          ctrl.$setValidity("required", selected >= (parseInt($scope.minRequired) || 0));
        };

        var add = function(model) {
          model.push({ isNew: true, selected: false, custom: true, title: "" });
        };

        var cloneInternal = function() {
          if (!$scope.ngModel)
            $scope.ngModel = [];

          add($scope.internalModel = _.clone($scope.ngModel));

          for (var i = 0; i < $scope.internalModel.length; ++i) {
            if ($scope.internalModel[i].selected)
              ++selected;

            watchers.push($scope.$watchCollection("internalModel[" + i + "].selected", checkPressed));
            $scope.model = split($scope.internalModel, $scope.columns);
          }
        };

        $scope.$watchCollection("ngModel", function() {
          selected = 0;
          _.forEach(watchers, function(watcher) {
            watcher();
          });

          watchers = [];
          cloneInternal();
        });

        $scope.customChanged = function(model) {
          elm.removeClass("ng-pristine");
          if (!_.isUndefined(model.isNew)) {
            model.selected = true;
            delete model.isNew;

            $scope.ngModel.push(model);
            add($scope.internalModel);
            watchers.push($scope.$watchCollection("internalModel[" + watchers.length + "].selected", checkPressed));
            $scope.model = split($scope.internalModel, $scope.columns);
          } else if (!model.title.length) {
            watchers.pop()();

            _.pull($scope.ngModel, model);
            _.pull($scope.internalModel, model);

            if (_.isFunction($scope.ngRemoved))
              $scope.ngRemoved({ model: model });

            $scope.model = split($scope.internalModel, $scope.columns);
            $timeout(function() {
              focus($scope.uid);
            });
          }
        };

        cloneInternal();
      },
      restrict: "E",
      require: "ngModel",
      replace: false,
      scope: {
        columns: "@",
        label: "@",
        minRequired: "@",
        ngDisabled: "=",
        ngModel: "=",
        ngRemoved: "&"
      },
      template:
        "<div class='rs-multi-check-box'>" +
        "  <div class='row' ng-repeat='(idx, modelList) in model'>" +
        "    <div class='column' ng-repeat='model in modelList' style='margin-left:100px'>" +
        "      <input id='chk[{{uid}}_{{idx}}_{{$index}}]' ng-model='model.selected' type='checkbox' ng-disabled='model.isNew || ngDisabled' />" +
        "      <label for='chk[{{uid}}_{{idx}}_{{$index}}]' ng-if='!model.custom' ng-disabled='model.isNew || ngDisabled'><translate>{{model.title}}</translate></label>" +
        "      <label for='chk[{{uid}}_{{idx}}_{{$index}}]' ng-if='model.custom' ng-disabled='ngDisabled'></label>" +
        "      <input type='text' ng-model='model.title' placeholder='Custom' ng-change='customChanged(model)' focus-on='{{uid}}' ng-focus='focus()' ng-blur='blur()' ng-if='model.custom' ng-class='{ custom:model.isNew }' class='' ng-disabled='ngDisabled' />" +
        "    </div>" +
        "  </div>" +
        "</div>"
    };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive('compareTo', function() {
  return {
    require: "ngModel",
    link: function(scope, elm, attrs, ngModel) {
      ngModel.$validators.matchingFields = function(modelValue) {
        return modelValue === scope.$eval(attrs.compareTo);
      };

      scope.$watch(attrs.compareTo, function() {
        ngModel.$validate();
      });
    }
  };
}).directive("rsChoosePassword", function() {
  return {
    controller: ["$scope", "$element", "UID", function($scope, $element, UID) {
      $scope.uid = UID.create();

      $scope.$watch("showPwd", function() {
        if ($scope.showPwd) {
          $element.find('input:password').each(function() {
            $(this).attr("type", "text");
          });
        } else {
          $element.find('input:text').each(function() {
            $(this).attr("type", "password");
          });
        }
      });
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div ng-form='form' novalidate class='rs-choose-password'>" +
    "  <table style='width:100%'>" +
    "    <tr>" +
    "      <td>" +
    "        <rs-text-edit-compare mandatory='true' placeholder='Enter Password' required label='Password' label-same-line='false' ng-model='ngModel.password' compare-model='ngModel.confirmPassword'></rs-text-edit-compare>" +
    "      </td>" +
    "    </tr>" +
    "    <tr>" +
    "      <td>" +
    "        <rs-check-box id='showPwd + {{::uid}}' label='Show Password' ng-model='showPwd'>" +
    "      </td>" +
    "    </tr>" +
    "  </table>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsComboBox", ["$compile", function($compile) {
  return {
    link: function(scope, elm, attrs, ctrl) {
      var paddingClass = "";
      var d;
      var required = "";

      if (attrs.mandatory === "true")
        required = "required";

      if (scope.label !== null && scope.label !== undefined && scope.label !== "")
        paddingClass = "label-space";

      if (scope.labelSameLine !== undefined && scope.labelSameLine !== true)
        d = angular.element("" +
        "<div style='display:table-row'>" +
        "  <div class='combo-label' style='display:table-cell'>" +
        "    <label class='" + paddingClass + "' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>" +
        "  </div>" +
        "</div>" +
        "<div style='display:table-row'>" +
        "  <div class='combo-field-empty' style='width:100%;display:table-cell'>" +
        "    <div class='arrow'></div>" +
        "    <select name=select_{{::uid}} ng-model='ngModel' " + required + "></select>" +
        "  </div>" +
        "</div>" +
        "<div ng-if='mandatory' style='display:table-row'>" +
        "  <div style='width:100%;display:table-cell'>" +
        "    <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>" +
        "      <ng-message when='empty'>A nonempty option is required.</ng-message>" +
        "    </div>" +
        "  </div> " +
        "</div>");
      else
        d = angular.element("" +
        "<div style='display:table-row'>" +
        "  <div class='combo-label' style='display:table-cell'>" +
        "    <label class='" + paddingClass + "' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>" +
        "  </div>" +
        "  <div class='combo-field-empty' style='width:100%;display:table-cell'>" +
        "    <div class='arrow'></div><select name=select_{{::uid}} " + required + "></select>" +
        "  </div>" +
        "</div>" +
        "<div style='display:table-row'>" +
        "  <div style='display:table-cell'>" +
        "  </div>" +
        "  <div style='display:table-cell'>" +
        "    <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'><ng-message when='empty'>A nonempty option is required.</ng-message>" +
        "  </div>" +
        "</div>");


      elm.append(d);
      $compile(d)(scope);

      var select = elm.find("select:first");

      function changeClasses() {
        if (select.selectedIndex <= 0 && !select.val()) {
          select.parent().addClass("combo-field-empty");
          select.parent().removeClass("combo-field");
        } else {
          select.parent().addClass("combo-field");
          select.parent().removeClass("combo-field-empty");
        }
      }

      select.change(function() {
        scope.$apply(function() {
          changeClasses();

          if (scope.mandatory && select.selectedIndex <= 0 && !select.val()) {
            ctrl.$setValidity("empty", false);
          }
          else
            ctrl.$setValidity("empty", true);

          ctrl.$setViewValue(select.val());
          ctrl.$render();
          var fn = scope.onChange();
          if (fn !== null && fn !== undefined)
            fn(select.val());
        });
      });

      function respondToChange() {
          select.find("option").remove().end();

          select.append(new Option("", ""));
          _.forEach(scope.options, function(option, i) {
            var o;
            if (option.label !== null && option.label !== undefined)
              o = new Option(option.label, option.value);
            else
              o = new Option(option, option);

            if (scope.ngModel === (option.value ? option.value : option)) {
              o.selected = true;
              ctrl.$setViewValue(option.value);
            }
            select.append(o);
          });

          if (!scope.ngModel) {
            select.selectedIndex = 0;

            if (scope.mandatory)
              ctrl.$setValidity("empty", false);


            if (scope.options === null || scope.options === undefined) {
              console.log("ERROR: rs-combo-box has no options: label=[" + scope.label + "]");
            } else {
              if (scope.options.length > 0) {
                select.val(scope.options[0].key);
              }
            }
          }

          changeClasses();
      }

      if (scope.options) {
        scope.$watch(function() {
          return scope.options;
        }, respondToChange, true);
      }

      scope.$watch("ngModel", respondToChange, true);
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      labelSameLine: "=",
      mandatory: "=",
      options: "=",
      ngModel: "=",
      onChange: "&",
      showValidationErrors: "@"
    },
    transclude: true,
    terminal: true,
    template: "<div ng-form='form' class='rs-combo-box'></div>"
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsCookingModifiers", function() {
  return  {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;
      scope.$watch("ngModel.isOptional", function() {
        if (!scope.ngModel.isOptional) {
          scope.ngModel.hasDefault = false;
        }
      });
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-cooking-modifiers'>" +
    "  <rs-section title='Cooking Modifiers'>" +
    "    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-cooking-title'></rs-text-edit>" +
    "    <rs-on-off on='Optional Modifier' off='Mandatory Modifier' ng-model='ngModel.isOptional'></rs-on-off>" +
    "    <div class='rs-cooking-modifiers-container'>" +
    "      <div> Available Modifiers</div> " +
    "      <rs-check-box label='With Default Option' ng-if='ngModel.isOptional' ng-model='ngModel.hasDefault'></rs-check-box>" +
    "      <rs-cooking-modifiers-text-edit default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' ng-model='ngModel'></rs-cooking-modifiers-text-edit>" +
    "    </div>" +
    "  </rs-section>" +
    "</div>"
  };
}).directive("rsCookingModifiersTextEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          return {
            modifier: "",
            time: new Date(0,0,0,0,0,0)
          };
        }
      };
    }],

    replace: false,
    require: "hasDefault, defaultModifier, ngModel",
    restrict: "E",
    scope: {
      hasDefault: "=",
      defaultModifier: "=",
      ngModel: "="
    },
    template:
    "<rs-multi-line ng-model='ngModel.modifiers' ng-opts='opts' class='rs-mods-list'>" +
    "  <table>" +
    "    <thead>" +
    "    <tr><td>&nbsp;</td><td></td><td class='default-header'><span ng-if='$parent.hasDefault'>Default</span></td><td></td></tr>" +
    "    </thead>" +
    "    <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
    "      <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>" +
    "        <td width='30' class='remove-td'>" +
    "          <div class='remove-button'>" +
    "            <div ng-if='!$last' ng-click='remove(model)'>" +
    "              <i class='icon-icons_Delete'></i>" +
    "            </div>" +
    "          </div>" +
    "        </td>" +
    "        <td>" +
    "          <div class='rs-modifier-container'>" +
    "            <input type='text' placeholder='Add Modifier' ng-change='changed(model)' ng-model='model.modifier' />" +
    "            <div class='line-number'>" +
    "              <div class='number'>{{$index + 1}}</div>" +
    "            </div>" +
    "          </div>" +
    "          <div class='rs-preparation-time-container'><span ng-class='{\"last-preparation-time\": $last}'>Preparation time </span><rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ show24Hours: true }' class='rs-preparation-time'/><rs-time></div>" +
    "        </td>" +
    "        <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>" +
    "          <rs-radio-button  id='rs-cooking_default_{{$index}}' value='{{model.modifier}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>" +
    "        </td>" +
    "        <td ng-class='{ \"handler-td\" : (!$last && !$parent.$parent.hasDefault) }'>" +
    "          <div class='drag-handler handler-item' ng-if='!$last'>" +
    "            <div class='handler'>&nbsp;</div>" +
    "          </div>" +
    "        </td>" +
    "      </tr>" +
    "    </tbody>" +
    "  </table>" +
    "</rs-multi-line>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsCountry", [function() {
  return {
    controller: ["$scope", "FetchCountry", function($scope, fetch) {
      $scope.options = [];

      fetch.fetchCountries(function(err, countries) {
        if (!err) {
          _.forEach(countries, function(country) {
            $scope.options.push({
              value: country,
              label: country
            });
          });
        }
      });
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      labelSameLine: "=",
      mandatory: "=",
      ngModel: "=",
      onChange: "&"
    },
    template:
      "<div class='rs-country'>" +
      "  <rs-combo-box mandatory='mandatory' label='Country' options='options' label-same-line='labelSameLine' ng-model='ngModel' on-change='onChange'></rs-combo-box>" +
      "</div>"
  };
}]).directive("rsState", [function() {
  return {
    controller: ["$scope", "FetchCountry", function($scope, fetch) {
      $scope.options = [];

      $scope.$watchCollection("country", function() {
        $scope.options.length = 0;

        fetch.fetchStates($scope.country, function(err, states) {
          if (!err) {
            _.forEach(states, function(state) {
              $scope.options.push({
                value: state,
                label: state
              });
            });
          }
        });
      });
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      labelSameLine: "=",
      ngModel: "=",
      mandatory: "=",
      onChange: "&",
      country: "="
    },
    template:
      "<div class='rs-state'>" +
      "  <rs-combo-box mandatory='mandatory' label='State' options='options' label-same-line='labelSameLine' ng-model='ngModel' on-change='onChange'></rs-combo-box>" +
      "</div>"
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsCreateAccount", function() {
  return {
    controller: ["$scope", "$element", function($scope, $element) {
      $scope.createAccount = function() {
        $scope.$parent.createAccount();
      };

      $scope.$watch("showPwd", function() {
        if ($scope.showPwd) {
          $element.find('input:password').each(function() {
            $(this).attr("type", "text");
          });
        } else {
          $element.find('input:text').each(function() {
            $(this).attr("type", "password");
          });
        }
      });

      $scope.cancel = function() {
        $scope.$parent.cancel();
      };
    }],
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div ng-form='form' novalidate class='rs-create-account'>" +
    "  <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.firstName' label='First Name'></rs-text-edit>" +
    "  <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.lastName' label='Last Name'></rs-text-edit>" +
    "  <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.metadata.SSN' label='Social Security Number'></rs-text-edit>" +
    "  <rs-text-edit-compare mandatory='true' label-same-line='false' ng-model='ngModel.email' compare-model='ngModel.confirmEmail' label='Email'></rs-text-edit-compare>" +
    "  <rs-text-edit-compare mandatory='true' label-same-line='false' ng-show='!showPassword' compare-model='ngModel.confirmPassword' password ng-model='ngModel.password' label='Password'></rs-text-edit-compare>" +
    "  <rs-text-edit-compare mandatory='true' label-same-line='false' ng-show='!showPassword' compare-model='ngModel.confirmShortPassword'  password ng-model='ngModel.shortPassword' label='Short Password'></rs-text-edit-compare>" +
    "  <rs-check-box id='showPassword' ng-model='showPwd' label='Show Password'></rs-check-box>" +
    "  <div class='footer'>" +
    "    <button ng-click='createAccount()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Create Account</button>" +
    "    <button ng-click='cancel()'><i class='glyphicon glyphicon-remove'></i>&nbsp;Cancel</button>" +
    "  </div>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.filter("formattedRSDateTime", function() {
  return function(input) {
    if (!input)
      return "Undetermined";

    return input.format("MM/DD/YYYY - hh:mm A");
  };
}).filter("formattedRSDate", function() {
  return function(input, format) {
    if (!input)
      return null;

    var defaultFormat = "MMMM Do";
    if (format)
      defaultFormat = format;

    return moment(input).format(defaultFormat);
  };
}).factory('dropDownToggleService', ["$timeout", function($timeout) {
  return {
    findFirstScrollable: function(element) {
      if (element === null || element === undefined || element.prop("scrollHeight") > element.prop("clientHeight")) {
        return element;
      }

      return this.findFirstScrollable(element.parent());
    },

    customClickHandler: function(event) {
      var scope = event.data.scope;
      var element = event.data.element;
      var setMargin = event.data.setMargin;

      $timeout(function() {
        var dropdownElement = element.find(".dropdown-menu");
        scope.dropdownElement = dropdownElement;
        if (setMargin === true)
          scope.marginBottom = scope.dropdownElement.css('margin-top') || "2px";

        scope.heightD = dropdownElement.height();
        var availableTop = element.offset().top;
        var availableBottom = $(window).height() - availableTop;

        if (availableBottom > scope.heightD)
          scope.isDropUp = false;
        else {
          scope.dropdownElement.css('margin-bottom', scope.marginBottom);
          scope.isDropUp = true;
        }
      }, 0);
    }
  };
}]).directive("rsCalendar", function() {
  var calendars = {};

  var buildCalendar = function(month, year) {
    var cacheKey = month + " + " + year;
    if (calendars[cacheKey])
      return calendars[cacheKey];

    var firstDay  = moment([year, month, 1]);
    var lastMonth = moment(firstDay).subtract("month", 1).month();
    var lastYear  = moment(firstDay).subtract("month", 1).year();

    var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();
    var dayOfWeek       = firstDay.day();

    var calendar = [];
    var i, j;
    for (i = 0; i < 6; ++i)
      calendar[i] = [];

    var startDay = daysInLastMonth - dayOfWeek + 1;

    if (startDay > daysInLastMonth)
      startDay -= 7;

    if (!dayOfWeek)
      startDay = daysInLastMonth - 6;

    var curDate = moment([lastYear, lastMonth, startDay]).startOf("day");

    for (i = 0; i < 6; ++i)
      for (j = 0; j < 7; ++j)
        calendar[i][j] = curDate = moment(curDate).add("day", 1);

    calendars[cacheKey] = calendar;
    return calendar;
  };

  return {
    controller: ["$scope", function($scope) {
      if (_.isDate($scope.startDate) || _.isDate($scope.endDate))
        throw new Error("You must use moment");

      var isBefore = function() {
        if ($scope.startDate && $scope.startDate.isAfter($scope.endDate))
          $scope.endDate = $scope.startDate.clone();
      };

      $scope.$watch(function() {
        return $scope.startDate;
      }, isBefore, true);

      $scope.$watch(function() {
        return $scope.endDate;
      }, isBefore, true);

      $scope.inRange = function(day) {
        return ($scope.startDate !== null && $scope.startDate !== undefined && $scope.endDate !== null && $scope.endDate !== undefined) &&
          ((day.isAfter($scope.startDate, "day") && day.isBefore($scope.endDate, "day")) ||
          day.isSame($scope.startDate, "day") || day.isSame($scope.endDate, "day"));
      };

      $scope.getDayNumber = function(day) {
        return day.date();
      };

      $scope.isOff = function(day) {
        return (day.month() !== $scope.current.month()) || (!$scope.left && day.isBefore($scope.startDate, "day"));
      };

      $scope.updateCalendar = function() {
        $scope.calendar  = buildCalendar($scope.current.month(), $scope.current.year());
        $scope.monthName = moment()._lang._monthsShort[$scope.current.month()] + $scope.current.format(" YYYY");
      };

      $scope.isActive = function(day) {
        if ($scope.left)
          return day.isSame($scope.startDate, "day");

        return day.isSame($scope.endDate, "day");
      };

      $scope.daysOfWeek = angular.copy(moment()._lang._weekdaysMin);
      $scope.daysOfWeek.push($scope.daysOfWeek.shift());

      $scope.pickDate = function(date) {
        if ($scope.readOnly || !$scope.endDate || (!$scope.left && date.isBefore($scope.startDate, "day")))
          return;

        date = date.clone();
        if ($scope.left) {
          date.hours($scope.startDate.hours());
          date.minutes($scope.startDate.minutes());
          $scope.startDate = date;
          if (date.isSame($scope.endDate, "day") || date.isAfter($scope.endDate, "day"))
            $scope.endDate   = $scope.startDate.clone();
        } else {
          date.hours($scope.endDate.hours());
          date.minutes($scope.endDate.minutes());
          $scope.endDate = date;
        }
      };

      $scope.setPrevMonth = function(notPropagate) {
        $scope.current.subtract("month", 1);
        $scope.updateCalendar();
        if (!notPropagate)
          $scope.$parent.$broadcast("prevMonth");
      };

      $scope.setNextMonth = function(notPropagate) {
        $scope.current.add("month", 1);
        $scope.updateCalendar();
        if (!notPropagate)
          $scope.$parent.$broadcast("nextMonth");
      };
    }],
    link: function(scope, element, attrs) {
      scope.$watchCollection("isOpen", function() {
        if (scope.isOpen) {
          if (!scope.left) {
            if (!scope.readOnly) {
              if (scope.endDate !== null && scope.endDate !== undefined)
                scope.current = moment([scope.endDate.year(), scope.endDate.month(), 1]);
              else
                scope.current = moment([scope.startDate.year(), scope.startDate.month(), 1]).add("month", 1);
            } else if (scope.startDate !== null && scope.startDate !== undefined) {
              scope.current = moment([scope.startDate.year(), scope.startDate.month(), 1]).add("month", 1);
            }
          } else if (!scope.readOnly && scope.startDate !== null && scope.startDate !== undefined)
            scope.current = moment([scope.startDate.year(), scope.startDate.month(), 1]);
          else if (scope.endDate !== null && scope.endDate !== undefined)
            scope.current = moment([scope.endDate.year(), scope.endDate.month(), 1]).subtract("month", 1);
          else
            scope.current = moment([scope.startDate.year(), scope.startDate.month(), 1]);

          if (scope.current !== null && scope.current !== undefined)
            scope.updateCalendar();
        }
      });

      scope.$watchCollection("readOnly", function() {
        if (scope.readOnly)
          element.addClass("rs-readonly");
        else
          element.removeClass("rs-readonly");
      });

      scope.left = attrs.left === "";
      scope.right = attrs.right === "";

      if (!scope.left) {
        scope.$on("prevMonth", function(e) {
          scope.setPrevMonth(true);
        });
      }
      else {
        scope.$on("nextMonth", function(e) {
          scope.setNextMonth(true);
        });
      }
    },
    replace: true,
    restrict: "E",
    scope: {
      endDate: "=",
      isOpen: "=",
      readOnly: "=",
      startDate: "="
    },
    template: "<div class='rs-calendar'><table class='table-condensed'><thead><tr><th><i class='glyphicon glyphicon-triangle-left' style='cursor:pointer' ng-click='setPrevMonth()' ng-if='left'></i></th><th style='width:auto'>{{monthName}}</th><th class='available'><i class='glyphicon glyphicon-triangle-right' style='cursor:pointer' ng-click='setNextMonth()' ng-if='!left || right'></i></th></tr></thead><tbody><tr><td colspan='3' style='padding:0px'><table class='table-condensed' style='border-spacing:4px;border-collapse:initial;margin-left:-4px;margin-right:-4px'><thead><tr><th sly-repeat='d in daysOfWeek' sly-evaluate-only-when='isOpen'>{{d}}</th></tr></thead><tbody><tr style='height:32px' sly-repeat='week in calendar'><td ng-if='isOpen' style='padding:0' class='available' ng-click='pickDate(day)' sly-repeat='day in week' ng-class='{off:isOff(day), inrange:inRange(day), active:isActive(day)}'><div style='width:32px'>{{getDayNumber(day)}}</div></td></tr></tbody></table></td></tr></tbody></table></div>"
  };
}).directive("rsNonYearCalendar", function() {
  var buildCalendar = function(month) {
    var curDate = moment([2000, month, 1]);

    var calendar = [];
    var i, j;
    for (i = 0; i < 5; ++i)
      calendar[i] = [];

    for (i = 0; i < 5; ++i)
      for (j = 0; j < 7; ++j) {
        if (curDate.month() != month)
          return calendar;
        calendar[i][j] = curDate;

        curDate = angular.copy(curDate).add("day", 1);
      }

    return calendar;
  };

  return {
    controller: ["$scope", function($scope) {
      $scope.curMonth = (new Date()).getMonth();

      $scope.updateCalendar = function() {
        $scope.calendar = buildCalendar($scope.curMonth);
        $scope.monthName = moment()._lang._months[$scope.curMonth];
      };

      $scope.setPrevMonth = function() {
        --$scope.curMonth;
        $scope.updateCalendar();
      };

      $scope.setNextMonth = function() {
        ++$scope.curMonth;
        $scope.updateCalendar();
      };

      $scope.getDayNumber = function(day) {
        return day.date();
      };

      $scope.daySelected = function(day) {
        $scope.ngModel = day;
        if (angular.isFunction($scope.onSelect))
          $scope.onSelect();
      };

      $scope.updateCalendar();
    }],
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "=",
      onSelect: "&"
    },
    template: "<div class='rs-calendar'><table class='table-condensed'><thead><tr><th><i class='glyphicon glyphicon-triangle-left' ng-click='setPrevMonth()' ng-show='curMonth !== 0' style='cursor:pointer'></i></th><th style='width:auto'>{{monthName}}</th><th><i class='glyphicon glyphicon-triangle-right' ng-click='setNextMonth()' ng-show='curMonth !== 11' style='cursor:pointer'></i></th></tr><tr></tr></thead><tbody><tr><td colspan='3' style='padding:0px'><table class='table-condensed' style='border-spacing:4px;border-collapse:initial;margin-left:-4px;margin-right:-4px'><tr style='height:32px' sly-repeat='week in calendar'><td style='padding:0' class='available' sly-repeat='day in week' style='cursor:pointer' ng-click='daySelected(day)'><div style='width:32px'>{{getDayNumber(day)}}</div></td></tr></table></td></tr></tbody></table></div>"
  };
}).directive("rsTwoCalendars", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
      $scope.undetermined = ($scope.ngModel.to === null && $scope.ngModel.to === undefined);
      $scope.preventClose = function($event) {
        $event.stopPropagation();
      };
    }],
    link: function(scope, element, attrs) {
      scope.start = attrs.start === "";
      scope.$watch(function() {
        return scope.ngModel;
      }, function() {
        if (scope.ngModel.to !== null && scope.ngModel.to !== undefined)
          scope.undetermined = false;

        scope.time = scope.start ? scope.ngModel.from : scope.ngModel.to;
      }, true);

      scope.$watch(function() {
        return scope.time;
      }, function() {
        if (scope.start)
          scope.ngModel.from = moment(scope.time);
        else
          scope.ngModel.to = moment(scope.time);
      }, true);

      scope.$watchCollection("undetermined", function(o, n) {
        if (scope.undetermined)
          scope.ngModel.to = null;
        else if (o !== n)
          scope.ngModel.to = scope.ngModel.from.clone();
      });
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      isOpen: "=",
      ngModel: "="
    },
    template: "<ul class='dropdown-menu' role='menu'><li ng-click='preventClose($event)'><div class='rs-calendar-container'><div class='rs-disabled' ng-if='undetermined && !start'>&nbsp;</div><table><tr><td colspan='2' align='left' style='padding-left:15px;'><span style='height:32px' ng-show='start'>&nbsp;</span><rs-check-box style='height:32px' ng-hide='start' id='{{::uid}}' ng-model='undetermined' label='Undetermined'></rs-check-box></td></tr><tr><td><rs-calendar start-date='ngModel.from' end-date='ngModel.to' is-open='isOpen' left read-only='!start'></rs-calendar></td><td><rs-calendar start-date='ngModel.from' end-date='ngModel.to' right read-only='start || undetermined' is-open='isOpen'></rs-calendar></td></tr><tr><td colspan='2' align='center'><rs-time ng-model='time'></rs-time></td></tr></table></div></li></ul>"
  };
}).directive("rsDateRange", ["$compile", "UID", "dropDownToggleService", "$timeout", function($compile, UID, dropDownToggleService, $timeout) {
  return {
    link: function(scope, elm) {
      scope.enabled = (scope.ngModel.from !== null && scope.ngModel.from !== undefined);
      scope.uid = UID.create();
      var paddingClass = "";
      var d;

      var handleDropDown = function() {
        var availableTop = elm.position().top;
        var availableBottom = scrollableElement.height() - elm.height() - availableTop;
        var padding = 20;

        if (availableBottom > scope.heightD + padding)
          scope.isDropUp = false;
        else
          scope.isDropUp = true;
      };

      var scrollableElement = dropDownToggleService.findFirstScrollable(elm);
      scrollableElement.on("scroll", scope.$apply.bind(scope, handleDropDown));
      scope.scrollableElement = scrollableElement;

      if (scope.labelFrom !== null && scope.labelFrom !== undefined && scope.labelFrom !== "")
        paddingClass = "label-space";

      if (!scope.temporaryClosure)
        scope.enabled = true;

      if (scope.labelSameLine !== undefined && scope.labelSameLine !== true) {
        elm.addClass("rs-two-line");
        d = $compile(
          "<rs-check-box id='{{::uid}}' ng-model='enabled' ng-if='temporaryClosure' label='Schedule a temporary closure'></rs-check-box>" +
          "<div class='rs-date-range-inner' ng-class='{dropup: isDropUp}' ng-if='enabled'>" +
          "  <table style='width:100%'>" +
          "    <tr>" +
          "      <td class='rs-from'>" +
          "        <rs-label style='text-align:left'>{{::labelFrom}}</rs-label>" +
          "      </td>" +
          "      <td class='rs-to'>" +
          "        <rs-label style='text-align:left'>{{::labelTo}}</rs-label>" +
          "      </td>" +
          "    </tr>" +
          "    <tr>" +
          "      <td class='rs-from'>" +
          "        <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openStart'>" +
          "          <input class='dropdown-toggle' style='margin-top:0' dropdown-toggle type='text' value='{{ngModel.from | formattedRSDateTime}}' readonly/>" +
          "          <rs-two-calendars ng-model='ngModel' start is-open='openStart'></rs-two-calendars>" +
          "        </div>" +
          "      </td>" +
          "      <td class='rs-to'>" +
          "        <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openEnd'>" +
          "          <input class='dropdown-toggle' style='margin-top:0' dropdown-toggle type='text' value='{{ngModel.to | formattedRSDateTime}}' readonly/>" +
          "          <rs-two-calendars ng-model='ngModel' end is-open='openEnd'></rs-two-calendars>" +
          "        </div>" +
          "      </td>" +
          "    </tr>" +
          "  </table>" +
          "</div>")(scope);
      } else
        d = $compile(
          "<rs-check-box id='{{::uid}}' ng-model='$parent.enabled' ng-if='temporaryClosure' label='Schedule a temporary closure'></rs-check-box>" +
          "<div class='rs-date-range-inner' ng-class='{dropup: isDropUp}' ng-if='enabled'>" +
          "  <div class='text-label' style='display:table-cell;width:0'>" +
          "    <label class='" + paddingClass + " rs-from' style='text-align:right'>{{::labelFrom}}</label>" +
          "  </div>" +
          "  <div class='text-field' style='width:50%;display:table-cell'>" +
          "    <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openStart'>" +
          "      <input class='dropdown-toggle' dropdown-toggle type='text' value='{{ngModel.from | formattedRSDateTime}}' readonly/>" +
          "      <rs-two-calendars ng-model='ngModel' start is-open='openStart'></rs-two-calendars>" +
          "    </div>" +
          "  </div>" +
          "  <div class='text-label' style='display:table-cell;width:0'>" +
          "    <label class='" + paddingClass + " rs-to' style='text-align:right'>{{::labelTo}}</label>" +
          "  </div>" +
          "  <div class='text-field' style='width:50%;display:table-cell'>" +
          "    <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openEnd'>" +
          "      <input type='text' class='dropdown-toggle' dropdown-toggle value='{{ngModel.to | formattedRSDateTime}}' readonly/>" +
          "      <rs-two-calendars ng-model='ngModel' end is-open='openEnd'></rs-two-calendars>" +
          "    </div>" +
          "  </div>" +
          "</div>")(scope);

      elm.append(d);

      scope.$watch("enabled", function(o, n) {
        if (!scope.enabled)
          scope.ngModel.from = scope.ngModel.to = null;
        else if (o !== n) {
          var tmp = moment();
          scope.ngModel.from = moment([tmp.year(), tmp.month(), tmp.date(), tmp.hours(), Math.ceil(tmp.minutes() / 5) * 5]);
          scope.ngModel.to = scope.ngModel.from.clone();
          var toggleElements = elm.find(".dropdown-toggle");

          scope.toggleEl1 = $(toggleElements[0]);
          scope.toggleEl2 = $(toggleElements[1]);

          var data1 = {
            scope: scope,
            element: $(scope.toggleEl1[0].parentNode),
            setMargin: false,
            service: dropDownToggleService
          };

          var data2 = _.cloneDeep(data1);
          data2.element = $(scope.toggleEl2[0].parentNode);

          scope.toggleEl1.on("click", data1, dropDownToggleService.customClickHandler);
          scope.toggleEl2.on("click", data2, dropDownToggleService.customClickHandler);
        }
      });

      scope.$on("$destroy", function() {
        scrollableElement.off();
        scope.toggleEl1.off();
        scope.toggleEl2.off();
      });
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      labelFrom: "@",
      labelTo: "@",
      labelSameLine: "=",
      ngModel: "=",
      temporaryClosure: "@"
    },
    template: "<div class='rs-date-range'></div>"
  };
}]).directive("rsDate", function() {
  return {
    controller: ["$scope", "$element", "dropDownToggleService", function($scope, $element, dropDownToggleService) {
      if ($scope.ngModel !== null && $scope.ngModel !== undefined && _.isDate($scope.ngModel))
        throw new Error("You must use moment");

      var handleDropDown = function() {
        var availableTop = $element.offset().top;
        var availableBottom = $(window).height() - availableTop;

        if (availableBottom > $scope.heightD)
          $scope.isDropUp = false;
        else
          $scope.isDropUp = true;
      };

      var toggleEl = $element.find(".dropdown-toggle");
      var scrollableElement = dropDownToggleService.findFirstScrollable($element);

      var data = {
        scope: $scope,
        element: $element,
        setMargin: false,
        service: dropDownToggleService
      };

      $(toggleEl).on("click", data, dropDownToggleService.customClickHandler);
      scrollableElement.on("scroll", $scope.$apply.bind($scope, handleDropDown));
      $scope.scrollableElement = scrollableElement;

      $scope.preventClose = function($event) {
        $event.stopPropagation();
      };

      $scope.hideCalendar = function() {
        $scope.isOpen = false;
      };

      $scope.$on("$destroy", function(event) {
        scrollableElement.off();
        $(toggleEl).off();
      });
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      dateFormat: "@",
      ngModel: "="
    },
    template:
      "<div class='rs-date' ng-class='{ dropup: isDropUp }'>" +
      "  <div class='dropdown' dropdown is-open='isOpen'>" +
      "    <input class='dropdown-toggle' dropdown-toggle type='text' placeholder='Date'  value='{{ngModel | formattedRSDate:dateFormat}}' readonly>" +
      "    <ul class='dropdown-menu' role='menu'>" +
      "      <li ng-click='preventClose($event)'>" +
      "        <rs-non-year-calendar ng-model='ngModel' on-select='hideCalendar()'></rs-non-year-calendar>" +
      "      </li>" +
      "    </ul>" +
      "  </div>" +
      "</div>"
  };
}).directive("rsYearDate", function() {
  return {
    controller: ["$scope", "$element", "dropDownToggleService", function($scope, $element, dropDownToggleService) {
      var handleDropDown = function() {
        var availableTop = $element.offset().top;
        var availableBottom = $(window).height() - availableTop;

        if (availableBottom > $scope.heightD)
          $scope.isDropUp = false;
        else {
          if ($scope.dropdownElement)
            $scope.dropdownElement.css('margin-bottom', $scope.marginBottom);
          $scope.isDropUp = true;
        }
      };

      var toggleEl = $element.find(".dropdown-toggle");
      var scrollableElement = dropDownToggleService.findFirstScrollable($element);
      $scope.scrollableElement = scrollableElement;

      var data = {
        scope: $scope,
        element: $element,
        setMargin: true,
        service: dropDownToggleService
      };

      $(toggleEl).on("click", data, dropDownToggleService.customClickHandler);
      scrollableElement.on("scroll", $scope.$apply.bind($scope, handleDropDown));

      if ($scope.ngModel !== null && $scope.ngModel !== null && _.isDate($scope.ngModel))
        throw new Error("You must use moment");

      $scope.preventClose = function($event) {
        $event.stopPropagation();
      };

      $scope.$watch(function() {
        return $scope.startDate;
      }, function() {
        $scope.ngModel = $scope.startDate;
      }, true);

      $scope.hideCalendar = function() {
        $scope.isOpen = false;
      };

      $scope.$on("$destroy", function(event) {
        scrollableElement.off();
        $(toggleEl).off();
      });
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      dateFormat: "@",
      ngModel: "=",
      startDate: "="
    },
    template:
      "<div class='rs-date' ng-class='{ dropup: isDropUp }'>" +
      "  <div class='dropdown' dropdown is-open='isOpen'>" +
      "    <input class='dropdown-toggle' dropdown-toggle type='text' placeholder='Date'  value='{{ngModel | formattedRSDate:dateFormat}}' readonly>" +
      "    <ul class='dropdown-menu' role='menu'>" +
      "      <li ng-click='preventClose($event)'>" +
      "        <rs-calendar ng-model='ngModel' start-date='startDate' end-date='startDate' left right is-open='isOpen' on-select='hideCalendar()'></rs-calendar>" +
      "      </li>" +
      "    </ul>" +
      "  </div>" +
      "</div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsEstimatedTime", function() {
  return {
    controller: ["$scope", function($scope){
      $scope.timesBegin = [];
      $scope.timesEnd = [];

      for (var i = 0; i < 60; i += 5)
        $scope.timesBegin.push({ label : i + " minutes", value : i });

      $scope.$watchCollection("ngModel.from", function() {
        $scope.timesEnd = [];

        var from = $scope.ngModel.from ? parseInt($scope.ngModel.from) : 0;
        for (var i = from; i < 60; i += 5)
          $scope.timesEnd.push({ label : i + " minutes", value : i });
      });

    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      type: "@"
    },
    template:
      "<div style='display:table' class='rs-estimated-time'>" +
      "  <div style='display:table-cell'>Order is estimated to be ready for {{::type}} in&nbsp;</div>" +
      "  <div style='display:table-cell;width:95px'>" +
      "    <rs-combo-box ng-model='ngModel.from' options='timesBegin'></rs-combo-box>" +
      "  </div>" +
      "  <div style='display:table-cell'>&nbsp;to&nbsp;</div>" +
      "  <div style='display:table-cell;width:95px'>" +
      "    <rs-combo-box ng-model='ngModel.to' options='timesEnd'></rs-combo-box>" +
      "  </div>" +
      "  <div style='display:table-cell'>&nbsp;after being placed</div>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsExtraModifiers", function() {
  return  {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;

      if (!scope.ngModel.free) {
        scope.ngModel.free = "none";
      }

      scope.$watch("ngModel.isOptional", function() {
        if (!scope.ngModel.isOptional) {
          scope.ngModel.hasDefault = false;
        }
      });

      scope.maximum = [{
        label: "",
        value: ""
      }];

      for (var i = 0; i < scope.ngModel.modifiers.length; ++i)
        scope.maximum.push({ value: i + 1, label: (i + 1).toString() });

      scope.$watch("ngModel.modifiers.length", function(newLength, oldLength) {
        if (newLength > oldLength) {
          scope.maximum.push({ value: newLength, label: newLength.toString() });
        }
        else if (scope.maximum.length > 1) {
          scope.maximum.pop();
          if (scope.ngModel.allMaxFree > newLength)
            scope.ngModel.allMaxFree = newLength;
        }
      });
    },

    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      sizesList: "=",
      ngModel: "="
    },
    template:
    "<div class='rs-extra-modifiers'>" +
    "  <rs-section title='Modifiers - Extra'>" +
    "    <rs-label label='Optional'></rs-label>" +
    "    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-extra-modifiers-title'></rs-text-edit>" +
    "    <div class='free-selections-container'>" +
    "    <rs-label label='Modifiers for free:'></rs-label>" +
    "    <rs-radio-button class='free-selections' id='rs-extra_all{{::ngModel.id}}' value='all' label='All'    ng-model='ngModel.free'></rs-radio-button>" +
    "    <rs-radio-button class='free-selections' id='rs-extra_custom{{::ngModel.id}}' value='custom' label='Custom' ng-model='ngModel.free'></rs-radio-button>" +
    "    <rs-radio-button class='free-selections' id='rs-extra_none{{::ngModel.id}}' value='none' label='None' ng-model='ngModel.free'></rs-radio-button>" +
    "    </div>" +
    "    <rs-multi-extra-price-edit ng-if='ngModel.free == \"custom\"' sizes-list='sizesList' ng-model='ngModel.extras'></rs-multi-extra-price-edit>" +
    "    <rs-check-box label='Can choose more than 1 modifier' ng-model='ngModel.multiple' id='rs-extra-modifiers + {{::id}}'></rs-check-box>" +
    "    <rs-multi-extra-modifiers ng-model='ngModel.modifiers' sizes-list='sizesList' default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' item-list='itemList'></rs-multi-extra-modifiers>" +
    "  </rs-section>" +
    "</div>"
  };
}).directive("rsMultiExtraModifiers", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        itemList  : $scope.itemList,
        rowFactory: function() {
          var tmp = moment();
          var from = moment.utc([tmp.year(), tmp.month(), tmp.date(), tmp.hours(), Math.ceil(tmp.minutes() / 5) * 5]);
          var to = from.clone();

          var extraPrices = [];

          if ($scope.sizesList.length <= 1) {
            extraPrices.push({ name: "Default", value: 0 });
          }

          else {
            for (var i = 0; i < $scope.sizesList.length; i++) {
              extraPrices.push({name: $scope.sizesList[i].name, value: 0});
            }
          }

          return {
            isNotAvailable : false,
            name           : "",
            preparationTime: new Date(0, 0, 0, 0, 0, 0),
            notAvailable   : {
              from: from,
              to  : to
            },
            extraNumber: 0,
            extraPrices: extraPrices,
            $uid       : UID.create()
          };
        }
      };
    }],
    replace   : false,
    require   : "ngModel",
    restrict  : "E",
    scope     : {
      itemList       : "=",
      ngModel        : "=",
      hasDefault     : "=",
      defaultModifier: "=",
      sizesList      : "="
    },
    template  : "" +
    "  <rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
    "    <table>" +
    "      <thead>" +
    "        <tr ng-show='internalModel.length > 1'>" +
    "          <td>&nbsp;</td>" +
    "          <td>&nbsp;</td>" +
    "          <td class='rs-add-price-header' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>" +
    "            <div >Add Price $</div>" +
    "          </td>" +
    "          <td>&nbsp;</td>" +
    "        </tr>" +
    "        <tr ng-show='internalModel.length > 1'>" +
    "          <td>&nbsp;</td>" +
    "          <td>&nbsp;</td>" +
    "          <td class='rs-prices-header'  ng-class='{ borders: $parent.$parent.sizesList.length > 1 }' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>" +
    "            <div ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</div>" +
    "            <span  ng-if='$parent.$parent.sizesList.length == 1'>Price</span>" +
    "          </td>" +
    "          <td>&nbsp;</td>" +
    "        </tr>" +
    "      </thead>" +
    "      <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
    "        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>" +
    "          <td width='30' class='remove-td'>" +
    "            <div class='remove-button'>" +
    "              <div ng-if='!$last' ng-click='remove(model)'>" +
    "                <i class='icon-icons_Delete'></i>" +
    "              </div>" +
    "            </div>" +
    "          </td>" +
    "          <td class='rs-extra-modifiers-container' ng-class='{selected: model.isNotAvailable, leftBorder: $parent.$parent.$parent.ngModel.free != \"none\"  }'>" +
    "            <div>" +
    "              <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Modifier' ng-change='changed(model)' ng-model='model.name' />" +
    "              <div class='line-number'>" +
    "                <div class='number'>{{$index + 1}}</div>" +
    "              </div>" +
    "              <div class='database-icon'>" +
    "                <i class='icon-icons_Database'></i>" +
    "              </div>" +
    "            </div>" +
    "            <div class='rs-preparation-time-container'>" +
    "              <div class='rs-preparation-time-text' ng-class='{\"last-preparation-time\": $last}'>Preparation time </div>" +
    "              <rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ timeSteps: [1, 1, 1], show24Hours: true }' class='rs-preparation-time'/><rs-time>" +
    "            </div>" +
    "          </td>" +
    "          <td class='rs-prices-container' ng-if='$parent.$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1' ng-class='{selected: model.isNotAvailable}'>" +
    "            <input currency type='text' ng-model='obj.value' ng-change='changed(model)' ng-repeat='obj in model.extraPrices' />" +
    "          </td>" +
    "          <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>" +
    "            <rs-radio-button  id='rs-extra-modifier_default_{{$index}}' value='{{model.name.itemId}}_{{$index}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>" +
    "          </td>" +
    "          <td class='rs-handler'>" +
    "            <div class='drag-handler handler-item' ng-if='!$last'>" +
    "              <div class='handler'>&nbsp;</div>" +
    "            </div>" +
    "          </td>" +
    "        </tr>" +
    "        <tr ng-if='!$last' style='line-height: 5px;'>" +
    "          <td colspan='6'>&nbsp;</td>" +
    "        </tr>" +
    "        <tr ng-if='$parent.$parent.ngModel.free == \"all\"'>" +
    "          <td></td>" +
    "          <td>" +
    "            <div class='free-selections-number-container'>" +
    "              <div class = 'free-selections-number-text' >Can order a maximum of </div>" +
    "              <rs-combo-box class = 'free-selections-number-combo' options='$parent.$parent.$parent.maximum' ng-model='$parent.$parent.$parent.ngModel.allMaxFree'></rs-combo-box>" +
    "              <div class = 'free-selections-number-text'>modifiers.</div>" +
    "            </div>" +
    "          </td>" +
    "          <td colspan='4'></td>" +
    "        </tr>" +
    "      </tbody>" +
    "    </table>" +
    "  </rs-multi-line>"
  };
});

/*global rockspoonUi: true */

rockspoonUi.directive("rsFocusNext", ["$timeout", function($timeout) {
  return {
    link: function($scope, element) {
      $scope.next = function() {
        return element[0].value.length >= element[0].maxLength;
      };

      $scope.$watch($scope.next, function(newValue){
        if (newValue) {
          var nextInput = element.next("input");
          $timeout(function() {
            if (nextInput.length === 1)
              nextInput[0].focus();
          }, 0, false);
        }
      });
    },
    require: ["ngModel"],
    restrict: "A"
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsForgotPassword", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.search = function() {
        $scope.$parent.search();
      };

      $scope.selectAccount = function(idx) {
        $scope.$parent.selectAccount(idx);
      };

      $scope.sendRequest = function() {
        $scope.$parent.sendRequest();
      };

      $scope.confirmPIN = function() {
        $scope.$parent.confirmPIN();
      };

      $scope.resetPassword = function() {
        $scope.$parent.resetPassword();
      };
    }],
    replace: true,
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div ng-form='form' novalidate class='rs-forgot-password'>" +
    "  <rs-tabs current-step='ngModel.currentStep' selected='ngModel.selectedStep' allow-back='true'>" +
    "    <rs-tab title='Find Your Account' step mandatory='true'>" +
    "      <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.search' label='Phone or Email'></rs-text-edit>" +
    "      <div class='footer'>" +
    "        <rs-spinner ng-show='ngModel.locked'></rs-spinner>" +
    "        <button ng-show='!ngModel.locked' ng-click='search()'><i class='icon-icons_magnifier'></i>&nbsp;Search</button>" +
    "      </div>" +
    "    </rs-tab>" +
    "    <rs-tab title='Identify your account' step mandatory='true'>" +
    "      <rs-label>These accounts are compatible with your search</rs-label>" +
    "      <div class='alert alert-danger' ng-show='ngModel.error'>" +
    "        <i class='glyphicon glyphicon-exclamation-sign'></i> {{ ngModel.error }}" +
    "      </div>" +
    "      <div ng-repeat='match in ngModel.matches'>" +
    "        <div class='rs-match-row'>" +
    "          <div class='rs-match-details'>{{ match.name }}</div>" +
    "          <div class='rs-match-button'>" +
    "            <rs-spinner ng-show='ngModel.locked'></rs-spinner>" +
    "            <button ng-show='!ngModel.locked' ng-click='selectAccount($index)'><i class='glyphicon glyphicon-ok'></i>&nbsp;This is my account</button>" +
    "          </div>" +
    "        </div> " +
    "      </div>" +
    "    </rs-tab>" +
    "    <rs-tab title='Reset your password' step mandatory='true'>" +
    "      <rs-label>How would you like to reset your password?</rs-label>" +
    "      <div ng-repeat='method in ngModel.selected.methods'>" +
    "        <rs-radio-button id='{{method}}' value='{{method}}' label='{{ ngModel.methodLabels[method] }}' ng-model='ngModel.resetMethod'></rs-radio-button>" +
    "      </div>"+
    "      <div class='footer'>" +
    "        <rs-spinner ng-show='ngModel.locked'></rs-spinner>" +
    "        <button ng-show='!ngModel.locked' ng-click='sendRequest(ngModel.resetMethod)'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>" +
    "      </div>" +
    "    </rs-tab>" +
    "    <rs-tab title='Validate sent pin' step mandatory='true'>" +
    "      <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.pin' label='Enter your six-digit confirmation code below to continue resetting your password:'></rs-text-edit>" +
    "      <div class='footer'>" +
    "        <rs-spinner ng-show='ngModel.locked'></rs-spinner>" +
    "        <button ng-show='!ngModel.locked' ng-click='confirmPIN()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>" +
    "      </div>" +
    "    </rs-tab>" +
    "    <rs-tab title='Reset your password' step mandatory='true'>" +
    "      <rs-choose-password ng-model='ngModel.credentials'></rs-choose-password>" +
    "      <div class='footer'>" +
    "        <rs-spinner ng-show='ngModel.locked'></rs-spinner>" +
    "        <button ng-show='!ngModel.locked' ng-click='resetPassword()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>" +
    "      </div>" +
    "    </rs-tab>" +
    "  </rs-tabs>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsGenericList", ["$compile", function($compile) {
  return {
    controller: ["$scope", function($scope) {
      var preprocess = function(items) {
        _.forEach(items, function(item) {
          item.selected = false;
        });
        
        return items;
      };

      $scope.searchResults = preprocess(_.cloneDeep($scope.ngModel));

      $scope.search = function(value) {
        $scope.searchResults = preprocess($scope.fetch({ value: value }));
      };

      $scope.onSelect = function(index) {
        $scope.searchResults[index].selected = !$scope.searchResults[index].selected;
        $scope.selected = _.filter($scope.searchResults, function(item) {
          return item.selected === true;
        });
      };
    }],
    restrict: 'E',
    scope: {
      isSearchable: "@",
      ngModel: "=",
      selected: "=",
      fetch: "&"
    },
    compile: function(element) {
      var template = angular.element(
        "<div class='rs-generic-list'>" +
        "  <div class='rs-search-box' ng-if='isSearchable'>" +
        "    <i class='glyphicon glyphicon-search'></i>" +
        "    <input class='inputbox' type='text' ng-model='searchValue' ng-change='search(searchValue)'>" +
        "  </div>" +
        "  <div class='rs-generic-list-results'>" +
        "    <div>" +
        "      <div ng-class='{\"rs-selected-list-item\": item.selected}' sf-virtual-repeat='item in searchResults' ng-click='onSelect($index)'>" + element.html() + "</div>" +
        "    </div>" +
        "  </div>" +
        "</div>"
      );
      element.empty();
      return function(scope, element, attr) {
        element.append(template);
        $compile(template)(scope);
      };
    }
  };
}]);



var PREVIEW_W  = 200;
var PREVIEW_H  = 200;
var BOX_W      = 330;
var BOX_H      = 330;
var REAL_BOX_W = 1024;
var REAL_BOX_H = 1024;

/*global rockspoonUi: true */
rockspoonUi.directive("rsImagePickerGeneric", function() {
  return {
    controller: ["$scope", "$modal", function($scope, $modal) {
      this.add = function() {
        var modal = $modal.open({
          windowClass: "choose-photo",
          backdrop: "static",
          template: "<div><div style='padding-top:10px;margin-left:5px;margin-right:5px;display:table'><div style='display:table-cell;width:100%;text-align:left'><div><span style='font-weight:bold'>Upload Photo </span>(from computer)</div><div style='font-size:12px;font-style:italic'>Keep the image centered in the square</div></div><div style='display:table-cell;text-align:right'><button ng-click='close()'>Cancel</button></div></div><div class='modal-body'><div style='text-align:center'><center><input style='color:white;width:1px;height:1px;border:none' id='imageResult' ng-model='obj.img' value='' type='text' /><img class='image-result' rs-image-cropped ng-model='obj.result' ng-show='obj.img' image='{{obj.img}}' /></center><rs-image-loader class='image-loader' ng-model='obj.img' ng-hide='obj.img' label='Select Photo'></rs-image-loader></div></div><div><button style='margin-top:20px;margin-bottom:8px' ng-disabled='!obj.img' ng-click='setImage()'>Upload Photo</button><br /><button style='margin-bottom:20px' ng-click='changePhoto()'>Change Photo</button></div></div>",
          controller: ["$scope", "$modalInstance", function($scope, $modalInstance) {
            $scope.obj = {
              img: null,
              result: null
            };

            $scope.changePhoto = function() {
              $scope.$broadcast("changePhoto");
            };

            $scope.setImage = function() {
              $modalInstance.close($scope.obj.result);
            };

            $scope.close = function() {
              $modalInstance.close();
            };
          }]
        });

        modal.result.then(function(model) {
          if (model)
            $scope.ngModel = model;
        });
      };
    }],
    scope: {
      ngModel: "="
    },
    require: "ngModel",
    replace: true,
    restrict: "E",
    transclude: true,
    template:
      "<ng-transclude></ng-transclude>"
  };
}).directive("rsImagePicker", function() {
  return {
    link: function(scope, elem, attrs, rsImagePickerGenericCtrl) {
      scope.open = rsImagePickerGenericCtrl.add;
    },
    controller: ["$scope", function($scope) {
      $scope.upload = function() {
        $scope.open();
      };
    }],
    require: "^rsImagePickerGeneric",
    restrict: "E",
    scope: {
      ngModel: "=",
      placeholder: "@",
      type: "@"
    },
    template:
      "<div class='rs-image-picker' ng-if='type === \"image\"'>" +
      "  <div class='rs-image-picker-empty' ng-click='upload()' ng-if='!ngModel && !ngModel.normalRes'>" +
      "    <div>" +
      "      <i class='glyphicon glyphicon-picture'></i>" +
      "      <div class='add' ng-if='placeholder'><i class='glyphicon glyphicon-camera'></i>&nbsp;{{::placeholder}}</div>" +
      "    </div>" +
      "  </div>" +
      "  <img ng-if='ngModel && !ngModel.normalRes' rs-image='{{ngModel}}' ng-click='upload()' />" +
      "  <img ng-if='ngModel.normalRes' rs-image='{{ngModel.normalRes}}' ng-click='upload()' />" +
      "</div>" +
      "<button class='rs-button' ng-click='upload()' ng-if='type !== \"image\"'>Upload</button>"
  };
}).directive("rsImage", function() {
  return {
    controller: ["$scope", "$element", function($scope, $element) {
      $scope.$watchCollection("rsImage", function() {
        if ($scope.rsImage)
          $element.attr("src", $scope.rsImage);
      });
    }],
    restrict: "A",
    scope: {
      rsImage: "@"
    }
  };
}).directive("rsImageCropped", function() {
  function createArea(w, h) {
    var canvas = $("<canvas></canvas>");
    canvas.attr("width" , w);
    canvas.attr("height", h);
    canvas.hide();

    return canvas;
  }

  function setImage(api, src, W, H, scope) {
    var w = PREVIEW_W;
    var h = PREVIEW_H;

    var x  = (W / 2) - (w / 2);
    var y  = (H / 2) - (h / 2);
    var x1 = x + w;
    var y1 = y + h;

    api.setImage(src, function() {
      this.setOptions({
        minSize: [ 80, 80 ],
        maxSize: [ BOX_W, BOX_H ],
        setSelect: [ x, y, x1, y1 ],
        bgOpacity: 0.3,
        aspectRatio: 1,
        onChange: scope.updateInfo,
        allowSelect: false,
        allowResize: true,
        trackDocument: true
      });
      this.focus();
    });
  }

  function createImageArea(image, mw, mh, isPreview) {
    var area;

    var w = image.width;
    var h = image.height;

    if (w > h) {
      if ((w > mw) || isPreview) {
        h = Math.round(h * mw / w);
        w  = mw;
      }
    }
    else if ((h > mh) || isPreview) {
      w = Math.round(w * mh / h);
      h = mh;
    }

    area = createArea();
    var squareSide = (w > h) ? w : h;

    if (isPreview)
      area = createArea(mw, mh);
    else
      area = createArea(squareSide, squareSide);

    var ctx = area.get(0).getContext("2d");
    var x = 0;
    var y = 0;

    if (isPreview) {
      x  = (mw / 2) - (w / 2);
      y  = (mh / 2) - (h / 2);
    }
    else {
      if (w > h)
        y = (w - h) / 2;
      else
        x = (h - w) / 2;
    }

    ctx.drawImage(image, 0, 0, image.width, image.height, x, y, w, h);
    area.remove();

    return {
      area:  area,
      side: squareSide
    };
  }

  return {
    controller: ["$scope", "$element", function($scope, $element) {
      $scope.$watchCollection("image", function() {
        if ($scope.image)
          $element.attr("src", $scope.image);
      });

      $scope.updateInfo = function(event) {
        var realSide = $scope.realSide;

        var x = (realSide * event.x) / BOX_W;
        var y = (realSide * event.y) / BOX_H;

        var w = (realSide * event.w) / BOX_W;
        var h = (realSide * event.h) / BOX_H;

        var area = createArea(w, h);
        var ctx = area.get(0).getContext("2d");

        ctx.drawImage($scope.realArea.get(0), x, y, w, h, 0, 0, w, h);
        $scope.ngModel = area.get(0).toDataURL("image/jpeg", 1);
        $scope.$apply();
        area.remove();
      };
    }],
    link: function(scope, element) {
      var api   = null;
      scope.img = new Image();
      element.bind("load" , function() {
        scope.img.onload = function() {
          var a = createImageArea(this, REAL_BOX_W, REAL_BOX_H, false);
          scope.realArea = a.area;
          scope.realSide = a.side;

          var src = this.src = createImageArea(this, BOX_W, BOX_H, true).area.get(0).toDataURL("image/jpeg", 1);

          this.onload = null;
          if (!api) {
            element.Jcrop({ bgColor: "#FFFFFF", addClass: 'jcrop-light' }, function() {
              setImage(api = this, src, BOX_W, BOX_H, scope);
            });
          } else
            setImage(api, src, BOX_W, BOX_H, scope);
        };

        scope.img.src = element.attr("src");
      });

      scope.$on("$destroy", function() {
        element.unbind("load");
      });
    },
    restrict: "A",
    scope: {
      image: "@",
      height: "@",
      ngModel: "=",
      width: "@"
    }
  };
}).directive("rsImageLoader", function() {
  return {
    controller: ["$scope", "$element", "$timeout", function($scope, $element, $timeout) {
      $scope.$on("changePhoto", function(e) {
        $scope.choosePicture();
      });

      $scope.choosePicture = function() {
        var input = $element.find("input:file").first();
        $timeout(function() {
          input.click();
        });
      };

      $scope.getFile = function() {
        var reader = new FileReader();
        reader.onload = function() {
          $scope.$apply(function () {
            $scope.ngModel = reader.result;
          });
        };

        reader.readAsDataURL($scope.file);
      };
    }],
    link: function($scope, element) {
      var input = element.find("input:file").first();
      input.bind("change", function(event) {
        $scope.file = (event.srcElement || event.target).files[0];
        $scope.getFile();
      });

      $scope.$on("$destroy", function() {
        input.unbind("change");
      });
    },
    replace: true,
    restrict: "E",
    scope: {
      label: "@",
      ngModel: "="
    },
    template: "<div style='background:black;display:table'><div style='display:table-cell;vertical-align:middle;width:100%;height:100%'><input type='file' accept='image/*' ng-hide='true' /><button ng-click='choosePicture()'>{{label}}</button></div></div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsIngredient", function() {
  return  {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;

      if (!scope.ngModel.free) {
        scope.ngModel.free = "none";
      }

      scope.$watch("ngModel.isOptional", function() {
        if (!scope.ngModel.isOptional) {
          scope.ngModel.hasDefault = false;
        }
      });

      scope.maximum = [{
        label: "",
        value: ""
      }];

      for (var i = 0; i < scope.ngModel.ingredients.length; ++i)
        scope.maximum.push({ value: i + 1, label: (i + 1).toString() });

      scope.$watch("ngModel.ingredients.length", function(newLength, oldLength) {
        if (newLength > oldLength) {
          scope.maximum.push({ value: newLength, label: newLength.toString() });
        }
        else if (scope.maximum.length > 1) {
          scope.maximum.pop();
          if (scope.ngModel.allMaxFree > newLength)
            scope.ngModel.allMaxFree = newLength;
        }
      });
    },

    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      sizesList: "=",
      ngModel: "="
    },
    template:
    "<div class='rs-ingredient'>" +
    "  <rs-section title='Ingredient Modifiers'>" +
    "    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-ingredients-title'></rs-text-edit>" +
    "    <rs-on-off on='Optional Modifier' off='Mandatory Modifier' ng-model='ngModel.isOptional'></rs-on-off>" +
    "    <rs-label label='Modifiers for free'></rs-label>" +
    "    <div class='free-selections-container'>" +
    "      <rs-radio-button class='free-selections' id='rs-ingredient_all{{::ngModel.id}}' value='all' label='All'    ng-model='ngModel.free'></rs-radio-button>" +
    "      <rs-radio-button class='free-selections' id='rs-ingredient_custom{{::ngModel.id}}' value='custom' label='Custom' ng-model='ngModel.free'></rs-radio-button>" +
    "      <rs-radio-button class='free-selections' id='rs-ingredient_none{{::ngModel.id}}' value='none' label='None' ng-model='ngModel.free'></rs-radio-button>" +
    "    </div>" +
    "    <rs-multi-extra-price-edit ng-if='ngModel.free == \"custom\"' sizes-list='sizesList' ng-model='ngModel.extras'></rs-multi-extra-price-edit>" +
    "    <rs-check-box class='rs-default-check' id='rs-ingredient + {{::id}}' label='With Default Option' ng-if='ngModel.isOptional' ng-model='ngModel.hasDefault'></rs-check-box>" +
    "    <rs-multi-ingredients ng-model='ngModel.ingredients' sizes-list='sizesList' default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' item-list='itemList'></rs-multi-ingredients>" +
    "  </rs-section>" +
    "</div>"
  };
}).directive("rsMultiIngredients", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        itemList  : $scope.itemList,
        rowFactory: function() {
          var tmp = moment();
          var from = moment.utc([tmp.year(), tmp.month(), tmp.date(), tmp.hours(), Math.ceil(tmp.minutes() / 5) * 5]);
          var to = from.clone();

          var extraPrices = [];

          if ($scope.sizesList.length <= 1) {
            extraPrices.push({ name: "Default", value: 0 });
          }

          else {
            for (var i = 0; i < $scope.sizesList.length; i++) {
              extraPrices.push({name: $scope.sizesList[i].name, value: 0});
            }
          }

          return {
            isNotAvailable : false,
            name           : "",
            preparationTime: new Date(0, 0, 0, 0, 0, 0),
            notAvailable   : {
              from: from,
              to  : to
            },
            extraNumber: 0,
            extraPrices: extraPrices,
            $uid       : UID.create()
          };
        }
      };
    }],
    replace   : false,
    require   : "ngModel",
    restrict  : "E",
    scope     : {
      itemList       : "=",
      ngModel        : "=",
      hasDefault     : "=",
      defaultModifier: "=",
      sizesList      : "="
    },
    template  : "" +
    "  <rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
    "    <table>" +
    "      <thead>" +
    "        <tr >" +
    "          <td>&nbsp;</td>" +
    "          <td>&nbsp;</td>" +
    "          <td class='rs-add-price-header' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>" +
    "            <div >Add Price $</div>" +
    "          </td>" +
    "          <td ng-if='$parent.hasDefault && internalModel.length > 1'>&nbsp;</td>" +
    "          <td ng-if='internalModel.length > 1'>Ingredient</td>" +
    "          <td>&nbsp;</td>" +
    "        </tr>" +
    "        <tr>" +
    "          <td>&nbsp;</td>" +
    "          <td>&nbsp;</td>" +
    "          <td class='rs-prices-header' ng-class='{ borders: $parent.$parent.sizesList.length > 1 }' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>" +
    "            <div ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</div>" +
    "            <span  ng-if='$parent.$parent.sizesList.length == 1'>Price</span>" +
    "          </td>" +
    "          <td ng-if='$parent.hasDefault && internalModel.length > 1' style='padding:0 5px'>" +
    "            <span>Default</span>" +
    "          </td>" +
    "          <td class='default-header' ng-if='internalModel.length > 1'>" +
    "            <span>not available</span>" +
    "          </td>" +
    "          <td>&nbsp;</td>" +
    "        </tr>" +
    "      </thead>" +
    "      <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
    "        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>" +
    "          <td width='30' class='remove-td'>" +
    "            <div class='remove-button'>" +
    "              <div ng-if='!$last' ng-click='remove(model)'>" +
    "                <i class='icon-icons_Delete'></i>" +
    "              </div>" +
    "            </div>" +
    "          </td>" +
    "          <td class='rs-ingredient-container' ng-class='{selected: model.isNotAvailable, leftBorder: $parent.$parent.$parent.ngModel.free != \"none\"  }'>" +
    "            <div>" +
    "              <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Ingredient' ng-change='changed(model)' ng-model='model.name' />" +
    "              <div class='line-number'>" +
    "                <div class='number'>{{$index + 1}}</div>" +
    "              </div>" +
    "              <div class='database-icon'>" +
    "                <i class='icon-icons_Database'></i>" +
    "              </div>" +
    "            </div>" +
    "            <div class='rs-preparation-time-container'>" +
    "              <div class='rs-preparation-time-text' ng-class='{\"last-preparation-time\": $last}'>Preparation time </div>" +
    "              <rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ timeSteps: [1, 1, 1], show24Hours: true }' class='rs-preparation-time'/><rs-time>" +
    "            </div>" +
    "            <div ng-if='model.isNotAvailable'>" +
    "              <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>" +
    "            </div>" +
    "          </td>" +
    "          <td class='rs-prices-container' ng-if='$parent.$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1' ng-class='{selected: model.isNotAvailable}'>" +
    "            <input currency type='text' ng-model='obj.value' ng-change='changed(model)' ng-repeat='obj in model.extraPrices' />" +
    "          </td>" +
    "          <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>" +
    "            <rs-radio-button  id='rs-ingredient_default_{{$index}}' value='{{model.name.itemId}}_{{$index}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>" +
    "          </td>" +
    "          <td class='rs-ingredient-not-available-check' ng-if='!$last'>" +
    "            <rs-check-box id='rs-ingredient_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>" +
    "          </td>" +
    "          <td class='rs-handler'>" +
    "            <div class='drag-handler handler-item' ng-if='!$last'>" +
    "              <div class='handler'>&nbsp;</div>" +
    "            </div>" +
    "          </td>" +
    "        </tr>" +
    "        <tr ng-if='!$last' style='line-height: 5px;'>" +
    "          <td colspan='6'>&nbsp;</td>" +
    "        </tr>" +
    "        <tr ng-if='$parent.$parent.ngModel.free == \"all\"'>" +
    "          <td></td>" +
    "          <td>" +
    "            <div class='free-selections-number-container'>" +
    "              <div class = 'free-selections-number-text' >Can order a maximum of </div>" +
    "              <rs-combo-box class = 'free-selections-number-combo' options='$parent.$parent.$parent.maximum' ng-model='$parent.$parent.$parent.ngModel.allMaxFree'></rs-combo-box>" +
    "              <div class = 'free-selections-number-text'>modifiers.</div>" +
    "            </div>" +
    "          </td>" +
    "          <td colspan='4'></td>" +
    "        </tr>" +
    "      </tbody>" +
    "    </table>" +
    "  </rs-multi-line>"
  };
}).directive("rsExtraPriceEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.changed = function() {
        if (_.isFunction($scope.$parent.changed))
          $scope.$parent.changed($scope.ngModel);
      };

    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<tr class='rs-extra-price-edit' ng-class='{lightgray:ngModel.$isNew}'>" +
    "  <td class='remove-button'>" +
    "    <div ng-if='!$last' ng-click='$parent.$parent.remove(ngModel)'>" +
    "      <i class='icon-icons_Delete'></i>" +
    "    </div>" +
    "  </td>" +
    "  <td class='price-text'>Enter price for</td>" +
    "  <td class='price-field'>" +
    "    <input digit type='text' ng-model='ngModel.extraNumber' ng-change='changed()' />" +
    "  </td>" +
    "  <td class='price-text'>extra options $</td>" +
    "  <td class='price-field' ng-repeat='obj in ngModel.extraPrices' >" +
    "    <input currency type='text' ng-model='obj.value' ng-change='changed()' />" +
    "  </td>" +
    "  <td class='price-text'>Total</td>" +
    "</tr>"
  };
}).directive("rsMultiExtraPriceEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          var extraPrices = [];

          if ($scope.sizesList.length <= 1) {
            extraPrices.push({ name: "Default", value: 0 });
          }

          else {
            for (var i = 0; i < $scope.sizesList.length; i++) {
              extraPrices.push({ name: $scope.sizesList[i].name, value: 0 });
            }
          }

          return {
            extraNumber: 2,
            extraPrices: extraPrices
          };
        }
      };
    }],
    replace   : false,
    require   : "ngModel",
    restrict  : "E",
    scope     : {
      ngModel   : "=",
      sizesList : "="
    },
    template  :
    "<rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
    "  <table class='rs-extra-price-edit-table'>" +
    "    <tr ng-if='$parent.$parent.ngModel.free == \"custom\"'>" +
    "      <td></td>" +
    "      <td colspan='3'><rs-label>Enter maximum number of free modifiers</rs-label></td>" +
    "      <td colspan='2' class='max-free'><input digit placeholder='-' ng-model='$parent.$parent.$parent.ngModel.customMaxFree'/></td>" +
    "    </tr>" +
    "    <tr ng-if='$parent.sizesList.length > 1'>" +
    "      <td colspan='4'>&nbsp;</td>" +
    "      <td ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</td>" +
    "      <td></td>" +
    "    </tr>" +
    "    <tr class='rs-extra-price-edit' ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>" +
    "      <td class='remove-button'>" +
    "        <div ng-if='!$last' ng-click='remove(model)'>" +
    "          <i class='icon-icons_Delete'></i>" +
    "        </div>" +
    "      </td>" +
    "      <td class='price-text'>Enter price for</td>" +
    "      <td class='price-field'>" +
    "        <input digit type='text' ng-model='model.extraNumber' ng-change='changed(model)' />" +
    "      </td>" +
    "      <td class='price-text'>extra options $</td>" +
    "      <td class='price-field' ng-repeat='obj in model.extraPrices' >" +
    "        <input currency type='text' ng-model='obj.value' ng-change='changed(model)' />" +
    "      </td>" +
    "      <td class='price-text'>Total</td>" +
    "    </tr>" +
    "  </table>" +
    "</rs-multi-line>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsIngredientsView", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
      $scope.nextStep = function() {
        $scope.currentStep++;
      };
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      currentStep: "=",
      selected: "=",
      options: "="
    },
    template:
    "<div class='rs-ingredients-view'>" +
    "  <rs-section>" +
    "    <div class='rs-next-step'>" +
    "      <button class='rs-button' ng-click='nextStep()'>Continue <i class='icon-icons_ArrowRight'></i></button>" +
    "    </div>" +
    "    <rs-tabs current-step='currentStep' selected='selected'>" +
    "      <rs-tab title='General Information' step mandatory='true'>" +
    "         <rs-section>" +
    "           <rs-title-description ng-model='ngModel' type='House Made Ingredient'></rs-title-description>" +
    "         </rs-section>" +
    "      </rs-tab>" +
    "      <rs-tab title='Recipes' step>" +
    "        <rs-section title='Coming Soon!'></rs-section>" +
    "      </rs-tab>" +
    "      <rs-tab title='Tags' step>" +
    "        <rs-item-tags ng-model='ngModel' tag-options='options.tagOptions'></rs-item-tags>" +
    "      </rs-tab>" +
    "      <rs-tab title='Photos' step>" +
    "        <rs-item-photos ng-model='ngModel'></rs-item-photos>" +
    "      </rs-tab>" +
    "    </rs-tabs>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsInvoiceInfo", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.model = _.clone($scope.ngModel);

      $scope.cancel = function() {
        $scope.ngModel = _.clone($scope.model);
      };

      $scope.list = function() {
        var cb = function(err, result) {
          if (err)
            $scope.ngModel.supplierName = "";
          else if (result) {
            $scope.ngModel.supplierName = result.name;
          }
          $scope.$apply();
        };
        $scope.listOptions({ cb: cb });
      };

      $scope.$watch(function() {
        return $scope.ngModel;
      }, function() {
        $scope.ngModel.totalPrice = $scope.ngModel.bottles * $scope.ngModel.unitPrice;
      }, true);
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      listOptions : "&",
      ngModel : "=",
      save : "&"
    },
    template: "<div class='rs-invoice-info'><table><tr><td class='rs-date'><rs-label>Date</rs-label></td><td class='rs-supplier'><rs-label>Supplier Name</rs-label></td><td class='rs-invoice'><rs-label>Invoice Number</rs-label></td><td class='rs-small'><rs-label>Bottles</rs-label></td><td class='rs-date'><rs-label>$ Unit Price</rs-label></td><td class='rs-date'><rs-label>$ Total Price</rs-label></td><td class='rs-small'>&nbsp;</td><td class='rs-small'>&nbsp;</td></tr><tr><td><rs-year-date ng-model='ngModel.date' start-date='ngModel.start'></rs-year-date></td><td class='rs-supplier'><button class='rs-button' ng-click='add()'><i class='icon-icons_SaveAsDraft'></i><span ng-if = '!ngModel.supplierName'>&nbsp;Add from supplier list</span><span ng-if = 'ngModel.supplierName'>&nbsp;{{ ngModel.supplierName }}</span></button></td><td><rs-text-edit ng-model='ngModel.invoiceNumber'></rs-text-edit></td><td><rs-text-edit ng-model='ngModel.bottles'></rs-text-edit></td><td><rs-text-edit ng-model='ngModel.unitPrice'></rs-text-edit></td><td><rs-text-edit ng-disabled='true' ng-model='ngModel.totalPrice'></rs-text-edit></td><td><button class='rs-button' ng-click='save()'>&nbsp;Save</button></td><td><button class='rs-button' ng-click='cancel()'>&nbsp;Cancel</button></td></tr></table></div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsItemGeneralInfo", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-item-general-info'>" +
    "  <rs-section>" +
    "    <rs-title-description ng-model='ngModel' type='Item' show-abbreviation='true'></rs-title-description>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-check-box id='item_rateable{{::uid}}' ng-model='ngModel.isRateable' label='Rateable by customers'></rs-check-box>" +
    "  </rs-section>" +
    "  <rs-section title='Daily Availability'>" +
    "    <div class='free-selections-container'>" +
    "      <rs-radio-button class='free-selections' id='rs-item_same-as-menu{{::uid}}' value='same' label='Same as Menu' ng-model='ngModel.availability'></rs-radio-button>" +
    "      <rs-radio-button class='free-selections' id='rs-item_different-than-menu{{::uid}}' value='different' label='Different than Menu' ng-model='ngModel.availability'></rs-radio-button>" +
    "      <rs-radio-button class='free-selections' id='rs-item_not-available{{::uid}}' value='none' label='Item Not Available' ng-model='ngModel.availability'></rs-radio-button>" +
    "      <br style='clear: both;' />" +
    "    </div>" +
    "  </rs-section>" +
    "  <rs-section title='Available on:' ng-if='ngModel.availability == \"same\"'>" +
    "    <rs-available-on ng-model='ngModel.menuAvailability'></rs-available-on>" +
    "  </rs-section>" +
    "  <rs-section title='Availability Period' ng-if='ngModel.availability == \"different\"'>" +
    "    <rs-availability-period ng-model='ngModel.availabilityPeriod'></rs-availability-period>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsItemPhotos", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-item-photos'>" +
    "  <rs-section>" +
    "    <rs-photos gallery='ngModel.photos'></rs-photos>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsItemSettings", function() {
  return {
    require: "ngModel",
    restrict: "E",
    replace: true,
    scope: {
      ngModel: "=",
      options: "=",
      sizes: "="
    },
    template:
    "<div class='rs-item-settings'>" +
    "  <rs-section>" +
    "    <p>Settings Name</p>" +
    "    <rs-auto-complete class='auto' ng-model='ngModel.settingsName' src-list='settingsList' icon-class-name='icon-icons_Database' placeholder='Enter settings name.'></rs-auto-complete>" +
    "    <i class= 'description'>Add a name for these settings in order to use them from another item.</i>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-size-price show-info='true' ng-model='ngModel.sizePrice'></rs-size-price>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-cooking-modifiers ng-model='ngModel.cookingModifiers'></rs-cooking-modifiers>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-ingredient ng-model='ngModel.ingredientModifiers' sizes-list='sizes' item-list='options.ingredients'></rs-ingredient>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-sides ng-model='ngModel.sides' sizes-list='sizes' item-list='options.sides'></rs-sides>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-optional-modifiers ng-model='ngModel.modifiersRemove' type='Remove' item-list='options.removeModifiers'></rs-optional-modifiers>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-extra-modifiers ng-model='ngModel.extras' sizes-list='sizes' item-list='options.extraModifiers'></rs-extra-modifiers>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-optional-modifiers ng-model='ngModel.modifiersOnTheSide' type='On the Side' item-list='options.sideModifiers'></rs-optional-modifiers>" +
    "  </rs-section>" +
    "<div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsItemTags", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      tagOptions: "="
    },
    template:
    "<div class='rs-item-tags'>" +
    "  <rs-section title='Categories'>" +
    "    <rs-section title='Cuisine'>" +
    "      <rs-section title='Suggested by Rockspoon' ng-if='ngModel.cuisines.rockspoon.length > 0'>" +
    "        <rs-suggested-tags ng-model='ngModel.cuisines.rockspoon' tags-list='tagOptions.cuisines'></rs-suggested-tags>" +
    "      </rs-section>" +
    "      <rs-section title='Added by Restaurant'>" +
    "        <rs-tags ng-model='ngModel.cuisines.restaurant' tags-list='tagOptions.cuisines'></rs-tags>" +
    "      </rs-section>" +
    "    </rs-section>" +
    "    <rs-section title='Diet' separator='true'>" +
    "      <rs-section title='Suggested by Rockspoon' ng-if='ngModel.diets.rockspoon.length > 0'>" +
    "        <rs-suggested-tags ng-model='ngModel.diets.rockspoon' tags-list='tagOptions.diets'></rs-suggested-tags>" +
    "      </rs-section>" +
    "      <rs-section title='Added by Restaurant'>" +
    "        <rs-tags ng-model='ngModel.diets.restaurant' tags-list='tagOptions.diets'></rs-tags>" +
    "      </rs-section>" +
    "    </rs-section>" +
    "    <rs-section title='Food Description' separator='true'>" +
    "      <rs-section>" +
    "        <rs-tags ng-model='ngModel.foodDesc' tags-list='tagOptions.foodDesc'></rs-tags>" +
    "      </rs-section>" +
    "    </rs-section>" +
    "    <rs-section separator='true'>" +
    "      <rs-section class='no-padding'>" +
    "        <rs-allergens-tags ng-model='ngModel.allergens' allergens-list='tagOptions.allergens'></rs-allergens-tags>" +
    "      </rs-section>" +
    "    </rs-section>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsItemView", function() {
  return  {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
      $scope.nextStep = function() {
        $scope.currentStep++;
      };
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      currentStep: "=",
      selected: "=",
      options: "="
    },
    template:
    "<div class='rs-item-view'>" +
    "  <rs-section>" +
    "    <div class='rs-next-step'>" +
    "      <button class='rs-button' ng-click='nextStep()'>Continue <i class='icon-icons_ArrowRight'></i></button>" +
    "    </div>" +
    "    <rs-tabs current-step='currentStep' selected='selected'>" +
    "      <rs-tab title='General Information' step mandatory='true'>" +
    "        <rs-item-general-info ng-model='ngModel'></rs-item-general-info>" +
    "      </rs-tab>" +
    "      <rs-tab title='Items Settings & Price' step mandatory='true'>" +
    "        <rs-item-settings ng-model='ngModel' sizes='ngModel.sizePrice.sizes' options='options.itemSettings'></rs-item-settings>" +
    "      </rs-tab>" +
    "      <rs-tab title='Printing Settings' step mandatory='true'>" +
    "        <rs-section title='Work in Progress!'></rs-section>" +
    "      </rs-tab>" +
    "      <rs-tab title='Recipes & Nutrition Facts' step>" +
    "        <rs-section title='Coming Soon!'></rs-section>" +
    "      </rs-tab>" +
    "      <rs-tab title='Tags' step>" +
    "        <rs-item-tags ng-model='ngModel' tag-options='options.tagOptions'></rs-item-tags>" +
    "      </rs-tab>" +
    "      <rs-tab title='Photos' step>" +
    "        <rs-item-photos ng-model='ngModel'></rs-item-photos>" +
    "      </rs-tab>" +
    "      <rs-tab title='Shared With' step>" +
    "        <rs-section title='Coming Soon!'></rs-section>" +
    "      </rs-tab>" +
    "    </rs-tabs>" +
    "  </rs-section>" +
    "</div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsLabel", ["$compile", function($compile) {
  return {
    link: function($scope, elm, attrs, ctrl, transclude) {
      transclude($scope, function(clone, scope) {
        var html = clone.html();
        if (html === null || html === undefined)
          elm.append($compile("<div class='rs-label'><span><label>{{::label}}</label></span></div>")($scope));
        else
          elm.append($compile("<div class='rs-label'><span><label>" + html + "</label></span></div>")(scope.$parent));
      });
    },
    replace: true,
    restrict: "E",
    scope: {
      label: "@"
    },
    template: "<div></div>",
    transclude: true
  };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive("rsLink", [function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      label: "@",
      action: "&"
    },
    template: "<a class='rs-link' ng-click='action()'>{{::label}}</a>"
  };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive("rsMap", ["$timeout", function($timeout) {
  return {
    link: function(scope, elem, attr, ctrl) {
      if (!scope.ngModel)
        scope.ngModel = [];

      ctrl.$setValidity("area", scope.ngModel.length > 0);

      var selectedShape = null;

      var mapOptions = {
        zoom  : scope.options.mapZoom || 12,
        center: new google.maps.LatLng(scope.options.mapCenter.latitude, scope.options.mapCenter.longitude)
      };

      var polyOptions = {
        strokeWeight: scope.options.polygonStrokeWeight || 1,
        fillOpacity : scope.options.polygonFillOpacity  || 0.45
      };

      var map = new google.maps.Map(elem[0].childNodes[0], mapOptions);
      var deleteControlDiv = document.createElement("div");
      deleteShapeControl(deleteControlDiv, map);
      deleteControlDiv.index = 1;

      var polygonCoords = [];
      for (var i = 0; i < scope.ngModel.length; i += 2)
        polygonCoords.push(new google.maps.LatLng(scope.ngModel[i], scope.ngModel[i + 1]));

      var polygon = new google.maps.Polygon({
        paths       : polygonCoords,
        strokeWeight: scope.options.polygonStrokeWeight || 1,
        fillOpacity : scope.options.polygonFillOpacity  || 0.45
      });

      var drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode           : google.maps.drawing.OverlayType.POLYGON,
        drawingControl        : true,
        polygonOptions        : polyOptions,
        map                   : map,
        drawingControlOptions : {
          position    : google.maps.ControlPosition.TOP_CENTER,
          drawingModes: [
            google.maps.drawing.OverlayType.POLYGON
          ]
        }
      });

      if (scope.options.showPin) {
        var marker = new google.maps.Marker({
          map       : map,
          draggable : false,
          position  : mapOptions.center,
          title     : scope.options.pinTitle
        });
      }

      google.maps.event.addListener(drawingManager, "polygoncomplete", getPolygonData);

      if (scope.ngModel.length > 0) {
        polygon.setMap(map);
        setSelection(polygon);
        drawingManager.setDrawingMode(null);
        drawingManager.setOptions({
          drawingControl: false
        });
      }
      else {
        drawingManager.setMap(map);
      }

      function clearSelection() {
        if (selectedShape)
          selectedShape = null;
      }

      function setSelection(shape) {
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(deleteControlDiv);
        clearSelection();

        selectedShape = shape;
        drawingManager.setDrawingMode(null);
        drawingManager.setOptions({
          drawingControl: false
        });
      }

      function deleteShapeControl(controlDiv) {
        var controlUI = document.createElement("div");
        controlUI.className = scope.options.deleteControlClassName;
        controlUI.title = scope.options.deleteControlTitle;
        controlUI.innerHTML = scope.options.deleteControlText;
        controlDiv.appendChild(controlUI);
        google.maps.event.addDomListener(controlUI, "click", deleteSelectedShape);
      }

      function deleteSelectedShape() {
        while(scope.ngModel.length > 0)
          scope.ngModel.pop();

        map.controls[google.maps.ControlPosition.TOP_CENTER].clear();

        if (selectedShape)
          selectedShape.setMap(null);

        drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
        drawingManager.setOptions({
          drawingControl: true
        });

        $timeout(function() {
          scope.$apply(function() {
            ctrl.$setValidity("area", false);
          });
        });
      }

      function getPolygonData(e) {
        var vertices = e.getPath();
        for (var i = 0; i < vertices.getLength(); ++i) {
          var xy = vertices.getAt(i);
          scope.ngModel.push(xy.lat());
          scope.ngModel.push(xy.lng());
        }

        var newShape = e;
        setSelection(newShape);

        if (!scope.$$phase) {
          scope.$apply(function() {
            ctrl.$setValidity("area", scope.ngModel.length > 0);
            ctrl.$setViewValue(scope.ngModel);
          });
        }
      }

      scope.$watchCollection("ngModel", function() {
        if (google && (scope.ngModel.length === 0))
          deleteSelectedShape();
      });
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      options: "="
    },
    template: "<div class='rs-map'><div class='rs-map-container'></div></div>"
  };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive("rsMenuBar", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      title: "@"
    },
    template:
      "<div class='rs-menu-bar'>" +
      "  <div class='rs-menu-bar-title' ng-bind='title'></div>" +
      "  <div class='rs-menu-bar-items' ng-transclude></div>" +
      "</div>",
    transclude: true
  };
}).directive("rsMenuBarButtons", function() {
  return {
    controller: ["$scope", function($scope) {
      var self = this;

      this.resize = function() {
        $scope.isHorizontal = $(window).width() <= $scope.minWidth;
      };

      this.onResize = function() {
        $scope.$apply(function() {
          self.resize();
        });
      };
    }],
    link: function(scope, element, attr, ctrl) {
      $(window).resize(ctrl.onResize);
      scope.$on("$destroy", function() {
        $(window).off("resize");
      });

      ctrl.resize();
    },
    replace: true,
    restrict: "E",
    scope: {
      title: "@",
      iconClass: "@",
      minWidth: "@"
    },
    template:
    "<div>" +
    "  <div class='rs-menu-bar-buttons' ng-transclude ng-show='!isHorizontal'></div>" +
    "  <rs-menu-bar-dropdown title='{{title}}' icon-class='{{iconClass}}' ng-show='isHorizontal'>" +
    "    <ng-transclude></ng-transclude>" +
    "  </rs-menu-bar-dropdown>" +
    "</div>",
    transclude: true
  };
}).directive("rsMenuBarDropdown", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      title: "@",
      iconClass: "@"
    },
    template:
      "<span class='rs-menu-bar-dropdown dropdown' dropdown on-toggle='toggled(open)'>" +
      "  <a href class='dropdown-toggle' dropdown-toggle>" +
      "    <span class='{{iconClass}}'></span>" +
      "    {{title}}" +
      "    <b class='caret'></b>" +
      "  </a>" +
      "  <ul class='dropdown-menu'>" +
      "    <ng-transclude></ng-transclude>" +
      "  </ul>" +
      "</span>",
    transclude: true
  };
}).directive("rsMenuBarDropdownLink", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      iconClass: "@"
    },
    template:
    "<li class='rs-menu-bar-dropdown-link'>" +
    "  <span class='{{iconClass}}'></span>" +
    "  <div ng-transclude></div>" +
    "</li>",
    transclude: true
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsMenuForm", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-menu-form'>" +
    "  <rs-section>" +
    "    <rs-title-description ng-model='ngModel' type='Menu'></rs-title-description>" +
    "  </rs-section>" +
    "  <rs-section  separator='true'>" +
    "    <rs-availability-period ng-model='ngModel.availabilityPeriod'></rs-availability-period>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsMenu", function() {
  return {
    controller: ["$scope", function($scope) {
      var self = this;

      this.resize = function() {
        $scope.isHorizontal = $(window).width() <= $scope.minWidth;
      };

      this.onResize = function() {
        $scope.$apply(function() {
          self.resize();
        });
      };
    }],
    link: function(scope, element, attr, ctrls) {
      var ctrl = ctrls[1];
      $(window).resize(ctrl.onResize);
      scope.$on("$destroy", function() {
        $(window).off('resize');
      });

      ctrl.resize();
    },
    replace: true,
    restrict: "E",
    require: ["ngModel", "rsMenu"],
    scope: {
      currentStep: "=",
      ngModel: "=",
      minWidth: "=",
      controllerWidth: "="
    },
    template:
    "<div class='rs-menu' ng-class='{ \"vertical\": !isHorizontal }'>" +
    "  <div class='rs-control-vertical' rs-viewport ng-show='!isHorizontal' style='width: {{controllerWidth}}px'>" +
    "    <rs-menu-control-vertical current-step='currentStep' ng-model='ngModel'></rs-menu-control-vertical>" +
    "  </div>" +
    "  <div class='rs-control-horizontal' rs-viewport ng-show='isHorizontal'>" +
    "    <rs-menu-control-horizontal current-step='currentStep' ng-model='ngModel'></rs-menu-control-horizontal>" +
    "  </div>" +
    "  <div class='rs-content' ng-transclude></div>" +
    "</div>",
    transclude: true
  };
}).directive("rsMenuControlVertical", ["$compile", function($compile) {
  function calculateHeight(idx, models, templates, stopSameLevel) {
    if (models === null || models === undefined || !models.length)
      return 0;

    var height = stopSameLevel ? 0 : templates[models[idx].level].height;
    var findNextLevel = -1;

    var level = models[idx].level;
    for (var i = idx + 1; i < models.length; ++i) {
      var model = models[i];
      if (stopSameLevel && model.level <= level)
        break;

      if (findNextLevel !== -1 && model.level > findNextLevel)
        continue;

      height += templates[model.level].height;
      findNextLevel = model.isOpen ? -1 : model.level;
    }

    return height;
  }

  function createRowTemplates($element, models) {
    var templates = {};
    _.forEach(models, function(model) {
      if (templates[model.level] === null || templates[model.level] === undefined) {
        var template = angular.element("<rs-menu-item-vertical level='" + model.level + "' class='rs-menu-item rs-level" + model.level + "'></rs-menu-item-vertical>");
        $element.append(template);
        templates[model.level] = {
          height: template.height(),
          template: template,
          cache: []
        };
        template.remove();
      }
    });

    return templates;
  }

  return {
    controller: ["$scope", "$element", function($scope, $element) {
      var self = this;

      var templates = createRowTemplates($element, $scope.ngModel);
      $element.height(calculateHeight(0, $scope.ngModel, templates, false));

      this.toggle = function(toggledModel) {
        var idx = _.findIndex($scope.ngModel, function(model) {
          return toggledModel === model;
        });

        var height = calculateHeight(idx, $scope.ngModel, templates, true);
        $element.height($element.height() + (height * (toggledModel.isOpen ? 1 : -1)));
        self.update();
      };

      this.selected = function(selectedModel) {
        _.forEach($scope.ngModel, function(model) {
          model.selected = false;
        });

        selectedModel.selected = true;
      };

      this.update = function() {
        var port = {
          top: self.viewport.scrollTop(),
          bottom: self.viewport.scrollTop() + (self.viewport.outerHeight())
        };

        var bounds = { top: 0, bottom: 0 };

        _.forEach($element.children(), function(entry) {
          if ($(entry).scope !== null && $(entry).scope !== undefined) {
            if ($(entry).is(":visible"))
              templates[$(entry).attr("level")].cache.push($(entry));
            $(entry).hide();
          }
        });

        var findNextLevel = -1;
        for (var i = 0; i < $scope.ngModel.length; ++i) {
          if (bounds.top >= (port.bottom * 2))
            break;

          var model = $scope.ngModel[i];
          var template = templates[model.level];
          if (findNextLevel !== -1 && model.level > findNextLevel)
            continue;

          findNextLevel = -1;
          bounds.bottom += template.height;

          if (!(bounds.top <= port.top && bounds.bottom <= port.top)) {
            var cache = templates[model.level].cache;

            var entry;
            if (cache.length) {
              entry = cache[0];
              cache = templates[model.level].cache = cache.slice(1);

              entry.scope().ngModel = model;
              entry.scope().currentStep = $scope.currentStep;
            } else {
              entry = templates[model.level].template.clone();
              entry.hide();
              $element.append(entry);
              var scope = $scope.$new();
              scope.ngModel = model;
              scope.currentStep = $scope.currentStep;
              $compile(entry)(scope, undefined, { transcludeControllers: self });
            }

            entry.css({"top": bounds.top + "px", "z-index": i});
            entry.show();
          }

          bounds.top = bounds.bottom;

          if (!model.isOpen)
            findNextLevel = model.level;
        }
      };

      this.onUpdate = function() {
        $scope.$apply(function() {
          self.update();
        });
      };
    }],
    link: function($scope, element, attr, ctrls) {
      var ctrl = ctrls[1];
      ctrl.viewport = ctrls[0].viewport;
      ctrl.viewport.css({"overflow-y": "auto", "display": "block"});

      ctrl.viewport.bind('scroll', ctrl.onUpdate);
      $(window).resize(ctrl.onUpdate);

      $scope.$on("$destroy", function() {
        $(window).off('resize');
        ctrl.viewport.unbind('scroll');
      });

      $scope.$watch("currentStep", function() {
        var old = null;
        var hasMoreSteps = false;
        _.forEach($scope.ngModel, function(model) {
          if (model.selected)
            old = model;
          if (model.step === $scope.currentStep) {
            hasMoreSteps = true;
            model.selected = true;
          } else
            model.selected = false;
        });

        if (!hasMoreSteps && old)
          old.selected = true;

        _.forEach(element.children(), function(entry) {
          if ($(entry).scope !== null && $(entry).scope !== undefined && $(entry).is(":visible")) {
            $(entry).scope().currentStep = $scope.currentStep;
            if ($scope.currentStep === $(entry).scope().ngModel.step)
              $scope.$emit("menu-clicked", $(entry).scope().ngModel.id);
          }
        });
      });

      ctrl.update();
    },
    replace: true,
    require: [ "^rsViewport", "rsMenuControlVertical" ],
    restrict: "E",
    scope: {
      currentStep: "=",
      ngModel: "="
    },
    template: "<div class='rs-menu-control-vertical'></div>"
  };
}]).directive("rsMenuItemVertical", function() {
  return {
    link: function($scope, element, attr, ctrl) {
      $scope.clicked = function() {
        if (!_.isUndefined($scope.ngModel.step) && $scope.currentStep < $scope.ngModel.step)
          return;

        if ($scope.ngModel.hasSubmenu) {
          $scope.ngModel.isOpen = !$scope.ngModel.isOpen;
          ctrl.toggle($scope.ngModel);
        } else {
          ctrl.selected($scope.ngModel);
          $scope.$emit("menu-clicked", $scope.ngModel.id);
        }
      };
    },
    replace: true,
    require: "^rsMenuControlVertical",
    restrict: "E",
    template:
      "<div ng-click='clicked()' ng-class='{selected:ngModel.selected, disabled:currentStep < ngModel.step}'>" +
      "  <table>" +
      "    <tr>" +
      "      <td class='rs-menu-item-toggle' ng-if='ngModel.hasSubmenu'>" +
      "        <i ng-class='{\"icon-icons_ArrowDown\":ngModel.isOpen, \"icon-icons_ArrowUp\":!ngModel.isOpen}'></i>" +
      "      </td>" +
      "      <td ng-if='ngModel.icon' class='rs-icon'>" +
      "        <i class='{{ngModel.icon}}'></i>" +
      "      </td>" +
      "      <td style='width:30px' ng-if='ngModel.step'>" +
      "        <div class='rs-step-container'>" +
      "          <div class='rs-step'>Step</div>" +
      "          <div style='margin-top:-3px'>{{ngModel.step}}</div>" +
      "        </div>" +
      "      </td>" +
      "      <td>{{ngModel.title}}</td>" +
      "    </tr>" +
      "  </table>" +
      "</div>"
  };
}).directive("rsMenuControlHorizontal", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.selected = function(selectedItem) {
        _.forEach($scope.ngModel, function(model) {
          model.selected = false;
        });
        selectedItem.selected = true;
        $scope.selectedItem = selectedItem;
      };

      $scope.isOpen = function(selectedModel) {
        _.forEach($scope.ngModel, function(model) {
          model.isOpen = false;
        });
        selectedModel.isOpen = true;
        $scope.selectedModel = selectedModel;
      };
    }],
    link: function($scope, element) {
      function getNestedChildren(arr, parent) {
        var out = [];
        for(var i in arr) {
          arr[i].isOpen = false;
          if(arr[i].parentId == parent) {
            var children = getNestedChildren(arr, arr[i].id);

            if(children.length) {
              arr[i].children = children;
            }
            out.push(arr[i]);
          }
        }
        return out;
      }

      var fixModel = function() {
        if (!$scope.ngModel)
          $scope.ngModel = [];

        $scope.internalModel = getNestedChildren($scope.ngModel);
      };

      $scope.$watchCollection("ngModel", function() {
        fixModel();
      });

      $scope.clicked = function(model) {
        if (!_.isUndefined(model.step) && $scope.currentStep < model.step)
          return;

        if (!model.parentId) {
          $scope.isOpen(model);
        } else {
          $scope.selected(model);
          $scope.$emit("menu-clicked", model.id);
        }
      };

      $scope.$watch("currentStep", function() {
        var old = null;
        var parent = null;
        var hasMoreSteps = false;
        _.forEach($scope.ngModel, function(model) {
          if (!model.parentId)
            parent = model;
          if (model.selected)
            old = model;
          if (model.step === $scope.currentStep) {
            hasMoreSteps = true;
            model.selected = true;
            $scope.selectedItem = model;
          } else
            model.selected = false;

          if (!_.isUndefined($scope.selectedItem)  && $scope.selectedItem.parentId === parent.id)
            $scope.clicked(parent);

        });

        if (!hasMoreSteps && old) {
          old.selected = true;
          $scope.selectedItem = old;
        }
        $scope.$emit("menu-clicked", $scope.selectedItem.id);
      });
    },
    replace: true,
    restrict: "E",
    scope: {
      currentStep: "=",
      ngModel: "="
    },
    template:
      "<div class='rs-menu-control-horizontal'>" +
      "  <div class='rs-menu-parent-items'>" +
      "    <div sly-repeat='item in internalModel'  ng-click='clicked(item)' ng-class='{isOpen:item.isOpen}'>{{item.title}}</div>" +
      "  </div>" +
      "  <div class='rs-menu-child-items' ng-show='selectedModel'>" +
      "    <div ng-repeat='item in selectedModel.children' ng-click='clicked(item)' ng-class='{selected:item.selected, disabled:currentStep < item.step}'>" +
      "      <div class='rs-step-container' ng-if='item.step'>" +
      "        <div class='rs-step'>Step</div>" +
      "        <div style='margin-top:-3px'>{{item.step}}</div>" +
      "     </div>" +
      "     <rs-radio-button class='free-selections' id='rs-menu-item{{::item.id}}' value='{{item.id}}' label='{{item.title}}' ng-model='$parent.selectedItem.id' ng-disabled='currentStep < item.step'></rs-radio-button>" +
      "    </div>" +
      "  </div>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsMultiLine", ["UID", "focus", function(UID, focus) {
  return {
    link: function($scope, elm, attrs, ctrl, transclude) {
      if (!_.isObject($scope.ngOpts))
        throw new Error("Must pass the ng-opts");

      if (!_.isFunction($scope.ngOpts.rowFactory))
        throw new Error("Must pass a row factory in ng-options");

      $scope.uid = UID.create();

      transclude($scope, function(clone, scope) {
        elm.append(clone);
      });

      var cloneModel = function() {
        if (!$scope.ngModel)
          $scope.ngModel = [];

        $scope.internalModel = _.clone($scope.ngModel);

        var obj = $scope.ngOpts.rowFactory();
        obj.$isNew = true;

        $scope.internalModel.push(obj);
      };

      $scope.remove = function(model) {
        if (_.isFunction($scope.ngOpts.onBeforeRowRemove))
          $scope.ngOpts.onBeforeRowRemove(model, $scope);
        else
          $scope.performRemove(model);
      };

      $scope.performRemove = function(model) {
        elm.parent().removeClass("ng-pristine");
        _.pull($scope.ngModel, model);
        _.pull($scope.internalModel, model);

        if (_.isFunction($scope.ngOpts.onRowRemoved))
          $scope.ngOpts.onRowRemoved(model);

        focus($scope.uid);
        focus($scope.uid + "_last");
      };

      $scope.changed = function(model) {
        elm.removeClass("ng-pristine");
        if (!_.isUndefined(model.$isNew)) {
          delete model.$isNew;
          $scope.ngModel.push(model);
          cloneModel();

          if (elm.find("#" + $scope.uid + "_last").length)
            focus($scope.uid);
        } else if (_.isString($scope.ngOpts.autoDeleteKey) && !_.isUndefined(model[$scope.ngOpts.autoDeleteKey]) &&
          !model[$scope.ngOpts.autoDeleteKey].length) {

          $scope.remove(model);
        }
      };

      $scope.$watchCollection("ngModel", function() {
        cloneModel();
      });

      $scope.$watch(function() {
        return $scope.internalModel;
      }, function(newM, oldM) {
        if (_.isFunction($scope.$parent.changed))
          $scope.$parent.changed(newM, oldM);
      }, true);

      $scope.sortableOptions = {
        cursor: "move",
        handle: ".handler",
        stop: function() {
          $scope.ngModel.length = 0;
          for (var i = 0; i < $scope.internalModel.length - 1; ++i)
            $scope.ngModel.push($scope.internalModel[i]);

          if (_.isFunction($scope.ngOpts.onMove))
            $scope.ngOpts.onMove();
        },
        items: "tr:not(.not-sortable)"
      };
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      ngOpts: "=",
      showValidation: "="
    },
    template: "<div></div>",
    transclude: true
  };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive("rsNavbar", function() {
  return {
    replace: true,
    restrict: "E",
    template: "<div class='rs-navbar'><div class='rs-navbar-wrapper' ng-transclude></div></div>",
    transclude: true
  };
}).directive("rsQuickMenu", function() {
  return {
    controller: ["$scope", function($scope) {
      this.selected = function(selectedModel) {
        _.forEach($scope.links, function(model) {
          model.selected = false;
        });

        selectedModel.selected = true;
      };

      this.addLink = function(link) {
        $scope.links.push(link);
      };

      $scope.open = false;
      $scope.links = [];
      $scope.toggle = function() {
        $scope.open = !$scope.open;
      };
    }],
    replace: true,
    restrict: "E",
    template: "<div class='rs-navbar-menu' ng-click='toggle()'>" +
    "<div class='rs-navbar-menu-icon' ng-class='{ selected : open }'><div class='icon-icons_QuickMenu'></div></div>" +
    "<div class='rs-navbar-menu-bubble' ng-class='{ selected : open }' ng-transclude></div>" +
    "</div>",
    transclude: true
  };
}).directive("rsQuickMenuLink", function() {
  return {
    link: function($scope, element, attr, rsQuickMenu) {
      rsQuickMenu.addLink($scope);
      $scope.clicked = function() {
        rsQuickMenu.selected($scope);
      };
    },
    replace: true,
    require: "^rsQuickMenu",
    restrict: "E",
    scope: {
      iconClass: "@",
      selected: "@"
    },
    template: "<div class='rs-navbar-menu-circle' ng-class='{\"selected\": selected }' ng-click='clicked()'>" +
    "<span class='{{iconClass}}'></span>" +
    "<div ng-transclude></div>" +
    "<div>",
    transclude: true
  };
}).directive("rsNavbarLogo", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      logoClass: "@"
    },
    template: "<div class='rs-navbar-logo'><span class='{{logoClass}}'></span></div>"
  };
}).directive("rsNavbarTitle", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      description: "@"
    },
    template: "<div class='rs-navbar-title'>" +
    "<div><ng-transclude></ng-transclude>" +
    "<div class='rs-title-description' title='{{description}}'>{{description}}</div>" +
    "</div></div>",
    transclude: true
  };
}).directive("rsNavbarDropdown", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template: "<span class='rs-navbar-dropdown dropdown' dropdown on-toggle='toggled(open)'>" +
    "<a href class='dropdown-toggle' dropdown-toggle>" +
    "<img class='rs-navbar-avatar' ng-src='{{ngModel.avatar}}' ng-if='ngModel.avatar' />" +
    "<span class='icon-icons_Avatar' ng-if='!ngModel.avatar'></span>" +
    "{{ngModel.fullName}}" +
    "<b class='caret'></b>" +
    "</a>" +
    "<ul class='dropdown-menu'><ng-transclude></ng-transclude></ul>",
    transclude: true
  };
}).directive("rsNavbarDropdownLink", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      iconClass: "@",
      thumb: "="
    },
    template: "<li class='rs-dropdown-link'>" +
    "<img class='rs-navbar-avatar' ng-src='{{thumb}}' ng-if='thumb' />" +
    "<span class='{{iconClass}}' ng-if='!thumb'></span>" +
    "<div ng-transclude></div>" +
    "</li>",
    transclude: true
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsOnOff", function() {
  return {
    link: function($scope) {
      $scope.internalModel = $scope.ngModel ? $scope.on : $scope.off;

      $scope.$watchCollection("internalModel", function() {
        $scope.ngModel = $scope.internalModel === $scope.on;
      });
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      off: "@",
      on: "@"
    },
    template:
      "<div class='rs-on-off'>" +
      "  <div class='btn-group'>" +
      "    <label class='btn btn-primary' ng-model='internalModel' btn-radio=\"'{{::on}}'\">{{::on}} <i ng-class='{\"icon-icons_Success\":ngModel === true}'></i></label>" +
      "    <label class='btn btn-primary' ng-model='internalModel' btn-radio=\"'{{::off}}'\">{{::off}} <i ng-class='{\"icon-icons_Success\":ngModel === false}'></i></label>" +
      "  </div>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSingleOpeningHours", function() {
  return  {
    controller: ["$scope", "$element", "UID", function($scope, $element, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-opening-hours'>" +
    "  <div class='day-container'>" +
    "    <rs-label class='day' label={{::ngModel.day}}></rs-label>" +
    "    <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.day}}' ng-model='ngModel.closed' label='Closed all day'></rs-check-box>" +
    "  </div>" +
    "  <rs-multi-time class='multi' ng-if='!ngModel.closed' ng-model='ngModel.time' ></rs-multi-time>" +
    "  <hr class='separator'/>" +
    "</div>"
  };
}).directive("rsOpeningHours", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div>" +
    "  <rs-single-opening-hours ng-repeat='day in ngModel' ng-model=day></rs-single-opening-hours>" +
    "</div>"
  };
}).directive("rsSingleAvailability", function() {
  return  {
    controller: ["$scope", "$element", "UID", function($scope, $element, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-opening-hours'>" +
    "  <div class='day-container'>" +
    "    <rs-label class='day' label={{::ngModel.day}}></rs-label>" +
    "    <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.day}}' ng-model='ngModel.unavailable' label='Unavailable'></rs-check-box>" +
    "  </div>" +
    "  <rs-multi-time class='multi' ng-if='!ngModel.unavailable' ng-model='ngModel.time' ></rs-multi-time>" +
    "  <hr class='separator'/>" +
    "</div>"
  };
}).directive("rsAvailabilityPeriod", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-availability'>" +
    "  <rs-radio-button id='availability_always' value='always' label='Always Available' ng-model='ngModel.availability'></rs-radio-button>" +
    "  <rs-radio-button id='availability_sometimes' value='sometimes' label='During a period' ng-model='ngModel.availability'></rs-radio-button>" +
    "  <rs-single-availability  ng-if='ngModel.availability === \"sometimes\"' ng-repeat='day in ngModel.days' ng-model=day></rs-single-availability>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsOptionalModifiers", function() {
  return  {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      ngModel: "=",
      type: "@"
    },
    template:
      "<div class='rs-optional-modifiers'>" +
      "  <rs-section title='Modifiers - {{::type}}'>" +
      "    <rs-label label='Optional'></rs-label>" +
      "    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-optional-modifiers-title'></rs-text-edit>" +
      "    <div class='rs-optional-modifiers-container'>" +
      "      <div> Available Modifiers</div> " +
      "      <rs-check-box label='Can choose more than 1 modifier' ng-model='ngModel.multiple'></rs-check-box>" +
      "      <rs-optional-modifiers-text-edit ng-model='ngModel' item-list='itemList'></rs-optional-modifiers-text-edit>" +
      "    </div>" +
      "  </rs-section>" +
      "</div>"
  };
}).directive("rsOptionalModifiersTextEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        itemList  : $scope.itemList,
        rowFactory: function() {
          return {
            name: "",
            time: new Date(0,0,0,0,0,0)
          };
        }
      };
    }],

    replace: false,
    restrict: "E",
    scope: {
      itemList: "=",
      ngModel: "="
    },
    template:
    "<rs-multi-line ng-model='ngModel.modifiers' ng-opts='opts' class='rs-mods-list'>" +
    "  <table>" +
    "    <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
    "      <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>" +
    "        <td width='30' class='remove-td'>" +
    "          <div class='remove-button'>" +
    "            <div ng-if='!$last' ng-click='remove(model)'>" +
    "              <i class='icon-icons_Delete'></i>" +
    "            </div>" +
    "          </div>" +
    "        </td>" +
    "        <td  class='rs-modifier-container'>" +
    "          <div>" +
    "            <input type='text' placeholder='Add Modifier' ng-change='changed(model)' ng-model='model.name' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false'/>" +
    "            <div class='line-number'>" +
    "              <div class='number'>{{$index + 1}}</div>" +
    "            </div>" +
  "              <div class='database-icon'>" +
  "                <i class='icon-icons_Database'></i>" +
  "              </div>" +
    "          </div>" +
    "          <div class='rs-preparation-time-container'><span ng-class='{\"last-preparation-time\": $last}'>Preparation time </span><rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ show24Hours: true }' class='rs-preparation-time'/><rs-time></div>" +
    "        </td>" +
    "        <td ng-class='{ \"handler-td\" : (!$last && !$parent.$parent.hasDefault) }'>" +
    "          <div class='drag-handler handler-item' ng-if='!$last'>" +
    "            <div class='handler'>&nbsp;</div>" +
    "          </div>" +
    "        </td>" +
    "      </tr>" +
    "    </tbody>" +
    "  </table>" +
    "</rs-multi-line>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsOrderMethod", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    require: "ngModel",
    restrict: "E",
    replace: true,
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-order-method'>" +
      "  <b>Order Method</b> (This is how we will inform you about new orders)" +
      "  <div class='rs-order-method-radios'>" +
      "    <rs-radio-button  id='rs-printer-order-{{::uid}}' value='rockPrinter' label='RockPrinter' ng-model='ngModel.orderMethod'></rs-radio-button>" +
      "    <rs-radio-button  id='rs-fax-order-{{::uid}}' value='fax' label='By Fax' ng-model='ngModel.orderMethod'></rs-radio-button>" +
      "    <rs-radio-button  id='rs-email-order-{{::uid}}' value='email' label='by Email' ng-model='ngModel.orderMethod'></rs-radio-button>" +
      "  </div>" +
      "  <rs-contact-info-validation ng-model='ngModel'>" +
      "    <rs-order-methods ng-model='ngModel'></rs-order-methods>" +
      "  </rs-contact-info-validation>" +
      "</div>"
  };
}).directive("rsOrderMethods", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.validate = function(type, model) {
        $scope.verify(type, model);
      };
    }],
    link: function(scope, elem, attrs, rsContactInfoValidationCtrl) {
      scope.verify = rsContactInfoValidationCtrl.verify;
    },
    require: "^rsContactInfoValidation",
    restrict: "E",
    replace: true,
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-order-methods'>" +
    "  <div class='rs-method' ng-if='ngModel.orderMethod === \"email\"'>" +
    "    <rs-text-edit mandatory='true' label='Email' placeholder='Email' ng-model='ngModel.orderEmail' label-same-line='false'></rs-text-edit>" +
    "    <div class='rs-order-method-validation'>" +
    "      <button class='rs-button' ng-click='validate(\"email\" , { email: ngModel.orderEmail })' ng-if='!ngModel.validatedEmail && ngModel.orderEmail !== \"\"'>Validate Email</button>" +
    "      <label ng-if='ngModel.validatedEmail'>Validated</label>" +
    "    </div>" +
    "  </div>" +
    "  <div class='rs-method' ng-if='ngModel.orderMethod === \"fax\"'>" +
    "    <div class='rs-phone-input' ng-class='{lightgray:ngModel.$isNew}'>" +
    "      <div style='display:table-row'>" +
    "        <div class='text-label' style='display:table-cell'>" +
    "          <label style='text-align:right'>Fax<i class='glyphicon glyphicon-asterisk'></i></label>" +
    "        </div>" +
    "      </div>" +
    "      <div style='display:table-row'>" +
    "        <div class='text-field' style='width:100%;display:table-cell'>" +
    "          <input type='tel' id='order-fax-{{::uid}}' rs-intl-phone-number ng-model='ngModel.orderFax' default-country='us' preferred-countries='us'/>" +
    "        </div>" +
    "      </div>" +
    "    </div>" +
    "    <div class='rs-order-method-validation'>" +
    "      <button class='rs-button' ng-click='validate(\"fax\", { fax: ngModel.orderFax })' ng-if='!ngModel.validatedFax && ngModel.orderFax !== \"\"'>Validate Fax</button>" +
    "      <label ng-if='ngModel.validatedFax'>Validated</label>" +
    "    </div>" +
    "  </div>" +
    "  <rs-multi-call-back-phones ng-model='ngModel.callbackPhones' ng-if='ngModel.orderMethod !== \"rockPrinter\"'></rs-multi-call-back-phones>" +
    "</div>"
  };
}).directive("rsMultiCallBackPhones", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.validate = function(type, model) {
        $scope.verify(type, model);
      };

      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          return {
            isValidated: false,
            phone: null
          };
        }
      };
    }],
    link: function(scope, elem, attrs, rsContactInfoValidationCtrl) {
      scope.verify = rsContactInfoValidationCtrl.verify;
    },
    replace: false,
    require: "^rsContactInfoValidation",
    restrict: "E",
    scope: {
      label: "@",
      ngModel: "="
    },
    template:
    "<rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
    "  <div class='rs-multi-call-back-phones'>" +
    "    <div ng-repeat='model in internalModel'>" +
    "      <div class='rs-phone-container'>" +
    "        <rs-phone-input mandatory='false' label='Call Back Phone {{$index+1}}' ng-model='model'></rs-phone-input>" +
    "      </div>" +
    "      <div class='remove-button'>" +
    "        <button ng-if='!$last && !($first && model.isValidated)' ng-click='remove(model)'>" +
    "          <i class='icon-icons_Delete'></i>" +
    "        </button>" +
    "      </div>" +
    "      <div class='rs-order-method-validation' ng-if='!$last'>" +
    "        <button class='rs-button' ng-click='$parent.$parent.$parent.validate(\"phone\", model)' ng-show='!model.isValidated'>Validate Phone</button>" +
    "        <label ng-if='model.isValidated'>Validated</label>" +
    "      </div>" +
    "    </div>" +
    "  </div>" +
    "</rs-multi-line>"
  };
}).directive("rsContactInfoValidation", function() {
  return {
    controller: ["$scope", "$modal", function($scope, $modal) {
      this.verify = function(type, model) {
        var modal = $modal.open({
          windowClass: "centered-modal",
          backdrop: "static",
          resolve: {
            type  : function() {
              return type;
            },
            model : function() {
              return model;
            }
          },
          template:
            "<div class='modal-body'>" +
            "  <div ng-if='type === \"email\"'>" +
            "    <p>You will receive an automated email at <a style='font-weight: bold;'>{{model.email}}</a><br />Please enter the PIN from that email in the field below:</p>" +
            "    <p>" +
            "      <input type='text' ng-model='validation.pin' placeholder='######' autofocus maxlength='6' size='6' ui-keypress='{ 13:\"submit()\" }' />" +
            "      <div class='rs-error' ng-show='form.error'>" +
            "        Invalid Pin" +
            "      </div>" +
            "    </p>" +
            "  </div>" +
            "  <div ng-if='type === \"fax\"'>" +
            "    <p>You will receive an automated fax at <a style='font-weight: bold;'>{{model.fax}}</a><br />Please enter the PIN from that fax in the field below:" +
            "    </p>" +
            "    <p>" +
            "      <input type='text' ng-model='validation.pin' placeholder='######' auto-focus='true' maxlength='6' size='6' ui-keypress='{ 13:\"submit()\" }' />" +
            "      <div class='rs-error' ng-show='form.error'>" +
            "        Invalid Pin" +
            "      </div>" +
            "    </p>" +
            "  </div>" +
            "  <div ng-if='type === \"phone\"'>" +
            "    <p ng-if='pin'>" +
            "      You will receive an automated phone call at <a style='font-weight: bold;'>{{model.phone}}</a>" +
            "      <br />Please use the phone touchpad" +
            "      <br />to enter the following PIN code:" +
            "      <h2>{{pin}}</h2>" +
            "    </p>" +
            "    <div ng-if='error' class='alert alert-danger text-left'>" +
            "      <i class='glyphicon glyphicon-exclamation-sign'></i>{{ error }}" +
            "    </div>" +
            "  </div>" +
            "  <button ng-click='submit()' ng-hide='form.locked' ng-if='type !== \"phone\"'>" +
            "    Submit" +
            "  </button>" +
            "  <button ng-click='cancel()' ng-hide='form.locked'>" +
            "    Cancel" +
            "  </button>" +
            "  <label ng-show='form.locked' ng-if='type !== \"phone\"'>" +
            "    Loading..." +
            "  </label>" +
            "</div>",
          controller: ["$scope", "$modalInstance", "$timeout", "type", "model", "ValidationService", function($scope, $modalInstance, $timeout, type, model, validation) {
            $scope.type = type;
            $scope.model = model;


            var handleError = function(err) {
              $scope.form.locked = false;
            };

            $scope.form = {
              locked : false
            };

            $scope.validation = {
              pin: ""
            };

            $scope.$watch("validation.pin", function() {
              $scope.validation.error = false;
              $scope.validation.pin = $scope.validation.pin.replace(/[^0-9]/g, "");
            });

            switch ($scope.type) {
              case "phone":
                $scope.value = model.phone;

                var pollValidation = function() {
                  $scope.poll = $timeout(function() {
                    validation.performPhoneValidation($scope.pin, $scope.value).then(function(result) {
                      model.isValidated = true;
                      $modalInstance.close();
                    }).catch(function(err) {
                      pollValidation();
                    });
                  }, 5000);
                };

                validation.triggerPhoneValidation($scope.value).then(function(result) {
                  $scope.pin = result;
                  pollValidation();
                }).catch(function(err) {
                  $scope.error = err.message;
                  handleError(err);
                });
                break;
              case "email":
                $scope.value = model.email;

                validation.triggerEmailValidation(model.email).catch(handleError);

                $scope.submit = function() {
                  $scope.form.locked = true;
                  validation.performEmailValidation($scope.validation.pin, $scope.value).then(function() {
                    $scope.form.locked = false;
                    $modalInstance.close("EMAIL_VALIDATED");
                  }).catch(function(err) {
                    $scope.form.locked = false;
                    if (err.name === "InternalServerError" || err.name === "ForbiddenAccessError")
                      handleError(err);
                    else
                      $scope.form.error  = true;
                  });
                };
                break;

              case "fax":
                $scope.value = model.fax;

                validation.triggerFaxValidation(model.fax).catch(handleError);

                $scope.submit = function() {
                  $scope.form.locked = true;
                  validation.performFaxValidation($scope.validation.pin, $scope.value).then(function() {
                    $scope.form.locked = false;
                    $modalInstance.close("FAX_VALIDATED");
                  }).catch(function(err) {
                    $scope.form.locked = false;
                    if (err.name === "InternalServerError" || err.name === "ForbiddenAccessError")
                      handleError(err);
                    else
                      $scope.form.error  = true;
                  });
                };
                break;
            }

            $scope.cancel = function() {
              if ($scope.poll)
                $timeout.cancel($scope.poll);

              $modalInstance.close();
            };
          }]
        });

        modal.result.then(function(result) {
          if (result === "EMAIL_VALIDATED") {
            $scope.ngModel.validatedEmail = true;
          } else if (result === "FAX_VALIDATED") {
            $scope.ngModel.validatedFax = true;
          }
        });
      };
    }],
    scope: {
      ngModel: "="
    },
    require: "ngModel",
    replace: true,
    restrict: "E",
    transclude: true,
    template:
      "<ng-transclude></ng-transclude>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsParkingAddress", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      ngModel: "=",
      typeLabel: "@"
    },
    template: "<div class='rs-parking-address'><rs-label>{{::label}}</rs-label><div class='address-info'><rs-combo-box class='parking-type' label-same-line='false' label='{{::typeLabel}}' ng-model='ngModel.parkingType' ></rs-combo-box><rs-check-box label='Same as property address' ng-model='samePropertyAddress'></rs-check-box><rs-address ng-model='ngModel'></rs-address></div></div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsPaymentMethod", function() {
  return {
    require: "ngModel",
    restrict: "E",
    replace: true,
    scope: {
      ngModel: "=",
      options: "="
    },
    controller: ["$scope", function($scope) {
      $scope.$watch(function() {
        return $scope.ngModel;
      }, function(newP, oldP) {
        if (newP === "weekly")
          $scope.description = $scope.options.weekly;
        else if (newP === "monthly")
          $scope.description = $scope.options.monthly;
        $scope.enabled = true;
      });
    }],
    template:
      "<div class='rs-section'>" +
      "  <p>Payment Method<i> (Select how you would prefer to be paid by RockSpoon)*</i></p>" +
      "  <div class='rs-payment-radio-container'>" +
      "    <div class='rs-payment-radio-left'>" +
      "      <input type='radio' value='weekly' label='Automatic Transfer(once per week)' ng-model='ngModel' />" +
      "      Automatic transfer (once per week)" +
      "    </div>" +
      "    <div class='rs-payment-radio-right'>" +
      "      <input type='radio' value='monthly' label='Check(once per month)' ng-model='ngModel' />" +
      "      Check (once per month)" +
      "    </div>" +
      "  </div>" +
      "  <div class='rs-payment-description' ng-show='enabled'>" +
      "    <p>{{description.title}}</p>" +
      "    <ul>" +
      "      <li ng-repeat='option in description.options'>" +
      "        {{option}}" +
      "      </li>" +
      "    </ul>" +
      "  </div>" +
      "</div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsPersonInCharge", function() {
  return {
    controller: ["$scope", "$modal", function($scope, $modal) {
      $scope.selectPersonInCharge = function(model) {
        var modal = $modal.open({
          windowClass: "centered-modal",
          backdrop: "static",
          resolve: {
            model : function() {
              return model;
            }
          },
          template:
          "<div>" +
          "  <rs-menu-bar title='Employees'>" +
          "    <rs-menu-bar-buttons>" +
          "      <button ng-click='cancel()'>Cancel</button>" +
          "      <button ng-click='cancel()'>Use</button>" +
          "    </rs-menu-bar-buttons>" +
          "  </rs-menu-bar>" +
          "  <div style='width:600px; height:400px;'>Employees List here</div>" +
          "</div>",
          controller: ["$scope", "$modalInstance", "model", function($scope, $modalInstance, model) {
            $scope.model = model;

            $scope.cancel = function() {
              $modalInstance.close();
            };
          }]
        });

        modal.result.then(function(result) {
          $scope.ngModel = result;
        });
      };
    }],
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-person-in-charge'>" +
      "  <a ng-click='selectPersonInCharge()'>" +
      "    <i class='icon-icons_Database'></i>" +
      "    Click here to access your employee contact list" +
      "  </a>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsIntlPhoneNumber", function() {
  return {
    link: function(scope, elm, attr, ctrl) {
      scope.$watchCollection("elm.val()", function() {
        if (elm.val() !== "")
          elm.intlTelInput("setNumber", elm.val());
      });

      var read = function() {
        return ctrl.$setViewValue(elm.val());
      };

      var handleArrays = function(value) {
        if (typeof value === "object")
          return value;
        else
          return value.toString().replace(/[ ]/g, "").split(",");
      };

      var options = {
        autoFormat: true,
        autoHideDialCode: true,
        defaultCountry: "",
        nationalMode: false,
        numberType: "",
        onlyCountries: void 0,
        preferredCountries: ["us", "gb"],
        responsiveDropdown: true,
        utilsScript: ""
      };

      angular.forEach(options, function(value, key) {
        var option;
        option = attr[key];
        if (angular.isDefined(option)) {
          if (key === "preferredCountries")
            options.preferredCountries = handleArrays(option);
          else if (key === "onlyCountries")
            options.onlyCountries = handleArrays(option);
          else if (typeof value === "boolean")
            options[key] = option === "true";
          else
            options[key] = option;

          return;
        }
      });

      elm.intlTelInput(options);

      elm.intlTelInput("loadUtils", "/3rdparty/intl-tel-input/lib/libphonenumber/build/utils.js");

      ctrl.$parsers.push(function(value) {
        if (!value)
          return value;

        return value.replace(/[^\+\d]/g, "");
      });

      ctrl.$parsers.push(function(value) {
        if (value)
          ctrl.$setValidity("intlPhoneNumber", elm.intlTelInput("isValidNumber"));
        else {
          value = "";
          delete ctrl.$error.intlPhoneNumber;
        }

        return value;
      });

      elm.on("blur keyup change", function() {
        return scope.$apply(read);
      });

      elm.on("invalidkey", function() {
        elm.addClass("invalid-flash");
        setTimeout(function() {
          elm.removeClass("invalid-flash");
        }, 100);
      });
      return elm.on("$destroy", function() {
        return elm.off("blur keyup change");
      });
    },
    restrict: "A",
    require: "^ngModel"
  };
}).directive("rsPhoneInput", ["UID", function(UID) {
  return {
    controller: ["$scope", function($scope) {
      $scope.uid = UID.create();
      $scope.changed = function() {
        if (_.isFunction($scope.$parent.changed)) {
          var dialCode = "+" + $("#phone_" + $scope.uid).intlTelInput("getSelectedCountryData").dialCode;
          if ($scope.ngModel.phone === dialCode || $scope.ngModel.phone === "")
            return;

          $scope.$parent.changed($scope.ngModel);
        }
      };
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      mandatory: "=",
      ngModel: "="
    },
    template:
    "<div class='rs-phone-input' ng-class='{lightgray:ngModel.$isNew}'>" +
    "  <div style='display:table-row' ng-if='label'>" +
    "    <div class='text-label' style='display:table-cell'>" +
    "      <label style='text-align:right'>{{label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>" +
    "    </div>" +
    "  </div>" +
    "  <div style='display:table-row'>" +
    "    <div class='text-field' style='width:100%;display:table-cell'>" +
    "      <input type='tel' id='phone_{{::uid}}' rs-intl-phone-number ng-model='ngModel.phone' default-country='us' preferred-countries='us' ng-change='changed()' />" +
    "    </div>" +
    "  </div>" +
    "</div>"
  };
}]).directive("rsPhoneTextEdit", ["UID", function(UID) {
  return {
    controller: ["$scope", function($scope) {
      $scope.uid = UID.create();
      $scope.changed = function() {
        if (_.isFunction($scope.$parent.changed)) {
          var dialCode = "+" + $("#phone_" + $scope.uid).intlTelInput("getSelectedCountryData").dialCode;
          if ($scope.ngModel.phone === dialCode || $scope.ngModel.phone === "")
            return;

          $scope.$parent.changed($scope.ngModel);
        }
      };

      $scope.phoneType = [{
        label: "Mobile",
        value: "Mobile"
      }, {
        label: "Landline",
        value: "Landline"
      }];
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      mandatory:"="
    },
    template:
      "<div class='rs-phone-text-edit' ng-class='{lightgray:ngModel.$isNew}'>" +
      "  <div class='rs-phone-type'>" +
      "    <rs-combo-box mandatory='mandatory' ng-model='ngModel.type' options='phoneType'></rs-combo-box>" +
      "  </div>" +
      "  <div ng-form='form' class='rs-phone-field'>" +
      "    <input type='tel' id='phone_{{::uid}}' rs-intl-phone-number ng-model='ngModel.phone' ng-change='changed()' default-country='us' preferred-countries='us'>" +
      "    <div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'><ng-message when='intlPhoneNumber'>This field is required.</ng-message></div>" +
      "  </div>" +
      "</div>"
  };
}]).directive("rsMultiPhoneTextEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          return {
            type: "Mobile",
            phone: null
          };
        },
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      ngModel: "="
    },
    template:
      "<rs-label>{{::label}}</rs-label>" +
      "<rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
      "  <div class='rs-multi-phone-text-edit'>" +
      "    <div ng-repeat='model in internalModel'>" +
      "      <div class='remove-button'>" +
      "        <div ng-if='!$last' ng-click='remove(model)'>" +
      "          <i class='icon-icons_Delete'></i>" +
      "        </div>" +
      "      </div>" +
      "      <div class='rs-phone-container'>" +
      "        <rs-phone-text-edit ng-model='model'></rs-phone-text-edit>" +
      "      </div>" +
      "    </div>" +
      "  </div>" +
      "</rs-multi-line>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsPhotos", [function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.selectedPhotoIds = [];

      $scope.selectPhoto = function(photo, $index) {
        if (photo.selected) {
          photo.selected = false;
          _.pull($scope.selectedPhotoIds, $index);
        }
        else {
          photo.selected = true;
          $scope.selectedPhotoIds.push($index);
        }
      };

      $scope.toggleDescription = function() {
        $scope.isDescEnabled = !$scope.isDescEnabled;
      };

      $scope.deletePhotos = function() {
        _.pullAt($scope.gallery, $scope.selectedPhotoIds);
        $scope.selectedPhotoIds = [];
      };

      $scope.makeDefault = function() {
        var newDefaultIndex = $scope.selectedPhotoIds[0];

        for (var i = 0; i < $scope.gallery.length; i++) {
          $scope.gallery[i].selected = false;
        }

        $scope.gallery.unshift(_.pullAt($scope.gallery, newDefaultIndex)[0]);
        $scope.selectedPhotoIds = [];
      };
    }],
    link: function(scope) {
      scope.$watch(function() {
        return scope.newPhoto;
      }, function(newP, oldP) {
        if (newP !== oldP)
          scope.gallery.push({ url: newP });
      }, true);
    },
    replace: true,
    restrict: "E",
    scope: {
      gallery: "=",
      descriptionToggle: "="
    },
    template:
    "<div class='rs-photos' ng-model='newPhoto'>" +
    "  <div class='rs-photos-bar'>" +
    "    <button class='rs-button' ng-click='toggleDescription()' ng-if='descriptionToggle'>" +
    "      <span ng-if='isDescEnabled'>Hide Description</span>" +
    "      <span ng-if='!isDescEnabled'>Show Description</span>" +
    "    </button>" +
    "    <button class='rs-button' ng-click='deletePhotos()' ng-disabled='selectedPhotoIds.length === 0'>Delete</button>" +
    "    <button class='rs-button' ng-click='makeDefault()' ng-disabled='selectedPhotoIds.length !== 1'>Make as Default</button>" +
    "    <rs-image-picker-generic ng-model='newPhoto'><rs-image-picker ng-model='newPhoto'></rs-image-picker></rs-image-picker-generic>" +
    "  </div>" +
    "  <div ng-if='!gallery || gallery.length === 0' class='rs-no-photos'>" +
    "    <h4>No Photos yet, Please add some</h4>" +
    "  </div>" +
    "  <div class='rs-photos-container' ng-if='gallery && gallery.length > 0'>" +
    "    <div ng-repeat='photo in gallery track by $index' class='rs-photo' ng-class='{ noDescription : !isDescEnabled }'>" +
    "      <div class='rs-ribbon' ng-if='$index === 0'>" +
    "        <span>Default</span>" +
    "      </div>" +
    "      <img ng-src='{{photo.url}}' ng-class='{ selected: photo.selected }' ng-click='selectPhoto(photo, $index)' />" +
    "      <input placeholder='Title' ng-model='photo.title' />" +
    "      <textarea placeholder='Description' ng-model='photo.description'></textarea>" +
    "    </div>" +
    "  </div>" +
    "</div>"
  };
}]);
/*global rockspoonUi: true */

rockspoonUi.directive("rsPinInput", ["UID", "focus", function(UID, focus) {
  var state = {
    INIT: 1,
    VALIDATING: 2,
    VALIDATED: 3,
    FAILED: 4,
    FAILED_REQUEST: 5,
    REQUESTING_PIN: 6
  };
  return {
    controller: ["$scope", function($scope) {
      $scope.validate = function(pin) {
        $scope.state = state.VALIDATING;
        $scope.isDisabled = true;
        var validator = function(err, result) {
          if (err) {
            for (var i = 0; i < $scope.arr.length; ++i) {
              $scope.arr[i] = "";
            }
            $scope.state = state.FAILED;
            $scope.isDisabled = false;
            focus("pin[" + $scope.uid + "_0]");
          }
          else if (result) {
            $scope.state = state.VALIDATED;
            $scope.isDisabled = true;
            $scope.onValidated();
          }
          $scope.$apply();
        };
        $scope.validatePin({ pin: pin, cb: validator });
      };
      $scope.request = function() {
        $scope.state = state.REQUESTING_PIN;
        $scope.isDisabled = true;
        var cb = function(err, result) {
          if (err)
            $scope.state = state.FAILED_REQUEST;
          else if (result) {
            $scope.state = state.INIT;
            for (var i = 0; i < $scope.arr.length; ++i) {
              $scope.arr[i] = "";
            }
          }
          $scope.isDisabled = false;
          $scope.$apply();
        };
        $scope.requestPin({ cb: cb });
      };
    }],
    link: function($scope) {
      $scope.state = state.INIT;
      $scope.isDisabled = false;
      $scope.pin = "";
      $scope.uid = UID.create();

      var pLength = parseInt($scope.length, 10);
      $scope.arr = new Array(pLength);

      for (var i = 0; i < $scope.arr.length; ++i) {
        $scope.arr[i] = "";
      }

      $scope.request();

      $scope.$watch(function() {
        return $scope.arr;
      }, function() {
        $scope.pin = "";
        for(var i = 0; i < $scope.arr.length; ++i)
          $scope.pin += $scope.arr[i];

        if ($scope.pin.length == $scope.length) {
          $scope.validate($scope.pin);
        }
      }, true);
    },
    replace: true,
    restrict: "E",
    scope: {
      label: "@",
      length: "@",
      onValidated: "&",
      requestPin: "&",
      validatePin: "&"
    },
    template: "<div class='rs-pin-input'><rs-label>{{::label}}</rs-label><input digit ng-disabled='isDisabled' id='pin[{{uid}}_{{$index}}]' focus-on='pin[{{uid}}_{{$index}}]' ng-class='{ \"rs-error\" : state == 4, \"rs-success\": state == 3 }' sly-repeat='n in arr' placeholder = '#' class='box' rs-focus-next ng-model='arr[$index]' maxlength='1' /><span ng-if='state == 4' class='rs-error'><i class='glyphicon glyphicon-remove' style='margin: 0 5px;'></i>Wrong Pin Code <span class='sep'>&nbsp;</span> <button class='rs-button' ng-click='request()'>Resend a new PIN Code</button></span><span ng-if='state == 3' class='rs-success'><i class='glyphicon glyphicon-ok' style='margin:0 5px;'></i>PIN code validated</span><span ng-if='state == 2'><i class='glyphicon glyphicon-refresh' style='margin:0 5px;'></i>Validating</span><span ng-if='state == 5' class='rs-error'><i class='glyphicon glyphicon-remove' style='margin: 0 5px;'></i> Failed to generate a new PIN <span class='sep'>&nbsp;</span> <button class='rs-button' ng-click='request()'>Resend a new PIN Code</button></span><span ng-if='state == 6'><i class='glyphicon glyphicon-refresh' style='margin:0 5px;'></i>Requesting a PIN</span></div>"
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsPrice", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template: "<div class='rs-price'>" +
    "  <rs-text-edit class='price-input' ng-model='ngModel.price' label='Price $' label-same-line='false' placeholder=0.00 currency></rs-text-edit>" +
    "  <rs-label class='select-label' label='Select how many items customers can order:'></rs-label>" +
    "  <div class='items-container'>Enter how many items customers can order in total <input digit ng-model='ngModel.totalItems' type='text' placeholder='0' /></div>"+
    "  <div class='items-container'>Enter how many items per category customers can  order <input digit ng-model='ngModel.categoryItems' type='text' placeholder='0'/></div>"+
    "</div>"
  };
});
/*global rockspoonUi: true */

rockspoonUi.directive("rsPrinterForm", function() {
  return  {
    controller: ["$scope", "$q", "$element", "PrinterDataService", function($scope, $q, $element, printerData ) {
      
      $scope.printer = {
        printerStation: undefined,
        printerLocation: undefined,
        printerType: undefined,
        printerName: ""
      };

      function loadPrinterData() {

        printerData.fetchStationNames().then(function(stations) {
          $scope.stationNames = stations.slice();
        }, function(reason) {
          $scope.stationNames = [];
          console.log("cannot fetch StationNames: " + reason);
        });

        printerData.fetchLocationNames().then(function(locations) {
          $scope.locationNames = locations.slice();
        }, function(reason) {
          $scope.locationNames = [];
          console.log("cannot fetch LocationNames: " + reason);
        });

        printerData.fetchPrinterTypes().then(function(types) {
          $scope.printerTypes = types.slice();
        }, function(reason) {
          $scope.printerTypes = [];
          console.log("cannot fetch PrinterTypes: " + reason);
        });
      }

      loadPrinterData();

      $scope.create = function() {
        for (var k in $scope.printer) {
          $scope.ngModel[k] = $scope.printer[k];
        }
        $scope.$emit("printer-created", $scope.printer);
      };

      $scope.cancel = function() {
        $scope.printer.printerStation = undefined;
        $scope.printer.printerLocation = undefined;
        $scope.printer.printerType = undefined;
        $scope.printer.printerName = "";
        $scope.$emit("printer-cancel", $scope.printer);
      };
    }],
    replace: true,
    require: [ "ngModel" ],
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-printer-form'>" +
      "  <div class='rs-printer-name'>" +
      "    <rs-text-edit label='Enter Printer Name' label-same-line='false' ng-model='printer.printerName'></rs-text-edit>" +
      "  </div>" +
      "  <div class='rs-printer-type' ng-hide='!printer.printerName'>" +
      "    <rs-combo-box label='Printer Type' label-same-line='false' ng-model='printer.printerType' options='printerTypes' ng-disabled='!printer.printerName'></rs-combo-box>" +
      "  </div>" +
      "  <div class='rs-printer-location' ng-hide='!printer.printerName || !printer.printerType'>" +
      "    <rs-combo-box label='Select Location Name' label-same-line='false' ng-model='printer.printerLocation' options='locationNames'></rs-combo-box>" +
      "  </div>" +
      "  <div class='rs-printer-station' ng-hide='!printer.printerName || !printer.printerType || !printer.printerLocation'>" +
      "    <rs-combo-box label='Select Station Name' label-same-line='false' ng-model='printer.printerStation' options='stationNames'></rs-combo-box>" +
      "  </div>" +
      "  <div class='rs-printer-buttons'>" +
      "    <button class='rs-button' ng-hide='!printer.printerName || !printer.printerType || !printer.printerLocation || !printer.printerStation' ng-click='create()'>Create</button>" +
      "    <button class='rs-button' ng-hide='!printer.printerName' ng-click='cancel()'>Cancel</button>" +
      "  </div>" +
      "</div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsRadioButton", function() {
  return {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;
    },
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      label: "@",
      value: "@",
      ngModel: "=",
      ngDisabled: "@"
    },
    template:
      "<div class='rs-radio-button'>" +
      "  <span>" +
      "    <input id='rdb[{{::id}}]' type='radio' ng-value='value' ng-model='ngModel' ng-disabled='ngDisabled' />" +
      "    <label for='rdb[{{::id}}]'>{{::label}}</label>" +
      "  </span>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSalesInfo", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-sales-info'>" +
    "  <rs-section>" +
    "    <rs-text-edit label='Sales Tax' label-same-line='true' ng-model='ngModel.salesTax' decimal></rs-text-edit><span>&nbsp;%</span>" +
    "  </rs-section>" +
    "  <rs-section separator='true'>" +
    "    <rs-label>Dine-in *</rs-label><rs-check-box id='sales_tax{::uid}}' ng-model='ngModel.isMandatoryGratuity' label='Mandatory Gratuity'></rs-check-box>" +
    "    <div ng-if='ngModel.isMandatoryGratuity' class='rs-gratuity'>" +
    "      <rs-text-edit ng-model='ngModel.mandatoryGratuityPercentage' label='' decimal></rs-text-edit>" +
    "      <rs-text-edit ng-model='ngModel.mandatoryGratuityLargerThan' label='% Mandatory Gratuity will be paid for party larger than' label-same-line='true' digit></rs-text-edit>" +
    "    </div>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSection", function() {
  return {
    replace: true,
    restrict: "E",
    scope: {
      mandatory: "=",
      separator: "=",
      title: "@"
    },
    template:
      "<div class='rs-section'>" +
      "  <hr class='separator' ng-if='separator === true'/>" +
      "  <div class='title'>" +
      "    {{::title}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i>" +
      "  </div>" +
      "  <div ng-transclude></div>" +
      "</div>",
    transclude: true
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsSides", function() {
  return  {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;

      if (!scope.ngModel.free) {
        scope.ngModel.free = "none";
      }

      scope.$watch("ngModel.isOptional", function() {
        if (!scope.ngModel.isOptional) {
          scope.ngModel.hasDefault = false;
        }
      });

      scope.maximum = [{
        label: "",
        value: ""
      }];

      for (var i = 0; i < scope.ngModel.sides.length; ++i)
        scope.maximum.push({ value: i + 1, label: (i + 1).toString() });

      scope.$watch("ngModel.sides.length", function(newLength, oldLength) {
        if (newLength > oldLength) {
          scope.maximum.push({ value: newLength, label: newLength.toString() });
        }
        else if (scope.maximum.length > 1) {
          scope.maximum.pop();
          if (scope.ngModel.allMaxFree > newLength)
            scope.ngModel.allMaxFree = newLength;
        }
      });
    },

    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      sizesList: "=",
      ngModel: "="
    },
    template:
    "<div class='rs-side'>" +
    "  <rs-section title='Sides'>" +
    "    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-sides-title'></rs-text-edit>" +
    "    <rs-on-off on='Optional Sides' off='Mandatory Sides' ng-model='ngModel.isOptional'></rs-on-off>" +
    "    <rs-label label='Sides for free'></rs-label>" +
    "    <div class='free-selections-container'>" +
    "      <rs-radio-button class='free-selections' id='rs-sides_all{{::ngModel.id}}' value='all' label='All'    ng-model='ngModel.free'></rs-radio-button>" +
    "      <rs-radio-button class='free-selections' id='rs-sides_custom{{::ngModel.id}}' value='custom' label='Custom' ng-model='ngModel.free'></rs-radio-button>" +
    "      <rs-radio-button class='free-selections' id='rs-sides_none{{::ngModel.id}}' value='none' label='None' ng-model='ngModel.free'></rs-radio-button>" +
    "    </div>" +
    "    <rs-multi-extra-price-edit ng-if='ngModel.free == \"custom\"' sizes-list='sizesList' ng-model='ngModel.extras'></rs-multi-extra-price-edit>" +
    "    <rs-check-box class='rs-default-check' id='rs-sides + {{::id}}' label='With Default Option' ng-if='ngModel.isOptional' ng-model='ngModel.hasDefault'></rs-check-box>" +
    "    <rs-multi-sides ng-model='ngModel.sides' sizes-list='sizesList' default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' item-list='itemList'></rs-multi-sides>" +
    "  </rs-section>" +
    "</div>"
  };
}).directive("rsMultiSides", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        itemList  : $scope.itemList,
        rowFactory: function() {
          var tmp = moment();
          var from = moment.utc([tmp.year(), tmp.month(), tmp.date(), tmp.hours(), Math.ceil(tmp.minutes() / 5) * 5]);
          var to = from.clone();

          var extraPrices = [];

          if ($scope.sizesList.length <= 1) {
            extraPrices.push({ name: "Default", value: 0 });
          }

          else {
            for (var i = 0; i < $scope.sizesList.length; i++) {
              extraPrices.push({name: $scope.sizesList[i].name, value: 0});
            }
          }

          return {
            isNotAvailable : false,
            name           : "",
            preparationTime: new Date(0, 0, 0, 0, 0, 0),
            notAvailable   : {
              from: from,
              to  : to
            },
            extraNumber: 0,
            extraPrices: extraPrices,
            $uid       : UID.create()
          };
        }
      };
    }],
    replace   : false,
    require   : "ngModel",
    restrict  : "E",
    scope     : {
      itemList       : "=",
      ngModel        : "=",
      hasDefault     : "=",
      defaultModifier: "=",
      sizesList      : "="
    },
    template  : "" +
    "  <rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
    "    <table>" +
    "      <thead>" +
    "        <tr >" +
    "          <td>&nbsp;</td>" +
    "          <td>&nbsp;</td>" +
    "          <td class='rs-add-price-header' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>" +
    "            <div >Add Price $</div>" +
    "          </td>" +
    "          <td ng-if='$parent.hasDefault && internalModel.length > 1'>&nbsp;</td>" +
    "          <td ng-if='internalModel.length > 1'>Show</td>" +
    "          <td ng-if='internalModel.length > 1'>Sides</td>" +
    "          <td>&nbsp;</td>" +
    "        </tr>" +
    "        <tr>" +
    "          <td>&nbsp;</td>" +
    "          <td>&nbsp;</td>" +
    "          <td class='rs-prices-header' ng-class='{ borders: $parent.$parent.sizesList.length > 1 }' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>" +
    "            <div ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</div>" +
    "            <span  ng-if='$parent.$parent.sizesList.length == 1'>Price</span>" +
    "          </td>" +
    "          <td ng-if='$parent.hasDefault && internalModel.length > 1' style='padding:0 5px'>" +
    "            <span>Default</span>" +
    "          </td>" +
    "          <td class='default-header' ng-if='internalModel.length > 1'>" +
    "            <span>in Menu</span>" +
    "          </td>" +
    "          <td class='default-header' ng-if='internalModel.length > 1'>" +
    "            <span>not available</span>" +
    "          </td>" +
    "          <td>&nbsp;</td>" +
    "        </tr>" +
    "      </thead>" +
    "      <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
    "        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>" +
    "          <td width='30' class='remove-td'>" +
    "            <div class='remove-button'>" +
    "              <div ng-if='!$last' ng-click='remove(model)'>" +
    "                <i class='icon-icons_Delete'></i>" +
    "              </div>" +
    "            </div>" +
    "          </td>" +
    "          <td class='rs-side-container' ng-class='{selected: model.isNotAvailable, leftBorder: $parent.$parent.$parent.ngModel.free != \"none\"  }'>" +
    "            <div>" +
    "              <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Side' ng-change='changed(model)' ng-model='model.name' />" +
    "              <div class='line-number'>" +
    "                <div class='number'>{{$index + 1}}</div>" +
    "              </div>" +
    "              <div class='database-icon'>" +
    "                <i class='icon-icons_Database'></i>" +
    "              </div>" +
    "            </div>" +
    "            <div class='rs-preparation-time-container'>" +
    "              <div class='rs-preparation-time-text' ng-class='{\"last-preparation-time\": $last}'>Preparation time </div>" +
    "              <rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ timeSteps: [1, 1, 1], show24Hours: true }' class='rs-preparation-time'/><rs-time>" +
    "            </div>" +
    "            <div ng-if='model.isNotAvailable'>" +
    "              <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>" +
    "            </div>" +
    "          </td>" +
    "          <td class='rs-prices-container' ng-if='$parent.$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1' ng-class='{selected: model.isNotAvailable}'>" +
    "            <input currency type='text' ng-model='obj.value' ng-change='changed(model)' ng-repeat='obj in model.extraPrices' />" +
    "          </td>" +
    "          <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>" +
    "            <rs-radio-button  id='rs-sides_default_{{$index}}' value='{{model.name.itemId}}_{{$index}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>" +
    "          </td>" +
    "          <td class='rs-side-not-available-check' ng-if='!$last'>" +
    "            <rs-check-box id='rs-sides_{{::model.$uid}}_show' on-change='changed(model)' ng-model='model.showInMenu'></rs-check-box>" +
    "          </td>" +
    "          <td class='rs-side-not-available-check' ng-if='!$last'>" +
    "            <rs-check-box id='rs-sides_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>" +
    "          </td>" +
    "          <td class='rs-handler'>" +
    "            <div class='drag-handler handler-item' ng-if='!$last'>" +
    "              <div class='handler'>&nbsp;</div>" +
    "            </div>" +
    "          </td>" +
    "        </tr>" +
    "        <tr ng-if='!$last' style='line-height: 5px;'>" +
    "          <td colspan='6'>&nbsp;</td>" +
    "        </tr>" +
    "        <tr ng-if='$parent.$parent.ngModel.free == \"all\"'>" +
    "          <td></td>" +
    "          <td>" +
    "            <div class='free-selections-number-container'>" +
    "              <div class = 'free-selections-number-text' >Can order a maximum of </div>" +
    "              <rs-combo-box class = 'free-selections-number-combo' options='$parent.$parent.$parent.maximum' ng-model='$parent.$parent.$parent.ngModel.allMaxFree'></rs-combo-box>" +
    "              <div class = 'free-selections-number-text'>sides.</div>" +
    "            </div>" +
    "          </td>" +
    "          <td colspan='4'></td>" +
    "        </tr>" +
    "      </tbody>" +
    "    </table>" +
    "  </rs-multi-line>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsSizePrice", function() {
  return  {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      showInfo : "="
    },
    template:
      "<div class='rs-size-price'>" +
      "  <rs-section title='Size & Price'>" +
      "    <rs-on-off on='Single Size' off='Multiple Sizes' ng-model='ngModel.isSingle'></rs-on-off>" +
      "    <div class='rs-price-container' ng-class='{\"hide-border\": !showInfo}'>" +
      "      <div class='rs-price-title' ng-if='showInfo'>Price must be re-entered for the item</div>" +
      "      <rs-multi-size-price-text-edit ng-model='ngModel.sizes' ng-if='!ngModel.isSingle'></rs-multi-size-price-text-edit>" +
      "      <table ng-if='ngModel.isSingle'>" +
      "        <thead>" +
      "          <tr><td></td><td>Price $</td><td></td></tr>" +
      "        </thead>" +
      "        <tbody" +
      "          <tr>" +
      "            <td width='30'>" +
      "              &nbsp;" +
      "            </td>" +
      "            <td width='100'>" +
      "              <input type='text' placeholder='0.00' ng-model='model.price' currency />" +
      "            </td>" +
      "            <td>&nbsp;</td>" +
      "          </tr>" +
      "        </tbody>" +
      "      </table>" +
      "    </div>" +
      "  </rs-section>" +
      "</div>"
  };
}).directive("rsMultiSizePriceTextEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          return {
            name: ""
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
      "  <table>" +
      "    <thead>" +
      "      <tr><td></td><td>Size</td><td>Price $</td><td></td></tr>" +
      "    </thead>" +
      "    <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
      "      <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>" +
      "        <td width='30'>" +
      "          <div class='remove-button'>" +
      "            <button ng-if='!$last' ng-click='remove(model)'>" +
      "              <i class='icon-icons_Delete'></i>" +
      "            </button>" +
      "          </div>" +
      "        </td>" +
      "        <td>" +
      "          <div class='rs-price-text-container' ng-class='{lightgray:model.$isNew}'>" +
      "            <input type='text' placeholder='Add Size' ng-change='changed(model)' ng-model='model.name' />" +
      "            <div class='line-number'>" +
      "              <div class='number'>{{$index + 1}}</div>" +
      "            </div>" +
      "          </div>" +
      "        </td>" +
      "        <td width='100'>" +
      "          <input type='text' placeholder='0.00' ng-change='changed(model)' ng-model='model.price' currency ng-class='{lightgray:model.$isNew}' />" +
      "        </td>" +
      "        <td>" +
      "          <div class='drag-handler handler-item' ng-if='!$last'>" +
      "            <div class='handler'>&nbsp;</div>" +
      "          </div>" +
      "        </td>" +
      "      </tr>" +
      "    </tbody>" +
      "  </table>" +
      "</rs-multi-line>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsHttpPrefix", function() {
  return {
    link: function(scope, elm, attrs, ctrl) {
      function ensureHttpPrefix(value) {
        if (value && !/^(https?):\/\//i.test(value) && "http://".indexOf(value) === -1 && "https://".indexOf(value) === -1) {
          ctrl.$setViewValue("http://" + value);
          ctrl.$render();
          return "http://" + value;
        }
        else {
          return value;
        }
      }
      ctrl.$formatters.push(ensureHttpPrefix);
      ctrl.$parsers.push(ensureHttpPrefix);
    },
    require: "ngModel",
    restrict: "A"
  };
}).directive("rsSocialTextEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.changed = function() {
        if (_.isFunction($scope.$parent.changed))
          $scope.$parent.changed($scope.ngModel);
      };

      $scope.socialType = [{
        label: "Website",
        value: "Website"
      }, {
        label: "Facebook",
        value: "Facebook"
      }, {
        label: "Twitter",
        value: "Twitter"
      }];
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      mandatory: "="
    },
    template: "<div ng-form='form' class='rs-social-text-edit' ng-class='{lightgray:ngModel.$isNew}'><div class='social-type' style='display:table-cell'><rs-combo-box mandatory='mandatory' ng-model='ngModel.type' options='socialType'></rs-combo-box></div><div class='social-field' style='display:table-cell'><input type='text' ng-required='mandatory' rs-http-prefix placeholder='Add URL' ng-model='ngModel.url' ng-change='changed()'><div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'><ng-message when='required'>This field is required.</ng-message></div></div></div>"
  };
}).directive("rsMultiSocialTextEdit", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          return {
            url: null,
            type: "Website"
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      ngModel: "="
    },
    template: "<rs-label label='{{::label}}'></rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'><div class='rs-multi-social-text-edit'><div style='display:table' ng-repeat='model in internalModel'><div class='remove-button'><div ng-if='!$last' ng-click='remove(model)'><i class='icon-icons_Delete'></i></div></div><div style='display:table-cell;width:90%'><rs-social-text-edit ng-model='model'></rs-social-text-edit></div></div></div></rs-multi-line>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSpinBox", ["$compile", function($compile) {
  return {
    controller: ["$scope", function($scope) {
      $scope.incrementNumber = function() {
        ++$scope.ngModel;
      };

      $scope.decrementNumber = function() {
        --$scope.ngModel;
      };
    }],
    link: function(scope, elm) {
      var paddingClass = "";
      var d;

      if (scope.ngModel === null || scope.ngModel === undefined)
        scope.ngModel = 0;

      if (scope.label !== null && scope.label !== undefined && scope.label !== "")
        paddingClass = "label-space";


      if (scope.labelSameLine !== undefined && scope.labelSameLine !== true)
        d = $compile("<div style='display:table-row'><div class='text-label' style='display:table-cell'><label class='" + paddingClass + "' style='text-align:right'>{{::label}}</label></div></div><div style='display:table-row'><div class='text-field' style='width:100%;display:table-cell'><table><tr class='text-center'><td><a ng-click='incrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowUp'></span></a></td></tr><tr class='text-center'><td><input type='text' ng-model='ngModel' class='text-center' ng-readonly='true' maxlength='2' readonly='readonly'></td></tr><tr class='text-center'><td><a ng-click='decrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowDown'></span></a></td></tr></table></div></div>")(scope);
      else
        d = $compile("<div class='text-label' style='display:table-cell'><label class='" + paddingClass + "' style='text-align:right'>{{::label}}</label></div><div class='text-field' style='width:100%;display:table-cell'><table><tr class='text-center'><td><a ng-click='incrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowUp'></span></a></td></tr><tr class='text-center'><td><input type='text' ng-model='ngModel' class='text-center' ng-readonly='true' maxlength='2' readonly='readonly'></td></tr><tr class='text-center'><td><a ng-click='decrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowDown'></span></a></td></tr></table></div>")(scope);

      elm.append(d);
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      labelSameLine: "=",
      ngModel: "="
    },
    template: "<div class='rs-spin-box'></div>"
  };
}]);
/*global rockspoonUi: true */
rockspoonUi.directive("rsSpinner", function() {
  return {
    replace: true,
    restrict: "E",
    template:
      "<div class='rs-spinner'>" +
      "  <div></div>" +
      "  <div></div>" +
      "  <div></div>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSubcategoryForm", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
      "<div class='rs-subcategory-form'>" +
      "  <rs-title-description ng-model='ngModel' type='Subcategory'></rs-title-description>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsSubstitution", function() {
  return  {
    link: function(scope, elm, attrs) {
      scope.id = attrs.id;
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      ngModel: "="
    },
    template:
      "<div class='rs-substitution'>" +
      "  <rs-label label='Optional'></rs-label>" +
      "  <rs-multi-substitution ng-model='ngModel' item-list='itemList'></rs-multi-substitution>" +
      "</div>"
  };
}).directive("rsMultiSubstitution", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        itemList: $scope.itemList,
        rowFactory: function() {
          return {
            name: "",
            substitutions: []
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      ngModel: "="
    },
    template:
      "<rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
      "  <table class='rs-main-table'>" +
      "    <tr ng-repeat-start='model in internalModel' ng-class='{lightgray: $last}'>" +
      "      <td width='30'>" +
      "        <div class='remove-button'>" +
      "          <div ng-if='!$last' ng-click='remove(model)'>" +
      "            <i class='icon-icons_Delete'></i>" +
      "          </div>" +
      "        </div>" +
      "      </td>" +
      "      <td>" +
      "        <div class='rs-substitution-container'>" +
      "          <input type='text' style='padding-right: 20px' placeholder='Add Item' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' ng-change='changed(model)' ng-model='model.name' />" +
      "          <div class='line-number'>" +
      "            <div class='number'>{{$index + 1}}</div>" +
      "          </div>" +
      "          <div class='database-icon'>" +
      "            <i class='icon-icons_Database'></i>" +
      "          </div>" +
      "        </div>" +
      "      </td>" +
      "      <td class='rs-substitution-not-available-header'><div ng-if='$first'>Substitution not available</div></td>" +
      "      <td class='rs-handler'>&nbsp;</td>" +
      "    </tr>" +
      "    <tr ng-repeat-end ng-if='!$last'>" +
      "      <td colspan='4'><rs-multi-substitution-choice item-list='ngOpts.itemList' ng-model='model.substitutions'></rs-multi-substitution-choice></td>" +
      "    </tr>" +
      "  </table>" +
      "</rs-multi-line>"
  };
}).directive("rsMultiSubstitutionChoice", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        itemList: $scope.itemList,
        rowFactory: function() {
          var tmp = moment();
          var from = moment.utc([tmp.year(), tmp.month(), tmp.date(), tmp.hours(), Math.ceil(tmp.minutes() / 5) * 5]);
          var to = from.clone();

          return {
            isNotAvailable: false,
            name: "",
            preparationTime: new Date(0, 0, 0, 0, 0, 0),
            notAvailable: {
              from: from,
              to: to
            },
            $uid: UID.create()
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      itemList: "=",
      ngModel: "="
    },
    template:
      "<rs-multi-line class='rs-substitution-choice' ng-model='ngModel' ng-opts='opts'>" +
      "  <div style='padding-left:30px; width: 100%'>" +
      "    <table class='rs-substitution-choice-table'>" +
      "      <tbody ui-sortable='sortableOptions' ng-model=internalModel>" +
      "        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last, lightgray: $last}'>" +
      "          <td width='30' style='vertical-align:top;' ng-class='{selected: model.isNotAvailable}'>" +
      "            <div class='remove-button'>" +
      "              <div ng-if='!$last' ng-click='remove(model)'>" +
      "                <i class='icon-icons_Delete'></i>" +
      "              </div>" +
      "            </div>" +
      "          </td>" +
      "          <td width='30' class='rs-with' ng-class='{selected: model.isNotAvailable}' ng-if='$first'>With</td>" +
      "          <td width='30' class='rs-with' ng-class='{selected: model.isNotAvailable}' ng-if='!$first'>or</td>" +
      "          <td ng-class='{selected: model.isNotAvailable}'>" +
      "            <table class='rs-substitution-table' ng-class='{selected: model.isNotAvailable}'>" +
      "              <tr>" +
      "                <td colspan='2'>" +
      "                  <div class='rs-substitution-container'>" +
      "                    <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Substitute' ng-change='changed(model)' ng-model='model.name' />" +
      "                    <div class='database-icon substitute'>" +
      "                      <i class='icon-icons_Database'></i>" +
      "                    </div>" +
      "                  </div>" +
      "                </td>" +
      "                <td class='rs-substitution-not-available-check'>" +
      "                  <rs-check-box id='rs-substitution_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>" +
      "                </td>" +
      "              </tr>" +
      "              <tr>" +
      "                <td align='right'>" +
      "                  Preparation time" +
      "                </td>" +
      "                <td align='right' style='width:100px'>" +
      "                  <rs-time ng-model='model.preparationTime' on-change='changed(model)' time-options='{ show24Hours: true }'></rs-time>" +
      "                </td>" +
      "                <td class='rs-substitution-not-available-check'>" +
      "                  &nbsp;" +
      "                </td>" +
      "              </tr>" +
      "              <tr ng-if='model.isNotAvailable'>" +
      "                <td class='not-available' colspan='3' ng-if='model.isNotAvailable'>" +
      "                  <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>" +
      "                </td>" +
      "              </tr>" +
      "            </table>" +
      "          </td>" +
      "          <td ng-class='{selected: model.isNotAvailable}' class='rs-handler'>" +
      "            <div class='drag-handler handler-item' ng-if='!$last'>" +
      "              <div class='handler'>&nbsp;</div>" +
      "           </div>" +
      "         </td>" +
      "        </tr>" +
      "      </tbody>" +
      "    </table>" +
      "  </div>" +
      "</rs-multi-line>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsTabs", [function() {
  return {
    controller: ["$scope", function($scope) {
      var tabs = [];
      var self = this;

      this.showSteps = $scope.showSteps;

      this.selected = $scope.selected = 0;
      this.addTab = function(tabCtrl) {
        tabs.push(tabCtrl);
        tabCtrl.added(tabs.length - 1, self.barContainer);
      };

      this.clicked = function(idx) {
        $scope.selected = idx;

        if ($scope.allowBack === true)
          $scope.currentStep = idx + 1;
      };

      this.notifyClick = function(idx) {
        var forward = self.selected <= idx;
        _.forEach(tabs, function(tab, i) {
          tab.selected(idx, forward);
        });
        self.selected = idx;
      };

      var step = 1;
      this.updateStep = function(currentStep) {
        if (currentStep < step) {
          $scope.selected = currentStep - 1;
          _.forEach(tabs, function(tab) {
            tab.updateStep(currentStep);
          });
        }
      };

      this.nextStep = function() {
        return step++;
      };
    }],
    link: function($scope, element, attr, ctrl, transclude) {
      ctrl.barContainer = element.find(".rs-tab-bar");
      ctrl.contentContainer = element.find(".rs-content");
      transclude($scope.$parent, function(clone) {
        ctrl.contentContainer.append(clone);
      });

      $scope.$watch("selected", function() {
        ctrl.notifyClick(parseInt($scope.selected) || 0);
      });

      $scope.$watch("currentStep", function() {
        ctrl.updateStep($scope.currentStep);
      });
    },
    replace: true,
    require: "rsTabs",
    restrict: "E",
    scope: {
      selected: "=",
      currentStep: "=",
      showSteps: "=",
      allowBack: "="
    },
    template: "<div class='rs-tabs'><div class='rs-tab-bar'></div><div class='rs-content'></div></div>",
    transclude: true
  };
}]).directive("rsTab", ["$compile", function($compile) {
  return {
    controller: ["$scope", "$element", function($scope, $element) {
      var self = this;
      var button = angular.element("<div class='rs-tab-button' ng-class='{selected:selected, mandatory : (mandatory === true && currentStep <= step ) }' ng-click='click()'><div class='rs-step' ng-if='step && showStep'>Step {{step}}</div><div ng-if='!step'>&nbsp;</div><div class='title'>{{title}}</div></div>");
      this.added = function(idx, barContainer) {
        button = $compile(button)($scope);
        barContainer.append($compile(button)($scope));
        self.idx = idx;
      };

      this.selected = function(idx, forward) {
        if (forward)
          $element.addClass("forward");
        else
          $element.removeClass("forward");

        $scope.selected = idx == self.idx;
      };

      this.updateStep = function(currentStep) {
        $scope.currentStep = currentStep;
        if (!$scope.step || $scope.step <= $scope.currentStep)
          button.removeClass("disabled");
        else
          button.addClass("disabled");
      };
    }],
    link: function($scope, element, attr, ctrls, transclude) {
      var tabsCtrl = ctrls[0];
      var ctrl = ctrls[1];
      ctrl.scope = $scope;

      $scope.showStep = tabsCtrl.showSteps;

      if (attr.step === "")
        $scope.step = tabsCtrl.nextStep();

      $scope.click = function() {
        if ($scope.step === null || $scope.step === undefined || $scope.step <= $scope.currentStep)
          tabsCtrl.clicked(ctrl.idx);
      };

      tabsCtrl.addTab(ctrl);
      transclude($scope.$parent, function(clone) {
        element.append(clone);
      });
    },
    replace: true,
    require: ["^rsTabs", "rsTab"],
    restrict: "E",
    scope: {
      mandatory: "=",
      title: "@"
    },
    template: "<div class='rs-tab' ng-hide='!selected'></div>",
    transclude: true
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsTable", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.busy = false;
      $scope.columns = [];

      this.addColumn = function (column) {
        $scope.columns.push(column);
      };

      this.loadMore = function(callback) {
        var cb = function() {
          $scope.busy = false;
          $scope.$apply();
          callback();
        };

        if ($scope.busy)
          return;

        $scope.busy = true;
        $scope.nextPage({cb : cb});
      };

      this.scrollDistance = function () {
        if ($scope.options.scrollDistance)
          return $scope.options.scrollDistance * 30;

        return 0;
      };

      $scope.sort = function(key) {
        var cb = function() {
          $scope.busy = false;
          $scope.$broadcast("sort");
        };

        if ($scope.busy)
          return;

        $scope.busy = true;
        $scope.options.predicate = key;
        $scope.options.reverse = !$scope.options.reverse;

        $scope.sortBy({cb: cb});
      };
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      nextPage: "&",
      ngModel: "=",
      options: "=",
      sortBy: "&"
    },
    template: "<div class='rs-table'>" +
    "<ng-transclude style='display: none;'></ng-transclude>" +
    "<div class='rs-table-container'>" +
    "<div class='rs-loading' ng-show='options.showSpinner && busy'><div class='rs-spinner'><div></div><div></div><div></div></div></div>" +
    "<div class='rs-table-header'>" +
    "<div class='rs-table-column' ng-repeat='column in columns' ng-style='{ \"width\" : column.width + \"px\" }' ng-class='{ \"rs-last-column\": $last, \"rs-flex\": !column.width, \"rs-sortable\": column.sortable, \"sort-asc\": options.predicate === column.key && !options.reverse, \"sort-desc\": options.predicate === column.key && options.reverse }'>" +
    "<div ng-if='column.sortable' ng-click='sort(column.key)'>{{::column.title}}</div>" +
    "<div ng-if='!column.sortable'>{{::column.title}}</div></div></div><div class='rs-table-body' rs-viewport>" +
    "<rs-table-control columns='columns' ng-model='ngModel'></rs-table-control>" +
    "</div></div></div>",
    transclude: true
  };
}).directive("rsTableControl", ["$compile", function($compile) {
  function calculateHeight(models) {
    if (models === null || models === undefined || !models.length)
      return 0;

    return models.length  * 30;
  }

  function createRowTemplate($element) {
    var row = {};

    if (!row.template) {
      var template = angular.element("<rs-table-row></rs-table-row>");
      $element.append(template);
      row = {
        height: template.height(),
        template: template,
        cache: []
      };
      template.remove();
    }

    return row;
  }

  return {
    controller: ["$scope", "$element", function($scope, $element) {
      var self = this;
      $scope.busy = false;
      var parentController;
      var scrollDistance = 0;

      this.setParent = function(parent) {
        parentController = parent;
        scrollDistance = parentController.scrollDistance();
      };

      this.loadMore = function() {
        var cb = function() {
          $element.height(calculateHeight($scope.ngModel));
        };

        parentController.loadMore(cb);
      };

      var templates = createRowTemplate($element, $scope.ngModel);
      $element.height(calculateHeight($scope.ngModel));

      this.update = function() {
        var port = {
          top: self.viewport.scrollTop(),
          bottom: self.viewport.scrollTop() + (self.viewport.outerHeight())
        };

        if (port.bottom >= $element.height() - scrollDistance)
          this.loadMore();

        var bounds = { top: 0, bottom: 0 };

        _.forEach($element.children(), function(entry) {
          if ($(entry).scope !== null && $(entry).scope !== undefined && $(entry).is(":visible") ) {
            $(entry).hide();
            templates.cache.push($(entry));
          }
        });

        for (var i = 0; i < $scope.ngModel.length; ++i) {
          if (bounds.top >= port.bottom)
            break;

          var model = $scope.ngModel[i];
          bounds.bottom += 30;

          if (!(bounds.top <= port.top && bounds.bottom <= port.top)) {
            var cache = templates.cache;

            var entry;
            if (cache.length) {
              entry = cache.pop();
              entry.scope().ngModel = model;
              entry.scope().columns = $scope.columns;
            } else {
              entry = templates.template.clone();
              $element.append(entry);
              var scope = $scope.$new();
              scope.ngModel = model;
              scope.columns = $scope.columns;

              $compile(entry)(scope, undefined, { transcludeControllers: self });
            }

            entry.css({top: bounds.top + "px"});
            entry.show();
          }

          bounds.top = bounds.bottom;
        }
      };

      this.onUpdate = function() {
        $scope.$apply(function() {
          self.update();
        });
      };
    }],
    link: function($scope, element, attr, ctrls) {
      var ctrl = ctrls[1];
      var parentController = ctrls[2];

      ctrl.setParent(parentController);

      ctrl.viewport = ctrls[0].viewport;
      ctrl.viewport.css({"overflow-y": "auto", "display": "block"});

      ctrl.viewport.bind("scroll", ctrl.onUpdate);
      $(window).resize(ctrl.onUpdate);

      $scope.$on("sort", function() {
        ctrl.onUpdate();
      });

      $scope.$on("$destroy", function() {
        $(window).off("resize");
        ctrl.viewport.unbind("scroll");
      });

      ctrl.update();
    },
    replace: true,
    require: [ "?^rsViewport", "rsTableControl", "^rsTable" ],
    restrict: "E",
    scope: {
      columns: "=",
      ngModel: "="
    },
    template: "<div class='rs-table-control'></div>"
  };
}]).directive("rsTableRow", function() {
  return {
    replace: true,
    restrict: "E",
    template: "<div class='rs-table-row'>" +
    "<div class='rs-table-column' ng-repeat='column in columns' ng-class='{ \"rs-flex\": !column.width }' ng-style='{ \"width\" : column.width + \"px\" }'>{{ngModel[column.key]}}</div>" +
    "</div>"
  };
}).directive("rsTableColumn", function () {
  return {
    link: function (scope, element, attrs, rsTable) {
      var col = {};
      col.key = scope.modelColumn;
      col.title = scope.header ? scope.header : scope.modelColumn.charAt(0).toUpperCase() + scope.modelColumn.slice(1);
      if (scope.sortable)
        col.sortable = scope.sortable;
      if (scope.width)
        col.width = scope.width;

      rsTable.addColumn(col);
    },
    replace: true,
    require: "^rsTable",
    restrict: "E",
    scope: {
      header: "@",        // Column header content.
      modelColumn: "@",   // Property shown in this column.
      sortable: "@",      // Column is sortable.
      width: "@"          // Column width in pixels.
    }
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsTags", [function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.opts = {
        rowFactory: function() {
          return {
            name: ""
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      tagsList: "="
    },
    template:
    "<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-tags'>" +
    "  <label class='rs-tag' for='rs-tag-input-{{$index}}' ng-repeat='tag in internalModel'>" +
    "    <a ng-click='remove(tag)' ng-if='!$last'>" +
    "      <i class='icon-icons_Delete'></i>" +
    "    </a>" +
    "    <input class='rs-tag-input' type='text' " +
    "           ng-change='changed(tag)' ng-model='tag.name' " +
    "           placeholder='Add Tag' " +
    "           typeahead='tag as tag.name for tag in $parent.$parent.tagsList | filter: $viewValue' " +
    "           name='rs-tag-input-{{$index}}' />" +
    "  </label>" +
    "</div>"
  };
}]).directive("rsSuggestedTags", [function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.opts = {
        rowFactory: function() {
          return {
            name: ""
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      tagsList: "="
    },
    template:
    "<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-tags'>" +
    "  <label class='rs-tag' for='rs-tag-input-{{$index}}' ng-repeat='tag in internalModel' ng-if='!$last'>" +
    "    <a ng-click='remove(tag)' ng-if='!$last'>" +
    "      <i class='icon-icons_Delete'></i>" +
    "    </a>" +
    "    <input class='rs-tag-input' type='text' " +
    "           ng-change='changed(tag)' ng-model='tag.name' " +
    "           placeholder='Add Tag' " +
    "           typeahead='tag as tag.name for tag in $parent.$parent.tagsList | filter: $viewValue' " +
    "           name='rs-tag-input-{{$index}}' disabled='disabled'/>" +
    "  </label>" +
    "</div>"
  };
}]);

/*global rockspoonUi: true */
rockspoonUi.directive("rsTakeoutInfo", function() {
  return {
    restrict: "E",
    replace: true,
    require: "ngModel",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-takeout-info'>" +
    "  <rs-section title='Takeout'>" +
    "    <rs-section title='Takeout Time Estimate' mandatory='true'>" +
    "      <rs-estimated-time type='Takeout' ng-model='ngModel.estimatedTime'></rs-estimated-time>" +
    "    </rs-section>" +
    "    <rs-section title='Person in charge Takeout'>" +
    "      <rs-person-in-charge ng-model='ngModel.personInCharge'></rs-person-in-charge>" +
    "    </rs-section>" +
    "  </rs-section>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsTempClosure", function() {
  return  {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template:
    "<div class='rs-temp-closure'>" +
    "  <rs-label ng-if='ngModel.tempClosedTime.from == null' label='This restaurant is currently operating under normal scheduled business hours (including holidays)'></rs-label>" +
    "  <rs-label ng-if='ngModel.tempClosedTime.from == null' class='no-additional-label' label='No additional closures are scheduled'></rs-label>" +
    "  <rs-date-range temporary-closure='true' label-from='From' label-to='To' ng-model='ngModel.tempClosedTime' label-same-line='true'></rs-date-range>" +
    "  <rs-label ng-if='ngModel.tempClosedTime.from != null' label='Reason'></rs-label>" +
    "  <textarea ng-if='ngModel.tempClosedTime.from != null' ng-model='ngModel.reason'></textarea>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("currency", function() {
  return {
    require : "ngModel",
    link: function(scope, element, attrs, ctrl) {
      var RE = /^((\-|\+)|(\-|\+)?(\d{1,6})(\.\d{0,2})?)$/;
      ctrl.$parsers.push(function(inputValue) {
        if (inputValue !== null && inputValue !== "" && !RE.test(inputValue)) {
          ctrl.$setViewValue(ctrl.$modelValue);
          ctrl.$render();
          return ctrl.$modelValue;
        }

        return inputValue;
      });
    }
  };
}).directive("digit", function() {
  return {
    require : "ngModel",
    link: function(scope, element, attrs, ctrl) {
      var RE = /^[\d]*$/;
      ctrl.$parsers.push(function(inputValue) {
        if (inputValue !== null && inputValue !== "" && !RE.test(inputValue)) {
          ctrl.$setViewValue(ctrl.$modelValue);
          ctrl.$render();
          return ctrl.$modelValue;
        }

        return inputValue;
      });
    }
  };
}).directive("decimal", function() {
  return {
    require : "ngModel",
    link: function(scope, element, attrs, ctrl) {
      var RE = /^[\d]*(\.[\d]*)?$/;
      ctrl.$parsers.push(function(inputValue) {
        if (inputValue !== null && inputValue !== "" && !RE.test(inputValue)) {
          ctrl.$setViewValue(ctrl.$modelValue);
          ctrl.$render();
          return ctrl.$modelValue;
        }

        return inputValue;
      });
    }
  };
}).directive("rsTextEdit", ["$compile", function($compile) {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    link: function(scope, elm, attrs) {
      var type = "text";
      var decimal = "";
      var currency = "";
      var digit = "";
      var paddingClass = "";
      var required = "";
      var d;

      if (attrs.mandatory === "true")
        required = "required";

      if (attrs.password === "")
        type = "password";

      if (attrs.currency === "")
        currency = " currency ";

      if (attrs.digit === "")
        digit = " digit ";

      if (attrs.decimal === "")
        digit = " decimal ";

      if (scope.label !== null && scope.label !== undefined && scope.label !== "")
        paddingClass = "label-space";

      if (scope.labelSameLine !== undefined && scope.labelSameLine !== true)
        d = angular.element("<div style='display:table-row'><div class='text-label' style='display:table-cell'><label class='" + paddingClass + "' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i></label></div></div><div style='display:table-row'><div class='text-field' style='width:100%;display:table-cell'><input name='input_{{::uid}}' type='" + type + "' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='onChange()' " + currency + digit + decimal + required + "/><div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'><ng-message when='required'>This field is required.</ng-message></div></div></div>");
      else
        d = angular.element("<div class='text-label' style='display:table-cell'><label class='" + paddingClass + "' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i></label></div><div class='text-field' style='width:100%;display:table-cell'><input name='input_{{::uid}}' type='" + type + "' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='onChange()' " + currency + digit + decimal + required + "/><div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'><ng-message when='required'>This field is required.</ng-message></div></div>");

      elm.append(d);
      $compile(d)(scope);
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      labelSameLine: "=",
      mandatory: "=",
      ngModel: "=",
      onChange: "&",
      placeholder: "@",
      showValidationErrors: "@"
    },
    template: "<div ng-form='form' class='rs-text-edit'></div>"
  };
}]).directive("rsTextEditCompare", ["$compile", function($compile) {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
      $scope.compareModel= "";
    }],
    link: function(scope, elm, attrs) {
      var type = "text";
      var decimal = "";
      var currency = "";
      var digit = "";
      var paddingClass = "";
      var required = "";
      var d;

      if (attrs.mandatory === "true")
        required = "required";

      if (attrs.password === "")
        type = "password";

      if (attrs.currency === "")
        currency = " currency ";

      if (attrs.digit === "")
        digit = " digit ";

      if (attrs.decimal === "")
        digit = " decimal ";

      if (scope.label !== null && scope.label !== undefined && scope.label !== "")
        paddingClass = "label-space";

      if (scope.labelSameLine !== undefined && scope.labelSameLine !== true)
        d = angular.element(
          "<div style='display:table-row'>" +
          "  <div class='text-label' style='display:table-cell'>" +
          "    <label class='" + paddingClass + "' style='text-align:right'>{{::label}}" +
          "      <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'>" +
          "      </i>" +
          "    </label>" +
          "  </div>" +
          "</div>" +
          "<div style='display:table-row'>" +
          "  <div class='text-field' style='width:100%;display:table-cell'>" +
          "    <input name='input_{{::uid}}' type='" + type + "' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='onChange()' " + currency + digit + decimal + required + "/>" +
          "    <div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>" +
          "      <ng-message when='required'>This field is required.</ng-message>" +
          "    </div>" +
          "  </div>" +
          "</div>" +
          "<div style='display:table-row'>" +
          "  <div class='text-label' style='display:table-cell'>" +
          "    <label class='" + paddingClass + "' style='text-align:right'>Confirm {{::label}}" +
          "      <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'>" +
          "      </i>" +
          "    </label>" +
          "  </div>" +
          "</div>" +
          "<div style='display:table-row'>" +
          "  <div class='text-field' style='width:100%;display:table-cell'>" +
          "    <input name='input_compare_{{::uid}}' type='" + type + "' placeholder='{{::placeholder}}' ng-model='compareModel' compare-to='ngModel' ng-change='onChange()' " + currency + digit + decimal + required + "/>" +
          "    <div ng-messages='form.input_compare_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>" +
          "      <ng-message when='required'>This field is required.</ng-message>" +
          "      <ng-message when='matchingFields'>Fields do not match.</ng-message>" +
          "    </div>" +
          "  </div>" +
          "</div>");
      else
        d = angular.element("" +
        "<div class='text-label' style='display:table-cell'>" +
        "  <label class='" + paddingClass + "' style='text-align:right'>{{::label}}" +
        "    <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i>" +
        "  </label>" +
        "</div>" +
        "<div class='text-field' style='width:100%;display:table-cell'>" +
        "  <input name='input_{{::uid}}' type='" + type + "' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='onChange()' " + currency + digit + decimal + required + "/>" +
        "  <div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>" +
        "    <ng-message when='required'>This field is required.</ng-message>" +
        "    <ng-message when='matchingFields'>Fields do not match.</ng-message>" +
        "  </div>" +
        "</div>" +
        "<div class='text-label' style='display:table-cell'>" +
        "  <label class='" + paddingClass + "' style='text-align:right'>Confirm {{::label}}" +
        "    <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i>" +
        "  </label>" +
        "</div>" +
        "<div class='text-field' style='width:100%;display:table-cell'>" +
        "  <input name='input_compare{{::uid}}' type='" + type + "' placeholder='{{::placeholder}}' ng-model='compareModel' compare-to='ngModel' ng-change='onChange()' " + currency + digit + decimal + required + "/>" +
        "  <div ng-messages='form.input_compare{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>" +
        "    <ng-message when='required'>This field is required.</ng-message>" +
        "    <ng-message when='matchingFields'>Fields do not match.</ng-message>" +
        "  </div>" +
        "</div>");

      elm.append(d);
      $compile(d)(scope);
    },
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      labelSameLine: "=",
      mandatory: "=",
      ngModel: "=",
      compareModel: "=",
      onChange: "&",
      placeholder: "@",
      showValidationErrors: "@"
    },
    template: "<div ng-form='form' class='rs-text-edit'></div>"
  };
}]).directive("rsTextArea", function() {
  return {
    controller: ["$scope", "UID", function($scope, UID) {
      $scope.uid = UID.create();
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      mandatory: "=",
      ngModel: "=",
      onChange: "&",
      placeholder: "@",
      showValidationErrors: "@"
    },
    template:
    "<div ng-form='form' class='rs-text-area'>" +
    "  <div ng-if='label'>" +
    "    <div class='text-label'>" +
    "      <label>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>" +
    "    </div>" +
    "  </div>" +
    "  <div>" +
    "    <textarea name=text_{{::uid}} ng-model='ngModel' ng-required=mandatory ng-change='changed()' placeholder='{{::placeholder}}'></textarea>" +
    "    <div ng-messages='form.text_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>" +
    "      <ng-message when='required'>Required</ng-message>" +
    "    </div>" +
    "  </div>" +
    "</div>"
  };
});

/*global rockspoonUi: true */
rockspoonUi.directive("rsTime", function() {
  return {
    compile: function() {
      return {
        pre: function(scope, element, attributes) {
          scope.settings = {
            minuteStep : 1,
            minDate : null,
            maxDate : null,
            fixedDay: true,
            show24Hours: false
          };
          var timeOptions = scope.$eval(attributes.timeOptions);
          if (timeOptions) {
            for (var key in timeOptions) {
              scope.settings[key] = timeOptions[key];
            }
          }
        }
      };
    },
    controller : ["$scope", function($scope) {
      if ($scope.ngModel === null || $scope.ngModel === undefined)
        $scope.ngModel = new Date();

      $scope.$watch(function() {
        return $scope.ngModel;
      }, function() {
        if ($scope.ngModel) {
          $scope.internalModel = moment($scope.ngModel).clone().toDate();
        }
      }, true);

      $scope.$watch(function() {
        return $scope.internalModel;
      }, function() {
        if ($scope.internalModel) {
          $scope.ngModel = moment($scope.internalModel);
        }
      }, true);

    }],
    require: "ngModel",
    restrict: "E",
    scope: {
      minuteStep: "=",
      ngModel: "=",
      onChange: "&"
    },
    template:
      "<div class='rs-time'>" +
      "  <input type='text' ng-model='internalModel' ps-input-time class='rs-time-input' ng-change='onChange()' time-options='settings' />" +
      "</div>"
  };
}).directive("rsTimeRange", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.changed = function() {
        if (_.isFunction($scope.$parent.changed))
          $scope.$parent.changed($scope.ngModel);
      };

      $scope.options = [ "Same Day", "Next Day" ];
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      timeOptions: "="
    },
    template:
    "<div class='rs-time-range'>" +
    "  <div class='rs-from' ng-class='{lightgray:ngModel.$isNew}'>" +
    "    <rs-label>From</rs-label>" +
    "  </div>" +
    "  <rs-time time-options='timeOptions' ng-model='ngModel.from' ng-class='{lightgray:ngModel.$isNew}' on-change='changed()'></rs-time>" +
    "  <div class='rs-to' ng-class='{lightgray:ngModel.$isNew}'>" +
    "    <rs-label>To</rs-label>" +
    "  </div>" +
    "  <div class='rs-which-day'>" +
    "    <rs-combo-box options='options' on-change='changed()' ng-model='ngModel.whichDay' ng-class='{lightgray:ngModel.$isNew}'></rs-combo-box>" +
    "  </div>" +
    "  <rs-time time-options='timeOptions' ng-model='ngModel.to' ng-class='{lightgray:ngModel.$isNew}' on-change='changed()'></rs-time>" +
    "</div>"
  };
}).directive("rsMultiTime", function() {
  var lastHour = moment("1970-01-01T23:59:00.000Z");
  return {
    controller: ["$scope", function($scope) {
      $scope.changed = function(newD, oldD) {
        for (var i = 0; i < newD.length; ++i) {
          if (newD[i].whichDay === null || newD[i].whichDay === undefined)
            newD[i].whichDay = oldD[i].whichDay;

          if (newD.length > i + 1 && newD[i + 1].from.isBefore(newD[i].to))
            newD[i + 1].from = newD[i].to.clone();

          if (newD[i].whichDay === "Next Day") {
            if (newD[i].to.isAfter(newD[0].from) || newD[i].to.isSame(newD[0].from))
              newD[i].to = newD[0].from.clone();

            newD[i].isFinal = true;
            if ((i + 1) < newD.length)
              $scope.ngModel.splice(i + 1, $scope.ngModel.length - i - 1);
            return;
          } else {
            if (!newD[i].from.isSame(newD[i].to) && newD[i].from.isAfter(newD[i].to))
              newD[i].to = newD[i].from.clone();

            if (newD[i].to.toDate() >= lastHour)
              newD[i].isFinal = true;
            else
              newD[i].isFinal = false;
          }
        }
      };

      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      _.forEach($scope.ngModel, function(model) {
        if (model.from.isBefore(model.to))
          model.whichDay = "Same Day";
        else {
          model.whichDay = "Next Day";
        }
      });

      $scope.opts = {
        rowFactory: function() {
          return {
            from: moment("1970-01-01T09:00:00.000Z"),
            to: moment("1970-01-01T18:00:00.000Z"),
            whichDay: "Same Day"
          };
        }
      };
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      id: "@",
      label: "@",
      ngDisabled: "=",
      ngModel: "=",
      timeOptions: "="
    },
    template:
    "<div class='rs-multi-time'>" +
    "  <rs-multi-line ng-model='ngModel' ng-opts='opts'>" +
    "    <div style='display:table; margin-bottom: 5px' ng-repeat='model in internalModel' ng-hide='$last && internalModel[$index - 1].isFinal'>" +
    "      <div class='remove-button'>" +
    "        <div ng-if='!$last' ng-click='remove(model)'>" +
    "          <i class='icon-icons_Delete'></i>" +
    "        </div>" +
    "      </div>" +
    "      <div style='display:table-cell; width:90%; vertical-align: middle'>" +
    "        <rs-time-range ng-model='model' time-options='$parent.$parent.timeOptions'></rs-time-range>" +
    "      </div>" +
    "    </div>" +
    "  </rs-multi-line>" +
    "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsTitleDescription", function() {
  return {
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "=",
      type: "@",
      showAbbreviation: "@",
      showValidationErrors: "@"
    },
    template:
      "<div ng-form='form' novalidate class='rs-title-description'>" +
      "  <rs-text-edit label='{{type}} Name' placeholder='{{type}} Name' label-same-line='false' mandatory='true' show-validation-errors='showValidationErrors' ng-model='ngModel.title'></rs-text-edit>" +
      "  <rs-text-edit label='Abbreviation' placeholder='Abbreviation' label-same-line='false' mandatory='true' show-validation-errors='showValidationErrors' ng-model='ngModel.abbreviation' ng-if='showAbbreviation'></rs-text-edit>" +
      "  <rs-text-area label='{{type}} Description' placeholder='{{type}} Description' mandatory='false' show-validation-errors='showValidationErrors' ng-model='ngModel.description'></rs-text-area>" +
      "</div>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsUtensils", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.changed = function() {
        if (_.isFunction($scope.$parent.changed))
          $scope.$parent.changed($scope.ngModel);
      };

      $scope.options = [ 0, 1, 2, 3, 4, 5, 6 , 7, 8, 9, 10 ];
    }],
    replace: true,
    require: "ngModel",
    restrict: "E",
    scope: {
      ngModel: "="
    },
    template: "<div class='rs-utensils' ng-class='{lightgray:ngModel.$isNew}'><table><tr><td><rs-text-edit label='Name' ng-model='ngModel.name' label-same-line='true' on-change='changed()'></rs-text-edit></td><td></td></tr><tr><td><rs-combo-box label='Customer can request up to' ng-model='ngModel.quantity' options='options'></rs-combo-box></td><td><rs-label class='rs-extra-label'>extra items free of charge.</rs-label></td></tr><tr><td><rs-text-edit class='rs-currency' label='Cost of each additional extra item $' ng-model='ngModel.price' label-same-line='true' currency on-change='changed()'></rs-text-edit></td><td></td></tr></div>"
  };
}).directive("rsMultiUtensils", function() {
  return {
    controller: ["$scope", function($scope) {
      $scope.remove = function(model) {
        if (_.isFunction($scope.$parent.remove))
          $scope.$parent.remove(model);
      };

      $scope.opts = {
        rowFactory: function() {
          return {
            name: "",
            quantity: 0,
            price: 0
          };
        }
      };
    }],
    replace: false,
    require: "ngModel",
    restrict: "E",
    scope: {
      label: "@",
      ngModel: "="
    },
    template: "<rs-label label='{{::label}}'></rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'><div class='rs-multi-utensils'><div style='display:table' ng-repeat='model in internalModel'><div class='remove-button'><div ng-if='!$last' ng-click='remove(model)'><i class='icon-icons_Delete'></i></div></div><div style='display:table-cell;width:90%'><rs-utensils ng-model='model'></rs-utensils></div></div></div></rs-multi-line>"
  };
});
/*global rockspoonUi: true */
rockspoonUi.directive("rsViewport", function() {
  return {
    controller: ["$element", function($element) {
      this.viewport = $element;
    }]
  };
});
/*global rockspoonUi: true */
rockspoonUi.factory("UID", function() {
  var nextUid = 0;

  return {
    create: function() {
      var str = nextUid.toString(36);
      while (str.length < 3) {
        str = "0" + str;
      }
      nextUid++;
      return str;
    }
  };
});

angular.module('ps.inputTime', [])
.value('psInputTimeConfig', {
        minuteStep : 5,
        minDate : null,
        maxDate : null,
        fixedDay: true,
        format: 'hh : mm a'
    })
.directive("psInputTime", ['$filter', 'psInputTimeConfig', '$parse', function($filter, psInputTimeConfig, $parse) {
      var temp12hr = '((0[0-9])|(1[0-2]))[\\s][:][\\s]([0-5][0-9])[\\s][apAP][mM]',
        temp24hr = '([01][0-9]|2[0-3])[\\s][:;][\\s][0-5][0-9]',
        temp24noColon = '(2[0-3]|[01]?[0-9])([0-5][0-9])';
    var customFloor = function(value, roundTo) {
        return Math.floor(value / psInputConfig.minuteStep) * psInputConfig.minuteStep;
    };
    var timeTest12hr = new RegExp('^' + temp12hr + '$'),
        timeTest24hr = new RegExp('^' + temp24hr + '$'),
        timeTest24noColon = new RegExp('^' + temp24noColon + '$');
    return {
        restrict: "A",
        require: '?^ngModel',
        scope: {
            timeOptions: "="
        },
        link: function(scope, element, attrs, ngModel) {
            if (!ngModel) return; // do nothing if no ng-model

            var minuteStep = scope.timeOptions.minuteStep || psInputTimeConfig.minuteStep,
                fixedDay = scope.timeOptions.fixedDay ||  psInputTimeConfig.fixedDay,
                timeFormat = scope.timeOptions.show24Hours ? "HH : mm" : "hh : mm a",
                maxDate = null,
                minDate = null;

            function getValue(value, defaultValue) {
                return angular.isDefined(value) ? scope.$parent.$eval(value) : defaultValue;
            }

            if(attrs.min || attrs.max){
                fixedDay = false;
            }

            function checkMinMaxValid(){
              if(minDate !== null && ngModel.$modelValue < minDate){
                  ngModel.$setValidity('time-min', false);
              }else if (minDate !== null) ngModel.$setValidity('time-min', true);

              if(maxDate !== null && ngModel.$modelValue > maxDate){
                  ngModel.$setValidity('time-max', false);
              } else if (maxDate !== null) ngModel.$setValidity('time-max', true);

            }

            if (attrs.max) {
                scope.$parent.$watch($parse(attrs.max), function(value) {
                  maxDate = value ? new Date(value) : null;
                  checkMinMaxValid();
                });
            }

            if (attrs.min) {
                scope.$parent.$watch($parse(attrs.min), function(value) {
                  minDate = value ? new Date(value) : null;
                  checkMinMaxValid();
                });
            }

            var reservedKey = false;

            element.on('keydown', function(e) {
                reservedKey = false;
                switch (e.keyCode) {
                    case 37:
                        // left button hit
                        if(verifyFormat()){
                            tabBackward(e);
                            reservedKey = true;
                        }
                        break;
                    case 38:
                        // up button hit
                        if(verifyFormat()) {
                            addTime();
                            reservedKey = true;
                        }
                        break;
                    case 39:
                        // right button hit
                        if(verifyFormat()){
                            tabForward(e);
                            reservedKey = true;

                        }
                        break;
                    case 40:
                        // down button hit
                        if(verifyFormat()) {
                            subtractTime();
                            reservedKey = true;
                        }
                        break;
                    case 9:
                        // TAB

                        if(verifyFormat()){
                            if(e.shiftKey){
                                if(getSelectionPoint() != 'hour') {
                                    reservedKey = true;
                                    tabBackward(e);
                                }
                            } else{
                                if(getSelectionPoint() != 'meridian') {
                                    reservedKey = true;
                                    tabForward(e);
                                }
                            }
                        }


                        break;
                    case 65:
                        e.preventDefault();
                        break;
                    case 8:
                        e.preventDefault();
                        break;

                    default:
                        if (getSelectionPoint() == 'hour' && e.keyCode > 31 && (e.keyCode  < 48 || e.keyCode  > 57)) {
                            e.preventDefault();
                        }
                        else if (getSelectionPoint() == 'minute' && e.keyCode > 31 && (e.keyCode  < 48 || e.keyCode  > 57)) {
                            e.preventDefault();
                        }
                        else if (getSelectionPoint() == 'meridian') {
                            e.preventDefault();
                        }
                        break;
                }
                if(reservedKey){
                    e.preventDefault();
                }
            }).on('keyup blur', function(){
                if (checkTimeFormat(element.val()) != 'invalid' && !reservedKey){
                    scope.$apply(function (){
                        ngModel.$setViewValue(createDateFromTime(element.val(), ngModel.$modelValue));
                        tabForward();
                    });
                }

            }).on('click', function() {

                selectTime(getSelectionPoint());

            });

            function verifyFormat(){
                if(checkTimeFormat( element.val() ) == '12hr' || checkTimeFormat( element.val() ) == '24hr') return true;
                else if (element.val() === ''){
                    element.val(formatter(getDefaultDate()));
                    ngModel.$setViewValue(getDefaultDate());
                    setTimeout(function() {
                        selectTime('hour');
                    }, 0);
                    return true;
                }
                else if (checkTimeFormat( element.val() ) != 'invalid') {
                    element.val(formatter(ngModel.$modelValue));
                    ngModel.$setViewValue(getDefaultDate());
                    setTimeout(function() {
                        selectTime('hour');
                    }, 0);
                    return true;
                } else return false;
            }

            function selectTime(part) {
                if (part == 'hour') {
                    setTimeout(function() {
                        element[0].setSelectionRange(0, 2);
                    }, 0);
                } else if (part == 'minute') {
                    setTimeout(function() {
                        element[0].setSelectionRange(5, 7);
                    }, 0);
                } else {
                    setTimeout(function() {
                        element[0].setSelectionRange(8, 10);
                    }, 0);
                }
            }

            function getSelectionPoint() {
                var pos = element.prop("selectionStart");
                if(element.val().length < 1){
                    return 'hour';
                }
                if (pos < 4) {
                    return 'hour';
                } else if (pos < 8) {
                    return 'minute';
                } else if (pos < 11) {
                    return 'meridian';
                } else return 'unknown';
            }

            function tabForward() {
                var cspot = getSelectionPoint();
                if (cspot == 'hour') {
                    selectTime('minute');
                } else if (cspot == 'minute') {
                    selectTime('meridian');
                } else {
                    selectTime('hour');
                }
            }

            function tabBackward(e) {
                var cspot = getSelectionPoint();
                if (cspot == 'meridian') {
                    selectTime('minute');
                    e.preventDefault();
                } else if (cspot == 'minute') {
                    selectTime('hour');
                    e.preventDefault();
                } else {
                    selectTime('meridian');
                }
            }

            function getDefaultDate(){
                if(minDate !== null) return new Date(minDate);
                else if (maxDate !== null) return new Date(maxDate);
                else return new Date();
            }

            function parser(value) {

                if(value){
                    if(angular.isDate(value)){
                        checkMinMaxValid();
                        ngModel.$setValidity('time', true);

                        if(minDate !== null && value < minDate) value = minDate;
                        if(maxDate !== null && value > maxDate) value = maxDate;

                        return value;

                    } else{

                        ngModel.$setValidity('time', false);
                        return ngModel.$modelValue;
                    }

                }

            }

            ngModel.$parsers.push(parser);

            function formatter(value) {

                if (value) {
                    return $filter('date')(value, timeFormat);
                }
            }

            ngModel.$formatters.push(formatter);

            function createDateFromTime(time,cdate){
                if(isNaN(cdate)){
                    cdate = getDefaultDate();
                }
                var ct = checkTimeFormat(time),
                        minutes, hours, ampm, sHours, sMinutes;
                if(ct == '12hr'){
                    hours = Number(time.match(/^(\d+)/)[1]);
                    minutes = Number(time.match(/:[\s](\d+)/)[1]);
                    AMPM = time.match(/[apAP][mM]/)[0];
                    if(AMPM.toUpperCase() == "PM" && hours<12) hours = hours+12;
                    if(AMPM.toUpperCase() == "AM" && hours==12) hours = hours-12;



                } else if (ct == '24hr'){
                    hours = Number(time.match(/^(\d+)/)[1]);
                    minutes = Number(time.match(/:[\s](\d+)/)[1]);
                } else if (ct == '24nc') {
                    hours = time.length == 4 ? time.substr(0,2) : time.substr(0,1);
                    minutes = time.substr(-2);
                } else {
                    return 'invalid';
                }
                sHours = hours.toString();
                sMinutes = minutes.toString();
                if(hours<10) sHours = "0" + sHours;
                if(minutes<10) sMinutes = "0" + sMinutes;
                cdate.setHours(sHours,sMinutes);
                return new Date(cdate);
            }

            function checkTimeFormat(value){
                if(timeTest12hr.test(value)) return '12hr';
                else if (timeTest24hr.test(value)) return '24hr';
                else if (timeTest24noColon.test(value)) return '24nc';
                else return 'invalid';
            }


            function addTime() {
                var cPoint = getSelectionPoint();
                if (cPoint == 'hour') {
                    addMinutes(60);
                } else if (cPoint == 'minute') {
                     addMinutes(minuteStep);
                } else if (cPoint == 'meridian') {
                    if ((ngModel.$modelValue ? ngModel.$modelValue : getDefaultDate()).getHours > 12) {
                        addMinutes(-720);
                    } else {
                        addMinutes(720);
                    }
                }
                selectTime(cPoint);
            }

            function subtractTime() {
                var cPoint = getSelectionPoint();
                if (cPoint == 'hour') {
                    addMinutes(-60);
                } else if (cPoint == 'minute') {
                    addMinutes(-1);
                } else if (cPoint == 'meridian') {
                    if ((ngModel.$modelValue ? ngModel.$modelValue : getDefaultDate()).getHours > 12) {
                        addMinutes(720);
                    } else {
                        addMinutes(-720);
                    }
                }
                selectTime(cPoint);
            }

            function addMinutes(minutes){
                selected = ngModel.$modelValue ? new Date(ngModel.$modelValue) : getDefaultDate();
                dt = new Date(selected.getTime() + minutes * 60000);
                if(fixedDay === true || fixedDay == 'true'){
                    dt = selected.setHours(dt.getHours(), dt.getMinutes());
                    dt = new Date(dt);
                }
                scope.$apply(function (){
                    ngModel.$setViewValue(dt);
                });
                element.val(formatter(ngModel.$modelValue));
            }

        }
    };
}]);

/**
 * @license scalyr v1.0.3
 * (c) 2013 Scalyr, Inc. http://scalyr.com
 * License: MIT
 */

'use strict';

// You may just depend on the 'sly' module to pull in all of the
// dependencies.
angular.module('sly', ['slyEvaluate', 'slyRepeat']);
/**
 * @fileoverview 
 * Defines core functions used throughout the Scalyr javascript
 * code base.  This file is included on every page.
 *
 * @author Steven Czerwinski <czerwin@scalyr.com>
 */

/**
 * @param {Object} value The value to check
 * @returns {Boolean} True if value is an Array
 */
function isArray(value) {
  return Object.prototype.toString.call(value) === '[object Array]';
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is a Boolean
 */
function isBoolean(value) {
  return typeof value == 'boolean';
}

/**
 * @param {Object} value The value to check
 * @returns {Boolean} True if value is a Date object
 */
function isDate(value) {
  return Object.prototype.toString.call(value) === '[object Date]';
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is undefined
 */
function isDefined(value) {
  return typeof value != 'undefined';
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is a Function
 */
function isFunction(value) {
  return typeof value == 'function';
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is null
 */
function isNull(value) {
  return value === null;
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is a Number
 */
function isNumber(value) {
  return typeof value == 'number'; 
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is an Object, not including null
 */
function isObject(value) {
  return value !== null && typeof value == 'object';
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is a string
 */
function isString(value) {
  return typeof value == 'string';
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} True if value is undefined
 */
function isUndefined(value) {
  return typeof value == 'undefined';
}

/**
 * Converts a String or Boolean value to a Boolean.
 *
 * @param {String|Boolean} value The value to convert
 * @returns {Boolean} Returns true for any String that is not
 *   null, empty String, or 'false'.  If value is a Boolean,
 *   returns value
 */
function convertToBoolean(value) {
  if (isBoolean(value))
    return value;
  return value !== null && value !== '' && value !== 'false';
}

/**
 * Determines if obj has a property named prop.
 *
 * @param {Object} obj The object to check
 * @returns {Boolean} Returns true if obj has a property named
 *   prop.  Only considers the object's own properties
 */
function hasProperty(obj, prop) {
  return obj.hasOwnProperty(prop);
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} Returns true if value is a String
 *   and has zero length, or if null or undefined
 */
function isStringEmpty(value) {
  return isNull(value) || isUndefined(value) ||
    (isString(value) && (value.length == 0));
}

/**
 * @param {*} value The value to check
 * @returns {Boolean} Returns true if value is a String
 *   and has non-zero length
 */
function isStringNonempty(value) {
  return isString(value) && (value.length > 0);
}

/**
 * Returns input with the first letter capitalized.
 * The input may not be zero length.
 *
 * @param {String} input The String to capitalize.
 * @returns {String} Returns input with the first letter
 *   capitalized.
 */
function upperCaseFirstLetter(input) {
  return input.charAt(0).toUpperCase() + input.slice(1);
}

/**
 * Returns true if obj1 and obj2 are equal.  This should
 * only be used for Arrays, Objects, and value types.  This is a deep
 * comparison, comparing each property and recursive property to
 * be equal (not just ===).
 *
 * Two Objects or values are considered equivalent if at least one of the following is true:
 *  - Both objects or values pass `===` comparison.
 *  - Both objects or values are of the same type and all of their properties pass areEqual
 *    comparison.
 *  - Both values are NaN. (In JavasScript, NaN == NaN => false. But we consider two NaN as equal).
 *
 * Note, during property comparision, properties with function values are ignores as are property
 * names beginning with '$'.
 *
 * See angular.equal for more details.
 *
 * @param {Object|Array|value} obj1 The first object
 * @param {Object|Array|value} obj2 The second object
 * @returns {Boolean} True if the two objects are equal using a deep
 *   comparison. 
 */
function areEqual(obj1, obj2) {
  return angular.equals(obj1, obj2);
}

/**
 * @param {Number} a The first Number
 * @param {Number} b The second Number
 * @returns {Number} The minimum of a and b
 */
function min(a, b) {
  return a < b ? a : b;
}

/**
 * @param {Number} a The first Number
 * @param {Number} b The second Number
 * @returns {Number} The maximum of a and b
 */
function max(a, b) {
  return a > b ? a : b;
}

/**
 * Returns true if the specified String begins with prefix.
 *
 * @param {*} input The input to check
 @ @param {String} prefix The prefix
 * @returns {Boolean} True if input is a string that begins with prefix
 */
function beginsWith(input, prefix) {
  return isString(input) && input.lastIndexOf(prefix, 0) == 0;
}

/**
 * Returns true if the specified String ends with prefix.
 *
 * @param {*} input The input to check
 @ @param {String} postfix The postfix
 * @returns {Boolean} True if input is a string that ends with postfix
 */
function endsWith(input, postfix) {
  return isString(input) && input.indexOf(postfix, input.length - postfix.length) !== -1;
}

/**
 * Returns a deep copy of source, where source can be an Object or an Array.  If a destination is
 * provided, all of its elements (for Array) or properties (for Objects) are deleted and then all
 * elements/properties from the source are copied to it.   If source is not an Object or Array, 
 * source is returned.
 *
 * See angular.copy for more details.
 * @param {Object|Array} source The source
 * @param {Object|Array} destination Optional object to copy the elements to
 * @returns {Object|Array} The deep copy of source
 */
function copy(source, destination) {
  return angular.copy(source, destination);
}

/**
 * Removes property from obj.
 *
 * @param {Object} obj The object
 * @param {String} property The property name to delete
 */
function removeProperty(obj, property) {
  delete obj[property];
}

/**
 * Removes all properties in the array from obj.
 *
 * @param {Object} obj The object
 * @param {Array} properties The properties to remove
 */
function removeProperties(obj, properties) {
  for (var i = 0; i < properties.length; ++i)
    delete obj[properties[i]];
}

/**
 * Invokes the iterator function once for each item in obj collection, which can be either
 * an Object or an Array. The iterator function is invoked with iterator(value, key),
 * where value is the value of an object property or an array element and key is the
 * object property key or array element index. Specifying a context for the function is
 * optional.  If specified, it becomes 'this' when iterator function is invoked.
 *
 * See angular.forEach for more details.
 *
 * @param {Object|Array} The Object or Array over which to iterate
 * @param {Function} iterator The iterator function to invoke
 * @param {Object} context The value to set for 'this' when invoking the
 *   iterator function. This is optional
 */
function forEach(obj, iterator, context) {
  return angular.forEach(obj, iterator, context);
}

/**
 * Used to define a Scalyr javascript library and optionally declare
 * dependencies on other libraries.  All javascript code not defined in
 * this file should be defined as part of a library.
 *
 * The first argument is the name to call the library.  The second argument
 * is either a Constructor object for the library or an array where the last
 * element is the Constructor for the library and the first to N-1 are string
 * names of the libraries this one depends on.  If you do declare dependencies,
 * the libraries are passed in the Constructor create method in the same order
 * as the strings are defined.
 *
 * Example:
 *  defineScalyrJsLibrary('myUtils', function() {
 *    var fooFunction = function(a, b) {
 *        return a + b;
 *    };
 *    return {
 *      foo: fooFunction
 *    };
 *  });
 *
 *  defineScalyrJsLibrary('anotherUtils', [ 'myUtils', function(myUtils) {
 *    var barFunction = function(a, b) {
 *      return myUtils.foo(a, b);
 *    };
 *    return {
 *      bar: barFunction
 *    };
 *  });
 *
 * @param {String} libraryName The name for the library
 * @param {Constructor|Array} libraryExporter The exporter for the
 *   library.  See above for details
 */
function defineScalyrJsLibrary(libraryName, libraryExporter) {
  var moduleDependencies = [];
  if (libraryExporter instanceof Array) {
    for (var i = 0; i < libraryExporter.length - 1; ++i)
      moduleDependencies.push(libraryExporter[i]);
  }
  
  return angular.module(libraryName, moduleDependencies)
    .factory(libraryName, libraryExporter);              
}

/**
 * Similar to defineScalyrJsLibary but instead of declaring
 * a purely javascript library, this declares an Angular module
 * library.  The moduleName should be a string used to identify
 * this module.  The dependencies is an array with the string
 * names of Angular modules, Scalyr Angular modules, or Scalyr
 * javascript libraries to depend on.  The returned object
 * can be used to define directives, etc similar to angular.module.
 *
 * Example:
 *  defineScalyrAngularModule('slyMyModule', [ 'myTextUtils'])
 *  .filter('camelCase', function(myTextUtils) {
 *     return function(input) {
 *       return myTextUtils.camelCase(input);
 *     };
 *  });
 *
 * @param {String} moduleName The name of the module
 * @param {Array} dependencies The names of modules to depend on
 */
function defineScalyrAngularModule(moduleName, dependencies) {
  return angular.module(moduleName, dependencies);
}
/**
 * @fileoverview
 * Module: slyEvaluate
 *
 * Defines several directives related to preventing evaluating watchers
 * on scopes under certain conditions.  Here's a list of the directives
 * and brief descriptions.  See down below for more details.
 *
 *  slyEvaluateOnlyWhen:  A directive that prevents updating / evaluating
 *      all bindings for the current element and its children unless
 *      the expression has changed values.  If new children are added, they
 *      are always evaluated at least once.  It currently assumes the
 *      expression evaluates to an object and detects changes only by
 *      a change in object reference.  
 *
 *  slyAlwaysEvaluate: Can only be used in conjunction with the
 *      slyEvaluateOnlyWhen directive.  This directive will ensure that
 *      any expression that is being watched will always be evaluated
 *      if it contains the specified string (i.e., it will ignore whether
 *      or not the slyEvaluateOnlyWhen expression has changed.)  This
 *      is useful when you wish to check some expressions all the time.
 *
 *  slyPreventEvaluationWhenHidden:  Will only evaluate the bindings
 *      for the current element and its children if the current element
 *      is not hidden (detected by the element having the ng-hide CSS class.)
 *
 *  slyShow:  Will hide the element if the expression evaluates to false.
 *      Uses ng-hide to hide the element.  This is almost exactly the same
 *      as ngShow, but it has the advantage that it works better with
 *      slyPreventEvaluationWhenHidden by guaranteeing it will always evaluate
 *      its show expression to determine if it should or should not be hidden.
 */
defineScalyrAngularModule('slyEvaluate', ['gatedScope'])
/**
 * Directive for preventing all bound expressions in the current element and its children
 * from being evaluated unless the specified expression evaluates to a different object.
 * Currently, the value assigned to the 'slyEvaluateOnlyWhen' must evaluate to an object.
 * Also, reference equality is used to determine if the expression has changed.
 * TODO: Make this more versatile, similar to $watch.  For now, this is all we need.
 */
.directive('slyEvaluateOnlyWhen', ['$parse', function ($parse) {
  return {
    // We create a new scope just because it helps segment the gated watchers
    // from the parent scope.  Unclear if this is that important for perf.
    scope: true,
    restrict: 'A',
    compile: function compile(tElement, tAttrs) {       
      return {
        // We need a separate pre-link function because we want to modify the scope before any of the
        // children are passed it.
        pre: function preLink(scope, element, attrs) {
          var previousValue = null;
          var initialized = false;

          var expressionToCheck = $parse(attrs['slyEvaluateOnlyWhen']);
          var alwaysEvaluateString = null;
          if (hasProperty(attrs, 'slyAlwaysEvaluate')) {
            alwaysEvaluateString = attrs['slyAlwaysEvaluate'];
            if (isStringEmpty(alwaysEvaluateString))
              throw new Exception('Empty string is illegal for value of slyAlwaysEvaluate');
          }
          scope.$addWatcherGate(function evaluteOnlyWhenChecker() {
            // We should only return true if expressionToCheck evaluates to a value different
            // than previousValue.
            var currentValue = expressionToCheck(scope);
            if (!initialized) {
              initialized = true;
              previousValue = currentValue;
              return true;
            }
            var result = previousValue !== currentValue;
            previousValue = currentValue;
            return result;
          }, function shouldGateWatcher(watchExpression) {
            // Should return true if the given watcher that's about to be registered should
            // be gated.
            return isNull(alwaysEvaluateString) || 
                   !(isStringNonempty(watchExpression) && (watchExpression.indexOf(alwaysEvaluateString) >= 0));
          }, true /* Evaluate any newly added watchers when they are added */);
        },
      };
    },
  };
}])
/**
 * Directive for overriding the 'slyEvaluateOnlyWhen' expression for the current element.
 * This directive takes a single string value.  If this string value is found anywhere in
 * an expression that normally would not be evaluated due to the 'slyEvaluateOnlyWhen'
 * directive, it is evaluated, regardless of whether or not the value for the expression in
 * 'slyEvaluateOnlyWhen' has changed.  This is very useful when a certain expression used by
 * one of the children of the current element should always be evaluated and is not affected
 * by the expression specified in slyEvaluateOnlyWhen.
 */
.directive('slyAlwaysEvaluate', function() {
  // This is just a place holder to show that slyAlwaysEvaluate is a legal
  // directive.  The real work for this directive is done in slyEvaluateOnlyWhen.
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
    },
  };
})
/**
 * Directive for showing an element, very similar to ngShow.  However, this directive
 * works better with slyPreventEvaluationWhenHidden because it is ensure it always
 * will evaluate the show expression to determine if it should be shown or hidden
 * even if slyPreventEvaluationWhenHidden is in effect.  This directive also uses
 * the ng-hide css class to actually hide the element.
 *
 * NOTE: We might be able to get better performance if we have this directive directly
 * perform a callback on slyPreventEvaluationWhenHidden when it is shown/hidden rather
 * than having that directive register a watcher on the css class.
 */
.directive('slyShow', ['$animate', function($animate) {
  /**
   * @param {*} value The input
   * @return {Boolean} True if the value is truthy as determined by angular rules.
   *
   * Note:  This is copied from the Angular source because it is not exposed by Angular
   * but we want our directive to behave the same as ngShow.  Think about moving this
   * to core.js.
   */
  function toBoolean(value) {
    if (value && value.length !== 0) {
      var v = ("" + value);
      v = isString(v) ? v.toLowerCase() : v;
      value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
    } else {
      value = false;
    }
    return value;
  }

  return {
    restrict: 'A',
    link: function slyShowLink(scope, element, attr) {
      scope.$watch(attr.slyShow, function ngSlyShowAction(value){
        $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
      }, false, 'slyShow'); },
  };
}])
/**
 * Directive for preventing all bound expressions in the current element and its children
 * from being evaluated if the current element is hidden as determined by whether or not
 * it has the ng-hide class.
 */
.directive('slyPreventEvaluationWhenHidden', function () {
  return {
    restrict: 'A',
    // We create a new scope just because it helps segment the gated watchers
    // from the parent scope.  Unclear if this is that important for perf.
    scope: true,
    compile: function compile(tElement, tAttrs) {       
      return {
        // We need a separate pre-link function because we want to modify the scope before any of the
        // children are passed it.
        pre: function preLink(scope, element, attrs) {
          scope.$addWatcherGate(function hiddenChecker() {
            // Should only return true if the element is not hidden.
            return !element.hasClass('ng-hide');
          }, function hiddenDecider(watchExpression, listener, equality, directiveName) {
            // Make an exception for slyShow.. do not gate its watcher.
            if (isDefined(directiveName) && (directiveName == 'slyShow'))
              return false;
            return true;
          });
        },
      };
    },
  };
});

/**
 * @fileoverview
 * Module:  slyRepeat
 *
 * Contains the slyRepeat directive, which is is a modified version of the
 * ngRepeat directive that is meant to be more efficient for creating and
 * recreating large lists of bound elements.  In particular, it has an
 * optimization that will prevent DOM elements from being constantly created
 * and destroyed as the contents of the repeated elements change.  It does this
 * by not destroying DOM elements when they are no longer needed, but instead,
 * just hiding them. This might not work for all use cases, but for it does
 * for the ones we do wish to heavily optimize.  For eample, through profiling,
 * we found that destroying DOM elements when flipping through log view pages
 * represented a large chunk of CPU time.
 *
 * Cavaets:  The collection expression must evaluate to an array.  Animators
 *   will not work.  Track By does not work.  Use at your own peril.
 *
 * @author Steven Czerwinski <czerwin@scalyr.com>
 */
defineScalyrAngularModule('slyRepeat', ['gatedScope'])
.directive('slyRepeat', ['$animate', '$parse', function ($animate, $parse) {
  
  /**
   * Sets the scope contained in elementScope to gate all its
   * watchers based on the isActiveForRepeat proprety.
   *
   * @param {Object} elementScope The object containing the
   *   scope and isActiveForRepeat properties.
   */
  function gateWatchersForScope(elementScope) {
    elementScope.scope.$addWatcherGate(function() {
      return elementScope.isActiveForRepeat;
    });
  }

  return {
    restrict: 'A',
    scope: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    compile: function(element, attr, linker) {
      // Most of the work is done in the post-link function.
      return function($scope, $element, $attr) {
        // This code is largely based on ngRepeat.

        // Parse the expression.  It should look like:
        // x in some-expression
        var expression = $attr.slyRepeat;
        var match = expression.match(/^\s*(.+)\s+in\s+(.*?)$/);
        if (!match) {
          throw Error("Expected slyRepeat in form of '_item_ in _collection_' but got '" +
              expression + "'.");
        }

        var iterVar = match[1];
        var collectionExpr = match[2];

        match = iterVar.match(/^(?:([\$\w]+))$/);
        if (!match) {
          throw Error("'item' in 'item in collection' should be identifier but got '" +
              lhs + "'.");
        }
        
        // previousElements will store references to the already existing (DOM) elements
        // that were last used for the last rendering of this repeat and were visible.
        // We will re-use these elements when executing the next rendering of the repeat when
        // the iteration value changes.
        var previousElements = [];
        // previousElementsBuffer will store references to the already existing (DOM) elements
        // that are in the page but were not used for the last rendering of this repeat and were
        // therefore marked as inactive and not visible.  This happens if the length of the repeat
        // iteration goes down over time, since we do not remove the elements.  If the repeat length
        // was first 10, then 5, we will end up with the last 5 elements in the previousElementBuffer.
        // We keep this in case the length increases again.
        var previousElementBuffer = [];

        var deregisterCallback = $scope.$watchCollection(collectionExpr, function(collection) {
          if (!collection)
            return;
          if (!isArray(collection))
            throw Error("'collection' did not evaluate to an array.  expression was " + collectionExpr);
          var originalPreviousElementsLength = previousElements.length;
          // First, reconcile previousElements and collection with respect to the previousElementBuffer.
          // Basically, try to grow previousElements to collection.length if we can.
          if ((previousElements.length < collection.length) && (previousElementBuffer.length > 0)) {
            var limit = previousElements.length + previousElementBuffer.length;
            if (limit > collection.length)
              limit = collection.length;       
            previousElements = previousElements.concat(previousElementBuffer.splice(0, limit - previousElements.length));
          }
          
          var currentElements = null;
          var currentElementBuffer = [];

          var newElements = [];
          if (collection.length > previousElements.length) {
            // Add in enough elements to account for the larger collection.
            for (var i = previousElements.length; i < collection.length; ++i) {
              // Need to add in an element for each new item in the collection.
              var newElement = {
                  scope: $scope.$new(),
                  isActiveForRepeat: true,
              };
              
              gateWatchersForScope(newElement);
              newElement.scope.$index = i;
              newElement.scope.$first = (i == 0);
              newElements.push(newElement);
            }
            currentElements = previousElements.concat(newElements);
            currentElementBuffer = previousElementBuffer;
          } else if (collection.length < previousElements.length) {
            for (var i = collection.length; i < previousElements.length; ++i)
              previousElements[i].isActiveForRepeat = false;

            currentElementBuffer = previousElements.splice(collection.length, previousElements.length - collection.length).concat(
                previousElementBuffer);
            currentElements = previousElements;
          } else {
            currentElements = previousElements;
            currentElementBuffer = previousElementBuffer;
          }
          
          // We have to fix up the last and middle values in the scope for each element in
          // currentElements, since their roles may have changed with the new length.
          // We always have to fix the last element.
          if (currentElements.length > 0) {
            var firstIndexToFix = currentElements.length - 1;
            var lastIndexToFix = currentElements.length - 1;
            // We also have to fix any new elements that were added.
            if (originalPreviousElementsLength < currentElements.length) {
              firstIndexToFix = originalPreviousElementsLength;
            }
            // And we usually have to fix the element before the first element we modified
            // in case it used to be last.
            if (firstIndexToFix > 0) {
              firstIndexToFix = firstIndexToFix - 1;
            }
            for (var i = firstIndexToFix; i <= lastIndexToFix; ++i) {
              currentElements[i].scope.$last = (i == (currentElements.length - 1));
              currentElements[i].scope.$middle = ((i != 0) && (i != (currentElements.length - 1)));
              if (!currentElements[i].isActiveForRepeat) {
                // If it is not marked as active, make it active.  This is also indicates that
                // the element is currently hidden, so we have to unhide it.
                currentElements[i].isActiveForRepeat = true; 
                currentElements[i].element.css('display', '');
              }
            }
          }
          
          // Hide all elements that have recently become inactive.
          for (var i = 0; i < currentElementBuffer.length; ++i) {
            if (currentElementBuffer[i].isActiveForRepeat)
              break;
            currentElementBuffer[i].element.css('display', 'none');
          }

          // Assign the new value for the iter variable for each scope.
          for (var i = 0; i < currentElements.length; ++i) {
            currentElements[i].scope[iterVar] = collection[i];
          }

          // We have to go back now and clone the DOM element for any new elements we
          // added and link them in.  We clone the last DOM element we had created already
          // for this Repeat.
          var prevElement = $element;
          if (previousElements.length > 0)
            prevElement = previousElements[previousElements.length - 1].element;
          for (var i = 0; i < newElements.length; ++i) {
            linker(newElements[i].scope, function(clone) {
              $animate.enter(clone, null, prevElement);
              prevElement = clone;
              newElements[i].element = clone;
            });
          }
            
          previousElements = currentElements;
          previousElementBuffer = currentElementBuffer;
        });
        $scope.$on('$destroy', function() {
          deregisterCallback();
        });
      };
    }
  };
}]);
/**
 * @fileoverview
 * Defines an extension to angular.Scope that allows for registering
 * 'gating functions' on a scope that will prevent all future watchers
 * registered on the scope from being evaluated unless the gating function
 * returns true.
 *
 * By depending on this module, the $rootScope instance and angular.Scope
 * class are automatically extended to implement this new capability.
 *
 * Warning, this implementation depends on protected/private variables
 * in the angular.Scope implementation and therefore can break in the
 * future due to changes in the angular.Scope implementation.  Use at
 * your own risk.
 */
defineScalyrAngularModule('gatedScope', [])
.config(['$provide', function($provide) {
  // We use a decorator to override methods in $rootScope.
  $provide.decorator('$rootScope', ['$delegate', '$exceptionHandler',
      function ($rootScope, $exceptionHandler) {

    // Make a copy of $rootScope's original methods so that we can access
    // them to invoke super methods in the ones we override.
    var scopePrototype = {};
    for (var key in $rootScope) {
      if (isFunction($rootScope[key]))
        scopePrototype[key] = $rootScope[key];
    }

    var Scope = $rootScope.constructor;

    // Hold all of our new methods.
    var methodsToAdd = {
    };

    // A constant value that the $digest loop implementation depends on.  We
    // grab it down below.
    var initWatchVal;

    /**
     * @param {Boolean} isolate Whether or not the new scope should be isolated.
     * @returns {Scope} A new child scope
     */
    methodsToAdd.$new = function(isolate) {
      // Because of how scope.$new works, the returned result
      // should already have our new methods.
      var result = scopePrototype.$new.call(this, isolate);

      // We just have to do the work that normally a child class's
      // constructor would perform -- initializing our instance vars.
      result.$$gatingFunction = this.$$gatingFunction;
      result.$$parentGatingFunction = this.$$gatingFunction;
      result.$$shouldGateFunction = this.$$shouldGateFunction;
      result.$$gatedWatchers = [];
      result.$$cleanUpQueue = this.$$cleanUpQueue;

      return result;
    };

    /**
     * Digests all of the gated watchers for the specified gating function.
     *
     * @param {Function} targetGatingFunction The gating function associated
     *   with the watchers that should be digested
     * @returns {Boolean} True if any of the watchers were dirty
     */
    methodsToAdd.$digestGated = function gatedScopeDigest(targetGatingFunction) {
      // Note, most of this code was stolen from angular's Scope.$digest method.
      var watch, value,
        watchers,
        length,
        next, current = this, target = this, last,
        dirty = false;

      do { // "traverse the scopes" loop
        if (watchers = current.$$gatedWatchers) {
          // process our watches
          length = watchers.length;
          while (length--) {
            try {
              watch = watchers[length];
              // Scalyr edit: We do not process a watch function if it is does not
              // have the same gating function for which $digestGated was invoked.
              if (watch.gatingFunction !== targetGatingFunction)
                continue;

              // Since we are about to execute the watcher as part of a digestGated
              // call, we can remove it from the normal digest queue if it was placed
              // there because the watcher was added after the gate function's first
              // evaluation.
              if (watch && !isNull(watch.cleanUp)) {
                watch.cleanUp();
                watch.cleanUp = null;
              }
              // Most common watches are on primitives, in which case we can short
              // circuit it with === operator, only when === fails do we use .equals
              if (watch && (value = watch.get(current)) !== (last = watch.last) &&
                  !(watch.eq
                      ? areEqual(value, last)
                      : (typeof value == 'number' && typeof last == 'number'
                        && isNaN(value) && isNaN(last)))) {
                dirty = true;
                watch.last = watch.eq ? copy(value) : value;
                watch.fn(value, ((last === initWatchVal) ? value : last), current);
                // Scalyr edit:  Removed the logging code for when the ttl is reached
                // here because we don't have access to the ttl in this method.
              }
            } catch (e) {
              $exceptionHandler(e);
            }
          }
        }

        // Insanity Warning: scope depth-first traversal
        // yes, this code is a bit crazy, but it works and we have tests to prove it!
        // Scalyr edit: This insanity warning was from angular.  We only modified this
        // code by checking the $$gatingFunction because it's a good optimization to only go
        // down a child of a parent that has the same gating function as what we are processing
        // (since if a parent already has a different gating function, there's no way any
        // of its children will have the right one).
        if (!(next = ((current.$$gatingFunction === targetGatingFunction && current.$$childHead)
              || (current !== target && current.$$nextSibling)))) {
          while(current !== target && !(next = current.$$nextSibling)) {
            current = current.$parent;
          }
        }
      } while ((current = next));

      // Mark that this gating function has digested all children.
      targetGatingFunction.hasDigested = true;
      return dirty;
    };

    /**
     * @inherited $watch
     * @param directiveName The fourth parameter is a new optional parameter that allows
     *   directives aware of this abstraction to pass in their own names to identify
     *   which directive is registering the watch.  This is then passed to the
     *   shouldGateFunction to help determine if the watcher should be gated by the current
     *   gatingFunction.
     */
    methodsToAdd.$watch = function gatedWatch(watchExpression, listener, objectEquality,
        directiveName) {
      // Determine if we should gate this watcher.
      if (!isNull(this.$$gatingFunction) && (isNull(this.$$shouldGateFunction) ||
          this.$$shouldGateFunction(watchExpression, listener, objectEquality, directiveName)))  {
        // We do a hack here to just switch out the watchers array with our own
        // gated list and then invoke the original watch function.
        var tmp = this.$$watchers;
        this.$$watchers = this.$$gatedWatchers;
        // Invoke original watch function.
        var result = scopePrototype.$watch.call(this, watchExpression, listener, objectEquality);
        this.$$watchers = tmp;
        this.$$gatedWatchers[0].gatingFunction = this.$$gatingFunction;
        this.$$gatedWatchers[0].cleanUp = null;

        // We know that the last field of the watcher object will be set to initWatchVal, so we
        // grab it here.
        initWatchVal = this.$$gatedWatchers[0].last;
        var watch = this.$$gatedWatchers[0];

        // We should make sure the watch expression gets evaluated fully on at least one
        // digest cycle even if the gate function is now closed if requested by the gating function's
        // value for shouldEvalNewWatchers.  We do this by adding in normal watcher that will execute
        // the watcher we just added and remove itself after the digest cycle completes.
        if (this.$$gatingFunction.shouldEvalNewWatchers && this.$$gatingFunction.hasDigested) {
          var self = this;
          watch.cleanUp = scopePrototype.$watch.call(self, function() {
            if (!isNull(watch.cleanUp)) {
              self.$$cleanUpQueue.unshift(watch.cleanUp);
              watch.cleanUp = null;
            }
            var value;
            var last = initWatchVal;

            if (watch && (value = watch.get(self)) !== (last = watch.last) &&
                  !(watch.eq
                      ? areEqual(value, last)
                      : (typeof value == 'number' && typeof last == 'number'
                        && isNaN(value) && isNaN(last)))) {
                watch.last = watch.eq ? copy(value) : value;
                watch.fn(value, ((last === initWatchVal) ? value : last), self);
             }
            return watch.last;
          });
        }
        return result;
      } else {
        return scopePrototype.$watch.call(this, watchExpression, listener, objectEquality);
      }
    };

    /**
     * @inherited $digest
     */
    methodsToAdd.$digest = function gatedDigest() {
      // We have to take care if a scope's digest method was invoked that has a
      // gating function in the parent scope.  In this case, the watcher for that
      // gating function is registered in the parent (the one added in gatedWatch),
      // and will not be evaluated here.  So, we have to manually see if the gating
      // function is true and if so, evaluate any gated watchers for that function on
      // this scope.  This needs to happen to properly support invoking $digest on a
      // scope with a parent scope with a gating function.
      // NOTE:  It is arguable that we are not correctly handling nested gating functions
      // here since we do not know if the parent gating function was nested in other gating
      // functions and should be evaluated at all.  However, if a caller is invoking
      // $digest on a particular scope, we assume the caller is doing that because it
      // knows the watchers should be evaluated.
      var dirty = false;
      if (!isNull(this.$$parentGatingFunction) && this.$$parentGatingFunction()) {
        var ttl = 5;
        do {
          dirty = this.$digestGated(this.$$parentGatingFunction);
          ttl--;

          if (dirty && !(ttl--)) {
            throw Error(TTL + ' $digest() iterations reached for gated watcher. Aborting!\n' +
                'Watchers fired in the last 5 iterations.');
          }
        } while (dirty);
      }

      dirty = scopePrototype.$digest.call(this) || dirty;
      
      var cleanUpQueue = this.$$cleanUpQueue;

      while (cleanUpQueue.length)
        try {
          cleanUpQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }

      return dirty;
    }

    /**
     * Modifies this scope so that all future watchers registered by $watch will
     * only be evaluated if gatingFunction returns true.  Optionally, you may specify
     * a function that will be evaluted on every new call to $watch with the arguments
     * passed to it, and that watcher will only be gated if the function returns true.
     *
     * @param {Function} gatingFunction The gating function which controls whether or not all future
     *   watchers registered on this scope and its children will be evaluated on a given
     *   digest cycle.  The function will be invoked (with no arguments) on every digest
     *   and if it returns a truthy result, will cause all gated watchers to be evaluated.
     * @param {Function} shouldGateFunction The function that controls whether or not
     *   a new watcher will be gated using gatingFunction.  It is evaluated with the
     *   arguments to $watch and should return true if the watcher created by those
     *   arguments should be gated
     * @param {Boolean} shouldEvalNewWatchers If true, if a watcher is added
     *   after the gating function has returned true on a previous digest cycle, the
     *   the new watcher will be evaluated on the next digest cycle even if the
     *   gating function is currently return false.
     */
    methodsToAdd.$addWatcherGate = function(gatingFunction, shouldGateFunction,
                                            shouldEvalNewWatchers) {
      var changeCount = 0;
      var self = this;

      // Set a watcher that sees if our gating function is true, and if so, digests
      // all of our associated watchers.  Note, this.$watch could already have a
      // gating function associated with it, which means this watch won't be executed
      // unless all gating functions before us have evaluated to true.  We take special
      // care of this nested case below.

      // We handle nested gating function in a special way.  If we are a nested gating
      // function (meaning there is already one or more gating functions on this scope and
      // our parent scopes), then if those parent gating functions every all evaluate to
      // true (which we can tell if the watcher we register here is evaluated), then
      // we always evaluate our watcher until our gating function returns true.
      var hasNestedGates = !isNull(this.$$gatingFunction);

      (function() {
        var promotedWatcher = null;

        self.$watch(function() {
          if (gatingFunction()) {
            if (self.$digestGated(gatingFunction))
              ++changeCount;
          } else if (hasNestedGates && isNull(promotedWatcher)) {
            promotedWatcher = scopePrototype.$watch.call(self, function() {
              if (gatingFunction()) {
                promotedWatcher();
                promotedWatcher = null;
                if (self.$digestGated(gatingFunction))
                  ++changeCount;
              }
              return changeCount;
            });
          }
          return changeCount;
        });
      })();


      if (isUndefined(shouldGateFunction))
        shouldGateFunction = null;
      if (isUndefined(shouldEvalNewWatchers))
        shouldEvalNewWatchers = false;
      this.$$gatingFunction = gatingFunction;
      this.$$gatingFunction.shouldEvalNewWatchers = shouldEvalNewWatchers;
      this.$$shouldGateFunction = shouldGateFunction;
    };

    // Extend the original Scope object so that when
    // new instances are created, it has the new methods.
    angular.extend(Scope.prototype, methodsToAdd);

    // Also extend the $rootScope instance since it was created
    // before we got a chance to extend Scope.prototype.
    angular.extend($rootScope, methodsToAdd);

    $rootScope.$$gatingFunction = null;
    $rootScope.$$parentGatingFunction = null;
    $rootScope.$$shouldGateFunction = null;
    $rootScope.$$gatedWatchers = [];
    $rootScope.$$cleanUpQueue = [];

    return $rootScope;
  }]);
}]);
