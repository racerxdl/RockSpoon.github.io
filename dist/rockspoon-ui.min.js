function isArray(value){return"[object Array]"===Object.prototype.toString.call(value)}function isBoolean(value){return"boolean"==typeof value}function isDate(value){return"[object Date]"===Object.prototype.toString.call(value)}function isDefined(value){return"undefined"!=typeof value}function isFunction(value){return"function"==typeof value}function isNull(value){return null===value}function isNumber(value){return"number"==typeof value}function isObject(value){return null!==value&&"object"==typeof value}function isString(value){return"string"==typeof value}function isUndefined(value){return"undefined"==typeof value}function convertToBoolean(value){return isBoolean(value)?value:null!==value&&""!==value&&"false"!==value}function hasProperty(obj,prop){return obj.hasOwnProperty(prop)}function isStringEmpty(value){return isNull(value)||isUndefined(value)||isString(value)&&0==value.length}function isStringNonempty(value){return isString(value)&&value.length>0}function upperCaseFirstLetter(input){return input.charAt(0).toUpperCase()+input.slice(1)}function areEqual(obj1,obj2){return angular.equals(obj1,obj2)}function min(a,b){return b>a?a:b}function max(a,b){return a>b?a:b}function beginsWith(input,prefix){return isString(input)&&0==input.lastIndexOf(prefix,0)}function endsWith(input,postfix){return isString(input)&&-1!==input.indexOf(postfix,input.length-postfix.length)}function copy(source,destination){return angular.copy(source,destination)}function removeProperty(obj,property){delete obj[property]}function removeProperties(obj,properties){for(var i=0;i<properties.length;++i)delete obj[properties[i]]}function forEach(obj,iterator,context){return angular.forEach(obj,iterator,context)}function defineScalyrJsLibrary(libraryName,libraryExporter){var moduleDependencies=[];if(libraryExporter instanceof Array)for(var i=0;i<libraryExporter.length-1;++i)moduleDependencies.push(libraryExporter[i]);return angular.module(libraryName,moduleDependencies).factory(libraryName,libraryExporter)}function defineScalyrAngularModule(moduleName,dependencies){return angular.module(moduleName,dependencies)}var rockspoonUi=angular.module("rockspoon-ui",["ui.bootstrap","sly","ngAnimate","ui.sortable","ps.inputTime","sf.virtualScroll","ngMessages","angular-bind-html-compile"]);rockspoonUi.factory("focus",["$rootScope","$timeout",function($rootScope,$timeout){return function(name){return $timeout(function(){return $rootScope.$broadcast("focusOn",name)},20)}}]).directive("focusOn",function(){return function(scope,elem,attr){return scope.$on("focusOn",function(e,name){if(name===attr.focusOn){elem.focus();var val=elem.val();elem.val("").val(val)}})}}),rockspoonUi.directive("rsALaCarteMenu",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-a-la-carte-menu'>  <div class='rs-control'>    <rs-a-la-carte-menu-buttons></rs-a-la-carte-menu-buttons>    <rs-a-la-carte-menu-control ng-model='ngModel'></rs-a-la-carte-menu-control>  </div>  <div class='rs-content' ng-transclude></div></div>",transclude:!0}}).directive("rsALaCarteMenuControl",["$compile",function($compile){return{link:function($scope){$scope.select=function(idx){$scope.selected=idx}},replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-a-la-carte-menu-control'>  <div class='rs-a-la-carte-menu' ng-class='{ \"rs-selected\": selected === -1 }' ng-click='select(-1)'>    <div class='rs-menu-title'><span class='icon-icons_Menu'></span>&nbsp;{{ngModel.title}}</div>    <div class='rs-menu-description'>{{ngModel.description}}</div><hr class='separator'/>  </div>  <rs-a-la-carte-menu-items select='select' selected='selected' ng-model='ngModel.items'></rs-a-la-carte-menu-items></div>"}}]).directive("rsALaCarteMenuButtons",function(){return{replace:!0,restrict:"E",template:'<div class=\'rs-a-la-carte-menu-button\'>  <rs-add-menu-item-bar menus=\'[    { name: "Category" },    { name: "Sub-Category" },    { name: "Menu Item",      menus: [ { name: "Food" }, { name: "Beverages" }, { name: "Wine" }, { name: "Spirits" }, { name: "Beer" }, { name: "Cocktails" }, { name: "Coffe" }, { name: "Tee" } ]    }]\'>  </rs-add-menu-item-bar></div>'}}).directive("rsALaCarteMenuItems",["$compile",function($compile){return{replace:!0,restrict:"E",scope:{ngModel:"=",select:"=",selected:"="},template:"<div class='rs-a-la-carte-menu-items'>  <div sly-repeat='item in ngModel'>    <rs-a-la-carte-menu-section ng-if='item.type === \"section\"' idx='$index' ng-model='item' last='$last'></rs-a-la-carte-menu-section>    <rs-a-la-carte-menu-item ng-if='item.type === \"item\"' idx='$index' ng-model='item' last='$last'></rs-a-la-carte-menu-item>  </div></div>"}}]).directive("rsALaCarteMenuSection",["$compile",function($compile){return{link:function($scope,elm){var obj=$compile("<div ng-class='{ \"rs-selected\": $parent.selected === idx }' class='rs-a-la-carte-menu-section rs-level"+$scope.ngModel.level+"' ng-click='$parent.select(idx)'>  <div class='rs-menu-title'>{{ngModel.name}}</div>  <div align='' class='rs-menu-description'>{{ngModel.description}}</div></div>")($scope);elm.addClass("rs-level"+$scope.ngModel.level),elm.prepend(obj)},replace:!0,restrict:"E",scope:{ngModel:"=",last:"=",idx:"="},template:"<div class='rs-a-la-carte-menu-section-container'><div></div><hr class='separator' ng-if='!last' /></div>"}}]).directive("rsALaCarteMenuItem",["$compile",function($compile){return{link:function($scope,elm){var obj=$compile("<div style='display:table;width:100%' ng-class='{ \"rs-selected\": $parent.selected === idx }' class='rs-a-la-carte-menu-item rs-level"+$scope.ngModel.level+"' ng-click='$parent.select(idx)'>  <div class='rs-photo'><i class='glyphicon glyphicon-picture' ng-if='!ngModel.img'></i><img ng-src='{{ngModel.img}}' ng-if='ngModel.img' /></div>  <div style='display:table-cell; padding-left:10px'>    <div class='rs-menu-title'>{{ngModel.name}}</div>    <div align='' class='rs-menu-description'>{{ngModel.description}}</div>  </div></div>")($scope);elm.addClass("rs-level"+$scope.ngModel.level),elm.prepend(obj)},replace:!0,restrict:"E",scope:{ngModel:"=",last:"=",idx:"="},template:"<div class='rs-a-la-carte-menu-item-container'><hr class='separator' ng-if='!last' /></div>"}}]),rockspoonUi.directive("rsAccessControl",function(){return{controller:["$scope",function($scope){function parentCheckChange(item){for(var i in item.items)item.items[i].checked=item.checked,item.items[i].items&&parentCheckChange(item.items[i])}function childCheckChange(parent){var allChecks=!0;for(var i in parent.items)if(!parent.items[i].checked){allChecks=!1;break}parent.checked=!!allChecks,parent.parent&&childCheckChange(parent.parent)}$scope.checkChange=function(item){item.id===$scope.ngModel.id?parentCheckChange(item):(item.items&&parentCheckChange(item),childCheckChange(item.parent))}}],link:function($scope){function setParent(obj){if(void 0!==obj.items&&null!==obj.items)for(var i in obj.items)obj.items[i].parent=obj,setParent(obj.items[i])}setParent($scope.ngModel)},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-access-control'><rs-section ng-if='ngModel.id'><rs-access-control-check-box ng-model='ngModel'></rs-access-control-check-box></rs-section><rs-access-control-section ng-repeat='section in ngModel.items' ng-model='section'><rs-access-control-check-box ng-repeat='item in section.items' ng-model='item' ng-class='{\"no-border\" :  $last }'></rs-access-control-check-box></rs-access-control-section></div>"}}).directive("rsAccessControlCheckBox",function(){return{controller:["$scope",function($scope){$scope.checkChange=function(item){$scope.$parent.checkChange(item)}}],link:function(scope){scope.ngModel.label=scope.ngModel.label?scope.ngModel.label:scope.ngModel.id.charAt(0).toUpperCase()+scope.ngModel.id.slice(1)},replace:!0,require:["ngModel","rsAccessControlCheckBox","^rsAccessControl"],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-check-box'><span><input id='chk[{{::ngModel.id}}]' type='checkbox' ng-model='ngModel.checked' ng-change='checkChange(ngModel)'><label for='chk[{{::ngModel.id}}]'>{{::ngModel.label}}</label></span><span ng-if='ngModel.mode && ngModel.checked'><rs-radio-button id='edit_{{::ngModel.id}}' value='view' label='Can View' ng-model='ngModel.mode'></rs-radio-button><rs-radio-button id='view_{{::ngModel.id}}' value='edit' label='Can Edit' ng-model='ngModel.mode'></rs-radio-button></span></div>"}}).directive("rsAccessControlSection",function(){return{controller:["$scope",function($scope){$scope.checkChange=function(item){$scope.$parent.checkChange(item)}}],replace:!0,require:["ngModel","rsAccessControlSection","^rsAccessControl"],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-access-control-section'><hr class='separator'/><rs-access-control-check-box ng-model='ngModel' ng-class='{\"title\" :  ngModel.canCheck }' ng-if='ngModel.canCheck'></rs-access-control-check-box><div class='title' ng-if='!ngModel.canCheck'>{{::ngModel.label}}<i class='glyphicon glyphicon-asterisk' ng-if='ngModel.isRequired === true'></i></div><div ng-transclude class='rs-access-control-section-content'></div></div>",transclude:!0}}),rockspoonUi.directive("rsAddMenuItemBar",function(){return{replace:!0,restrict:"E",scope:{menus:"="},link:function($scope,elm,attrs){$scope.options=null,_.forEach($scope.menus,function(menu){return menu.menus?($scope.options=menu,!1):void 0})},template:"<div class='rs-add-menu-item-bar'>  <div class='rs-add-menu-item-bar-categories'>    <div class='rs-add-menu-item-bar-category' ng-repeat='model in menus' ng-if='!model.menus'>      <i class='icon-icons_Add'></i> {{::model.name}}    </div>  </div>  <div class='rs-add-menu-item-bar-items'>    <input type='checkbox' id='rs-menu-items-toggle'>    <div class='rs-add-menu-item-bar-item'>      <label for='rs-menu-items-toggle'>        <i class='icon-icons_Add'></i> {{::options.name}}         <b class='caret'></b>      </label>    </div>    <div class='rs-add-menu-item-bar-item-types'>        <div ng-repeat='menu in options.menus' class='rs-add-menu-item-bar-item-type'>          <i class='icon-icons_Add'></i> {{::menu.name}}        </div>    </div>    <hr />  </div></div>"}}),rockspoonUi.directive("rsAddress",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",mandatory:"=",onChange:"&",hideCountry:"="},template:"<div ng-form='form' novalidate class='rs-address'>  <table>    <tr ng-if='!hideCountry'>      <td colspan='1'>        <rs-country mandatory='mandatory' ng-model='ngModel.country' on-change='onChange(model)' label-same-line='false'></rs-country>      </td>    </tr>    <tr>      <td colspan='3'>        <rs-text-edit mandatory='mandatory' on-change='onChange(model)' class='address' ng-model='ngModel.address1' label='Address Line 1' label-same-line='false' placeholder='e.g: Street address, P.O Box, Apartment, Suit, Unit, Floor'></rs-text-edit>      </td>    </tr>    <tr>      <td colspan='3'>        <rs-text-edit class='address' on-change='onChange(model)' ng-model='ngModel.address2' label='Address Line 2' label-same-line='false' placeholder='e.g: Apartment, Suit, Unit, Floor'></rs-text-edit>      </td>    </tr>    <tr>      <td style='width:37%'>        <rs-text-edit mandatory='mandatory' class='city' on-change='onChange(model)' ng-model='ngModel.city' label='City' label-same-line='false'></rs-text-edit>      </td>      <td class='column-space' style='width:37%'>        <rs-state mandatory='mandatory' country='ngModel.country' on-change='onChange(model)' ng-model='ngModel.region' label-same-line='false'></rs-state>      </td>      <td class='column-space'>        <rs-text-edit label='Zip Code' mandatory='mandatory' on-change='onChange(model)' label-same-line='false' ng-model='ngModel.zipcode' placeholder='Enter Number'></rs-text-edit>      </td>    </tr>  </table></div>"}}).directive("rsMultiAddress",function(){return{link:function($scope){function doValidation(){$scope.showValidationErrors=!0}$scope.$on("kickOffValidations",doValidation)},controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.$watchCollection("ngModel",function(){$scope.form.$setValidity("required",$scope.ngModel.length>=(parseInt($scope.minRequired)||0))}),$scope.opts={rowFactory:function(){return{type:"",address:{country:"",address1:"",address2:"",region:"",city:"",zipcode:"",publicArea:!1}}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{parkingAddress:"=",parkingTypes:"=",ngModel:"=",title:"@",minRequired:"@"},template:"<div ng-form='form'>  <div ng-messages='form.$error' class='rs-validation-error'>    <ng-message when='required'>Minimum number of required options is {{minRequired}}</ng-message>  </div>  <rs-multi-line min-required='1' ng-model='ngModel' ng-opts='opts'>    <div class='rs-multi-address'>      <div ng-repeat='model in internalModel'>        <div class='rs-section'>          <div class='title' ng-class='{lightgray:model.$isNew}'>            <i class='icon-icons_Delete' ng-if='!$last' ng-click='remove(model)'></i>&nbsp;{{::$parent.$parent.title}} {{$index + 1}}          </div>          <div class='rs-content'>            <rs-combo-box ng-if='$parent.$parent.parkingAddress && model.$isNew' label='Parking Type' ng-class='{lightgray:model.$isNew}' on-change='changed(model)' label-same-line='false' options='$parent.$parent.$parent.parkingTypes' ng-model='model.type'></rs-combo-box>            <rs-address ng-class='{lightgray:model.$isNew}' ng-if='model.$isNew' ng-model='model.address' on-change='changed(model)'></rs-address>            <rs-combo-box ng-if='$parent.$parent.parkingAddress && !model.$isNew' mandatory='true' label='Parking Type' ng-class='{lightgray:model.$isNew}' on-change='changed(model)' label-same-line='false' options='$parent.$parent.$parent.parkingTypes' ng-model='model.type'></rs-combo-box>            <rs-address ng-class='{lightgray:model.$isNew}' ng-if='!model.$isNew' mandatory='true' ng-model='model.address' on-change='changed(model)'></rs-address>          </div>          <hr class='separator' ng-if='!model.$isNew'/>        </div>      </div>    </div>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsAllergensTags",[function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.opts={rowFactory:function(){return{name:"",status:0}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",allergensList:"="},template:"<div class='rs-allergens'>  Allergens (Select Yes or No)</div><rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-allergens-tags'>  <div ng-repeat='allergen in internalModel' >    <label class='rs-allergen' for='rs-allergen-input-{{uid}}' ng-class='{lightgray:allergen.$isNew}'>      <a ng-click='remove(allergen)' ng-if='!$last'>        <i class='icon-icons_Delete'></i>      </a>      <input class='rs-allergen-input' type='text'              ng-change='changed(allergen)' ng-model='allergen.name'              placeholder='Add Allergen'              typeahead='allergen as allergen.name for allergen in $parent.$parent.allergensList | filter: $viewValue'              name='rs-allergen-input-{{$index}}' />    </label>    <rs-on-off style='width:150px; display: inline-block' on='Yes' off='No' ng-model='allergen.status' ng-if='!$last'></rs-on-off>  </div></div>"}}]),rockspoonUi.directive("rsSingleAnnualClosures",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-single-annual-closures'>  <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.name}}' ng-model='ngModel.selected' label='{{ngModel.name}} ({{ngModel.formattedDate}})'></rs-check-box>  <div class='day-container' ng-if='ngModel.selected'>    <div class='rs-opening-hours-radios'>      <rs-radio-button id='{{::uid}}_{{::ngModel.name}}_partial' value='partial' label='Modified opening hours' ng-model='ngModel.availability'></rs-radio-button>      <rs-radio-button id='{{::uid}}_{{::ngModel.name}}_closed' value='closed' label='Closed all day' ng-model='ngModel.availability'></rs-radio-button>    </div>  <rs-multi-time class='multi' ng-if='ngModel.availability === \"partial\"' ng-model='ngModel.time' ></rs-multi-time>  </div></div>"}}).directive("rsAnnualClosures",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create(),$scope.addCustomHoliday=function(holiday){$scope.ngModel.push({name:holiday.name,formattedDate:moment.utc(holiday.date).format("MMMM Do"),date:holiday.date}),$scope.holidayCalendar.date=null,$scope.holidayCalendar.name=null}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-annual-closures'>  <rs-label label='Select which events are observed:'></rs-label>  <rs-single-annual-closures ng-repeat='holiday in ngModel' ng-model=holiday></rs-single-annual-closures>  <div class='new-holiday'>    <rs-text-edit class='new-holiday-name' ng-model='holidayCalendar.name' placeholder='Name e.g. Owner birthday'></rs-text-edit>    <rs-date class='new-holiday-date' ng-model='holidayCalendar.date'></rs-date>    <button class='new-holiday-add' ng-disabled='!holidayCalendar.name || !holidayCalendar.date' ng-click='addCustomHoliday(holidayCalendar)'>Add</button>  </div></div>"}}),rockspoonUi.directive("rsAutoComplete",[function(){return{replace:!0,restrict:"E",scope:{ngModel:"=",srcList:"=",iconClassName:"@",placeholder:"@"},template:"<div class='rs-auto-complete'>  <label class='rs-auto-complete-label' for='rs-auto-complete'>    <i class='{{::iconClassName}}' ng-if='iconClassName'></i>    <input class='rs-auto-complete-input' type='text' ng-model='ngModel' placeholder='{{::placeholder}}' typeahead='item as item.name for item in srcList | filter:$viewValue' data-typeahead-editable='false' name='rs-auto-complete' />  </label></div>",transclude:!0}}]),rockspoonUi.directive("rsAvailableOn",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-available-on'>  <div class='rs-day-container' ng-repeat='option in ngModel.days track by $index' ng-class='{ \"disabled\" :option.closed }'>    <span>{{option.day}}</span>   </div></div>"}}),rockspoonUi.directive("rsBarChart",function(){return{replace:!0,restrict:"E",link:function($scope){$scope.count=0,_.forEach($scope.ngModel,function(model){$scope.count+=model.count})},scope:{ngModel:"=",title:"@"},template:"<div class='bar-chart-container'><div ng-if='title' class='bar-chart-title'>{{title}}</div><div class='bar-chart'><div ng-repeat='item in ngModel' class='bar-chart-row'><div class='bar-chart-title'>{{item.title}}</div><progressbar value='item.count' max='count' class='bar-chart-bar'></progressbar><div class='bar-chart-count'>{{item.count}}</div></div></div></div>"}}),rockspoonUi.directive("rsBrandInfo",function(){return{link:function(scope){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation)},controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"="},template:"<div ng-form='form' class='rs-brand-info'>  <rs-text-edit label='Name' mandatory='true' label-same-line='false' placeholder='Supplier Name' ng-model='ngModel.name'></rs-text-edit>  <table>    <tr>      <td>        <div class='logo'>          <rs-label>Logo</rs-label><i class='glyphicon glyphicon-asterisk'></i>        </div>      </td>      <td>        <div class='description'>          <rs-label>Description</rs-label><i class='glyphicon glyphicon-asterisk'></i>        </div>      </td>    </tr>    <tr>      <td>        <rs-image-picker-generic ng-model='ngModel.logo'>          <rs-image-picker mandatory='true' ng-model='ngModel.logo' type=\"image\"></rs-image-picker>        </rs-image-picker-generic>      </td>      <td class='description-column'>        <div>          <textarea name=text_{{::uid}} ng-required='true' ng-model='ngModel.description'></textarea>          <div ng-messages='form.text_{{::uid}}.$error' ng-show='form.text_{{::uid}}.$dirty || showValidationErrors' class='rs-validation-error'>            <ng-message when='required'>This field is required.</ng-message>          </div>        </div>      </td>    </tr>  </table></div>"}}),rockspoonUi.directive("rsBusinessEntity",function(){return{controller:["$scope","UID","FetchBusinessType",function($scope,UID,fetch){$scope.uid=UID.create(),$scope.options=[],fetch.fetch().then(function(types){_.forEach(types,function(type){$scope.options.push({value:type.businessTypeId,label:type.title})})})}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div ng-form='form' novalidate class='rs-business-entity'>  <rs-text-edit mandatory='true' label='Business Entity Name' ng-model='ngModel.name' label-same-line='false'></rs-text-edit>  <rs-text-edit label='Doing Business as' ng-model='ngModel.doingBusinessAs' label-same-line='false'></rs-text-edit>  <rs-country mandatory='true' label='Country' ng-model='ngModel.address.country' label-same-line='false'></rs-country>  <rs-combo-box mandatory='true' label='Type of business entity' options='options' label-same-line='false' ng-model='ngModel.businessType'></rs-combo-box>  <rs-text-edit mandatory='true' class='rs-tax-id' label='Tax ID' placeholde='Enter Tax Id' ng-model='ngModel.taxId' label-same-line='false'></rs-text-edit>  <!--div style='display:table'>    <div style='display:table-cell'>      <rs-label class='address' label='Address'></rs-label>    </div>    <div style='display:table-cell;padding-left:5px;'>      <rs-check-box id='{{::uid}}' ng-model='sameProperty' label='same as property address'></rs-check-box>    </div>  </div-->  <rs-address mandatory='true' hide-country='true' ng-model='ngModel.address'></rs-address>  <rs-multi-phone-text-edit ng-model='ngModel.phone' label='Phone'></rs-multi-phone-text-edit>  <rs-multi-social-text-edit ng-model='ngModel.internet' label='Internet'></rs-multi-social-text-edit></div>"}}),rockspoonUi.directive("rsSaveDraftButton",function(){return{controller:["$scope",function($scope){$scope.save=function(){$scope.$parent.save()}}],restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='save()'><i class='icon-icons_SaveAsDraft'></i>&nbsp;Save as Draft</button>"}}).directive("rsPublishButton",function(){return{controller:["$scope",function($scope){$scope.publish=function(){$scope.$parent.publish()}}],restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='publish()'><i class='icon-icons_Publish'></i>&nbsp;Publish</button>"}}).directive("rsContinueButton",function(){return{controller:["$scope",function($scope){$scope["continue"]=function(){$scope.$parent["continue"]()}}],restrict:"E",replace:!0,scope:{label:"@"},template:"<button class='rs-button' ng-click='continue()'><i class='icon-icons_Continue'></i>&nbsp;Continue</button>"}}),rockspoonUi.directive("rsCategoryForm",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-category-form'>  <rs-title-description ng-model='ngModel' type='Category'></rs-title-description></div>"}}),rockspoonUi.directive("rsCheckBoxList",function(){return{restrict:"E",scope:{ngModel:"=",title:"@"},template:"<div class='rs-section'>  <p class='rs-checklist-title'>{{title}}</p>  <div class='rs-check-box-container' ng-repeat='option in ngModel track by $index'>    <rs-check-box id='checkbox_{{$index}}' ng-model='option.status' label='{{option.type}}'></rs-check-box>  </div></div>"}}),rockspoonUi.directive("rsCheckBox",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id},restrict:"E",replace:!0,require:"ngModel",scope:{label:"@",ngModel:"=",onChange:"&"},template:"<div class='rs-check-box'>  <span>    <input id='chk[{{::id}}]' type='checkbox' ng-model='ngModel' ng-change='onChange(model)' />    <label for='chk[{{::id}}]'>{{::label}}</label>  </span></div>"}}).directive("rsMultiCheckBox",["$timeout","UID","focus",function($timeout,UID,focus){function pad(number,n){var N=Math.pow(10,n);return N>number?(""+(N+number)).slice(1):""+number}function split(collection,columns){return _.groupBy(collection,function(el,idx){return pad(Math.floor(idx/(columns||1)),5)})}return{link:function($scope,elm,attrs,ctrl){function doValidation(){$scope.showValidationErrors=!0}$scope.uid=UID.create(),$scope.$dirty=!1;var selected=0,watchers=[];$scope.$on("kickOffValidations",doValidation),$scope.focus=function(){elm.addClass("ng-focus")},$scope.blur=function(){elm.removeClass("ng-focus")};var checkPressed=function(newModel,oldModel){newModel!==oldModel&&(newModel?++selected:--selected,ctrl.$setViewValue($scope.ngModel)),$scope.form.$setValidity("required",selected>=(parseInt($scope.minRequired)||0))},add=function(model){model.push({isNew:!0,selected:!1,custom:!0,title:""})},cloneInternal=function(){$scope.ngModel||($scope.ngModel=[]),add($scope.internalModel=_.clone($scope.ngModel));for(var i=0;i<$scope.internalModel.length;++i)$scope.internalModel[i].selected&&++selected,watchers.push($scope.$watchCollection("internalModel["+i+"].selected",checkPressed)),$scope.model=split($scope.internalModel,$scope.columns)};$scope.$watchCollection("ngModel",function(){selected=0,_.forEach(watchers,function(watcher){watcher()}),watchers=[],cloneInternal()}),$scope.customChanged=function(model){elm.removeClass("ng-pristine"),_.isUndefined(model.isNew)?model.title.length||(watchers.pop()(),_.pull($scope.ngModel,model),_.pull($scope.internalModel,model),_.isFunction($scope.ngRemoved)&&$scope.ngRemoved({model:model}),$scope.model=split($scope.internalModel,$scope.columns),$timeout(function(){focus($scope.uid)})):(model.selected=!0,delete model.isNew,$scope.ngModel.push(model),add($scope.internalModel),watchers.push($scope.$watchCollection("internalModel["+watchers.length+"].selected",checkPressed)),$scope.model=split($scope.internalModel,$scope.columns))},cloneInternal()},restrict:"E",require:"ngModel",replace:!1,scope:{columns:"@",label:"@",minRequired:"@",ngDisabled:"=",ngModel:"=",ngRemoved:"&",title:"@"},template:"<div ng-form='form' class='rs-multi-check-box'>  <div class='rs-checklist-title'>{{title}}<i class='glyphicon glyphicon-asterisk' ng-if='minRequired > 0 && title'></i>    <div>      <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>        <ng-message when='required'>Minimum number of required options is {{minRequired}}</ng-message>      </div>    </div>  </div>  <div class='rs-container'>     <div class='row' ng-repeat='(idx, modelList) in model'>      <div class='column' ng-repeat='model in modelList' style='margin-left:100px'>        <input id='chk[{{uid}}_{{idx}}_{{$index}}]' ng-model='model.selected' type='checkbox' ng-disabled='model.isNew || ngDisabled' />        <label for='chk[{{uid}}_{{idx}}_{{$index}}]' ng-if='!model.custom' ng-disabled='model.isNew || ngDisabled'><translate>{{model.title}}</translate></label>        <label for='chk[{{uid}}_{{idx}}_{{$index}}]' ng-if='model.custom' ng-disabled='ngDisabled'></label>        <input type='text' ng-model='model.title' placeholder='Custom' ng-change='customChanged(model)' focus-on='{{uid}}' ng-focus='focus()' ng-blur='blur()' ng-if='model.custom' ng-class='{ custom:model.isNew }' class='' ng-disabled='ngDisabled' />      </div>    </div>  <div></div>"}}]),rockspoonUi.directive("compareTo",function(){return{require:"ngModel",link:function(scope,elm,attrs,ngModel){ngModel.$validators.matchingFields=function(modelValue){return modelValue===scope.$eval(attrs.compareTo)},scope.$watch(attrs.compareTo,function(){ngModel.$validate()})}}}).directive("rsChoosePassword",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create(),$scope.$watch("showPwd",function(){$scope.showPwd?$element.find("input:password").each(function(){$(this).attr("type","text")}):$element.find("input:text").each(function(){$(this).attr("type","password")})})}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",label:"@",placeholder:"@"},template:"<div ng-form='form' novalidate class='rs-choose-password'>  <table style='width:100%'>    <tr>      <td>        <rs-text-edit-compare mandatory='true' placeholder='{{placeholder}}' required label='{{label}}' label-same-line='false' ng-model='ngModel.password' compare-model='ngModel.confirmPassword'></rs-text-edit-compare>      </td>    </tr>    <tr>      <td>        <rs-check-box id='showPwd + {{::uid}}' label='Show Password' ng-model='showPwd'>      </td>    </tr>  </table></div>"}}),rockspoonUi.directive("rsComboBox",["$compile",function($compile){return{link:function(scope,elm,attrs,ctrl){function doValidation(){scope.showValidationErrors=!0}function updateValidity(){scope.mandatory&&select.selectedIndex<=0&&!select.val()?ctrl.$setValidity("empty",!1):ctrl.$setValidity("empty",!0),select.selectedIndex<=0&&!select.val()?(select.parent().addClass("combo-field-empty"),select.parent().removeClass("combo-field")):(select.parent().addClass("combo-field"),select.parent().removeClass("combo-field-empty"))}function respondToChange(){select.find("option").remove().end(),select.append(new Option("","")),_.forEach(scope.options,function(option,i){var o;o=null!==option.label&&void 0!==option.label?new Option(option.label,option.value):new Option(option,option),scope.ngModel===(option.value?option.value:option)&&(o.selected=!0,ctrl.$setViewValue(option.value)),select.append(o)}),scope.ngModel||(select.selectedIndex=0,scope.mandatory&&ctrl.$setValidity("empty",!1),null===scope.options||void 0===scope.options?console.log("ERROR: rs-combo-box has no options: label=["+scope.label+"]"):scope.options.length>0&&select.val(scope.options[0].key)),updateValidity()}scope.$on("kickOffValidations",doValidation);var d,paddingClass="",required="";"true"===attrs.mandatory&&(required="required"),null!==scope.label&&void 0!==scope.label&&""!==scope.label&&(paddingClass="label-space"),d=void 0!==scope.labelSameLine&&scope.labelSameLine!==!0?angular.element("<div style='display:table-row'>  <div class='combo-label' style='display:table-cell'>    <label class='"+paddingClass+"' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>  </div></div><div style='display:table-row'>  <div class='combo-field-empty' style='width:100%;display:table-cell'>    <div class='arrow'></div>    <select name=select_{{::uid}} ng-model='ngModel' "+required+"></select>  </div></div><div ng-if='mandatory' style='display:table-row'>  <div style='width:100%;display:table-cell'>    <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>      <ng-message when='empty'>A nonempty option is required.</ng-message>    </div>  </div> </div>"):angular.element("<div style='display:table-row'>  <div class='combo-label' style='display:table-cell'>    <label class='"+paddingClass+"' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>  </div>  <div class='combo-field-empty' style='width:100%;display:table-cell'>    <div class='arrow'></div><select name=select_{{::uid}} "+required+"></select>  </div></div><div style='display:table-row'>  <div style='display:table-cell'>  </div>  <div style='display:table-cell'>    <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'><ng-message when='empty'>A nonempty option is required.</ng-message>  </div></div>"),elm.append(d),$compile(d)(scope);var select=elm.find("select:first");select.change(function(){scope.$apply(function(){updateValidity(),ctrl.$setViewValue(select.val()),ctrl.$render();var fn=scope.onChange();null!==fn&&void 0!==fn&&fn(select.val());
})}),scope.options&&scope.$watch(function(){return scope.options},respondToChange,!0),scope.$watch("ngModel",respondToChange,!0)},controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",labelSameLine:"=",mandatory:"=",options:"=",ngModel:"=",onChange:"&",showValidationErrors:"@"},transclude:!0,terminal:!0,template:"<div ng-form='form' class='rs-combo-box'></div>"}}]),rockspoonUi.directive("rsConnectivitySignal",function(){return{link:function(scope){var injectSVG=function(){var mySVGsToInject=$(".svg-inject");SVGInjector(mySVGsToInject)};scope.$watch(function(){return scope.ngModel},function(){injectSVG()},!0)},restrict:"E",scope:{ngModel:"=",type:"@"},template:"<div class='rs-connectivity-signal rs-connectivity-signal-{{ngModel}}'>  <img ng-src='../images/{{type}}-signal.svg' class='svg-inject'/></div>"}}),rockspoonUi.directive("rsCookingModifiers",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id,scope.$watch("ngModel.isOptional",function(){scope.ngModel.isOptional||(scope.ngModel.hasDefault=!1)})},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-cooking-modifiers'>  <rs-section title='Cooking Modifiers'>    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-cooking-title'></rs-text-edit>    <rs-on-off on='Optional Modifier' off='Mandatory Modifier' ng-model='ngModel.isOptional'></rs-on-off>    <div class='rs-cooking-modifiers-container'>      <div> Available Modifiers</div>       <rs-check-box label='With Default Option' ng-if='ngModel.isOptional' ng-model='ngModel.hasDefault'></rs-check-box>      <rs-cooking-modifiers-text-edit default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' ng-model='ngModel'></rs-cooking-modifiers-text-edit>    </div>  </rs-section></div>"}}).directive("rsCookingModifiersTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{modifier:"",time:new Date(0,0,0,0,0,0)}}}}],replace:!1,require:"hasDefault, defaultModifier, ngModel",restrict:"E",scope:{hasDefault:"=",defaultModifier:"=",ngModel:"="},template:"<rs-multi-line ng-model='ngModel.modifiers' ng-opts='opts' class='rs-mods-list'>  <table>    <thead>    <tr><td>&nbsp;</td><td></td><td class='default-header'><span ng-if='$parent.hasDefault'>Default</span></td><td></td></tr>    </thead>    <tbody ui-sortable='sortableOptions' ng-model=internalModel>      <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>        <td width='30' class='remove-td'>          <div class='remove-button'>            <div ng-if='!$last' ng-click='remove(model)'>              <i class='icon-icons_Delete'></i>            </div>          </div>        </td>        <td>          <div class='rs-modifier-container'>            <input type='text' placeholder='Add Modifier' ng-change='changed(model)' ng-model='model.modifier' />            <div class='line-number'>              <div class='number'>{{$index + 1}}</div>            </div>          </div>          <div class='rs-preparation-time-container'><span ng-class='{\"last-preparation-time\": $last}'>Preparation time </span><rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ show24Hours: true }' class='rs-preparation-time'/><rs-time></div>        </td>        <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>          <rs-radio-button  id='rs-cooking_default_{{$index}}' value='{{model.modifier}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>        </td>        <td ng-class='{ \"handler-td\" : (!$last && !$parent.$parent.hasDefault) }'>          <div class='drag-handler handler-item' ng-if='!$last'>            <div class='handler'>&nbsp;</div>          </div>        </td>      </tr>    </tbody>  </table></rs-multi-line>"}}),rockspoonUi.directive("rsCountry",[function(){return{controller:["$scope","FetchCountry",function($scope,fetch){$scope.options=[],fetch.fetchCountries().then(function(countries){_.forEach(countries,function(country){$scope.options.push({value:country.code,label:country.nativeName})})})}],replace:!0,require:"ngModel",restrict:"E",scope:{labelSameLine:"=",mandatory:"=",ngModel:"=",onChange:"&"},template:"<div class='rs-country'>  <rs-combo-box mandatory='mandatory' label='Country' options='options' label-same-line='labelSameLine' ng-model='ngModel' on-change='onChange'></rs-combo-box></div>"}}]).directive("rsState",[function(){return{controller:["$scope","FetchCountry",function($scope,fetch){$scope.optionsState=[],$scope.$watchCollection("country",function(){$scope.optionsState.length=0,$scope.country&&fetch.fetchStates($scope.country).then(function(states){_.forEach(states,function(state){$scope.optionsState.push({value:state.code,label:state.name})})})})}],replace:!0,require:"ngModel",restrict:"E",scope:{labelSameLine:"=",ngModel:"=",mandatory:"=",onChange:"&",country:"="},template:"<div class='rs-state'>  <rs-combo-box mandatory='mandatory' label='State' options='optionsState' label-same-line='labelSameLine' ng-model='ngModel' on-change='onChange'></rs-combo-box></div>"}}]),rockspoonUi.directive("rsCreateAccount",function(){return{controller:["$scope",function($scope){$scope.createAccount=function(){$scope.$parent.createAccount()},$scope.cancel=function(){$scope.$parent.cancel()},$scope.$watch("showPassword",function(){$scope.showPassword?$scope.inputType="text":$scope.inputType="password"})}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div ng-form='form' novalidate class='rs-create-account'>  <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.firstName' label='First Name'></rs-text-edit>  <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.lastName' label='Last Name'></rs-text-edit>  <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.metadata.SSN' label='Social Security Number'></rs-text-edit>  <rs-text-edit-compare input-type='text' mandatory='true' label-same-line='false' ng-model='ngModel.email' compare-model='ngModel.confirmEmail' label='Email'></rs-text-edit-compare>  <rs-text-edit-compare input-type='{{inputType}}' mandatory='true' label-same-line='false' compare-model='ngModel.confirmPassword' ng-model='ngModel.password' label='Password'></rs-text-edit-compare>  <rs-text-edit-compare input-type='{{inputType}}' mandatory='true' label-same-line='false' compare-model='ngModel.confirmShortPassword'  ng-model='ngModel.shortPassword' label='Short Password' pattern='^[0-9]{4}$' pattern-message='Short Password should be exactly 4 digits.'></rs-text-edit-compare>  <rs-check-box id='showPassword' ng-model='showPassword' label='Show Password'></rs-check-box>  <div class='footer'>    <button ng-click='createAccount()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Create Account</button>    <button ng-click='cancel()'><i class='glyphicon glyphicon-remove'></i>&nbsp;Cancel</button>  </div></div>"}}),rockspoonUi.directive("rsCreatePrinter",function(){return{controller:["$scope",function($scope){$scope.showStation=!1,$scope.stationList=[],$scope.validated=!1,$scope.locationSelected=!1,$scope.localCancel=function(){$scope.ngModel.name=null,$scope.ngModel.type=null,$scope.selectedLocation=null,$scope.showStation=!1,$scope.ngModel.station=null,$scope.onCancel&&$scope.onCancel()},$scope.changeType=function(){var selectedType=$scope.ngModel.type;for(var i in $scope.printerTypes)if($scope.printerTypes[i].value===selectedType)return $scope.showStation=$scope.printerTypes[i].needsStation,void($scope.validated=!$scope.showStation);$scope.showStation=!1,$scope.ngModel.station=null,$scope.validated=!1,$scope.locationSelected=!1},$scope.changeLocation=function(){for(var i in $scope.locations)$scope.locations[i].value===$scope.ngModel.location&&($scope.stationList=$scope.locations[i].stations,$scope.locationSelected=!0)},$scope.changeStation=function(){var location=$scope.locations[$scope.ngModel.location];for(var i in location.stations)if(location.stations[i].value===$scope.ngModel.station)return void($scope.validated=!0);$scope.validated=!1}}],replace:!0,require:["ngModel","printerTypes","locations"],restrict:"E",scope:{ngModel:"=",printerTypes:"=",locations:"=",onCreatePrinter:"&",onCancel:"&"},template:"<div ng-form='form' novalidate class='rs-create-printer'> <table>   <tr>     <td class='negoff boxfield'>       <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.name' label='Enter Printer Name'></rs-text-edit>     </td>     <td class='column-space negoff boxfield'>       <rs-combo-box mandatory='true'  ng-model='ngModel.type' on-change='changeType' label-same-line='false' label='Printer Type' options='printerTypes'></rs-combo-box>     </td>     <td class='column-space negoff boxfield' ng-if='showStation'>       <rs-combo-box mandatory='true' ng-model='ngModel.location' on-change='changeLocation' label-same-line='false' label='Select Location Name' options='locations'></rs-combo-box>     </td>     <td class='column-space negoff boxfield' ng-if='locationSelected && showStation'>       <rs-combo-box mandatory='true' ng-model='ngModel.station' on-change='changeStation' label-same-line='false' label='Select Station Name' options='stationList'></rs-combo-box>     </td>     <td></td>     <td class='column-space buttontab' ng-if='validated'>       <button ng-click='onCreatePrinter()' class='rs-button'>Create</button>     </td>     <td class='column-space buttontab'>       <button ng-click='localCancel()' class='rs-button'>Cancel</button>     </td>   </tr> </table></div>"}}),rockspoonUi.filter("formattedRSDateTime",function(){return function(input){return input?input.format("MM/DD/YYYY - hh:mm A"):"Undetermined"}}).filter("formattedRSDate",function(){return function(input,format){if(!input)return null;var defaultFormat="MMMM Do";return format&&(defaultFormat=format),moment(input).format(defaultFormat)}}).factory("dropDownToggleService",["$timeout",function($timeout){return{findFirstScrollable:function(element){return null===element||void 0===element||element.prop("scrollHeight")>element.prop("clientHeight")?element:this.findFirstScrollable(element.parent())},customClickHandler:function(event){var scope=event.data.scope,element=event.data.element,setMargin=event.data.setMargin;$timeout(function(){var dropdownElement=element.find(".dropdown-menu");scope.dropdownElement=dropdownElement,setMargin===!0&&(scope.marginBottom=scope.dropdownElement.css("margin-top")||"2px"),scope.heightD=dropdownElement.height();var availableTop=element.offset().top,availableBottom=$(window).height()-availableTop;availableBottom>scope.heightD?scope.isDropUp=!1:(scope.dropdownElement.css("margin-bottom",scope.marginBottom),scope.isDropUp=!0)},0)}}}]).directive("rsCalendar",function(){var calendars={},buildCalendar=function(month,year){var cacheKey=month+" + "+year;if(calendars[cacheKey])return calendars[cacheKey];var i,j,firstDay=moment([year,month,1]),lastMonth=moment(firstDay).subtract("month",1).month(),lastYear=moment(firstDay).subtract("month",1).year(),daysInLastMonth=moment([lastYear,lastMonth]).daysInMonth(),dayOfWeek=firstDay.day(),calendar=[];for(i=0;6>i;++i)calendar[i]=[];var startDay=daysInLastMonth-dayOfWeek+1;startDay>daysInLastMonth&&(startDay-=7),dayOfWeek||(startDay=daysInLastMonth-6);var curDate=moment([lastYear,lastMonth,startDay]).startOf("day");for(i=0;6>i;++i)for(j=0;7>j;++j)calendar[i][j]=curDate=moment(curDate).add("day",1);return calendars[cacheKey]=calendar,calendar};return{controller:["$scope",function($scope){if(_.isDate($scope.startDate)||_.isDate($scope.endDate))throw new Error("You must use moment");var isBefore=function(){$scope.startDate&&$scope.startDate.isAfter($scope.endDate)&&($scope.endDate=$scope.startDate.clone())};$scope.$watch(function(){return $scope.startDate},isBefore,!0),$scope.$watch(function(){return $scope.endDate},isBefore,!0),$scope.inRange=function(day){return null!==$scope.startDate&&void 0!==$scope.startDate&&null!==$scope.endDate&&void 0!==$scope.endDate&&(day.isAfter($scope.startDate,"day")&&day.isBefore($scope.endDate,"day")||day.isSame($scope.startDate,"day")||day.isSame($scope.endDate,"day"))},$scope.getDayNumber=function(day){return day.date()},$scope.isOff=function(day){return day.month()!==$scope.current.month()||!$scope.left&&day.isBefore($scope.startDate,"day")},$scope.updateCalendar=function(){$scope.calendar=buildCalendar($scope.current.month(),$scope.current.year()),$scope.monthName=moment()._lang._monthsShort[$scope.current.month()]+$scope.current.format(" YYYY")},$scope.isActive=function(day){return $scope.left?day.isSame($scope.startDate,"day"):day.isSame($scope.endDate,"day")},$scope.daysOfWeek=angular.copy(moment()._lang._weekdaysMin),$scope.daysOfWeek.push($scope.daysOfWeek.shift()),$scope.pickDate=function(date){$scope.readOnly||!$scope.endDate||!$scope.left&&date.isBefore($scope.startDate,"day")||(date=date.clone(),$scope.left?(date.hours($scope.startDate.hours()),date.minutes($scope.startDate.minutes()),$scope.startDate=date,(date.isSame($scope.endDate,"day")||date.isAfter($scope.endDate,"day"))&&($scope.endDate=$scope.startDate.clone())):(date.hours($scope.endDate.hours()),date.minutes($scope.endDate.minutes()),$scope.endDate=date))},$scope.setPrevMonth=function(notPropagate){$scope.current.subtract("month",1),$scope.updateCalendar(),notPropagate||$scope.$parent.$broadcast("prevMonth")},$scope.setNextMonth=function(notPropagate){$scope.current.add("month",1),$scope.updateCalendar(),notPropagate||$scope.$parent.$broadcast("nextMonth")}}],link:function(scope,element,attrs){scope.$watchCollection("isOpen",function(){scope.isOpen&&(scope.left?(scope.readOnly||null===scope.startDate||void 0===scope.startDate)&&null!==scope.endDate&&void 0!==scope.endDate?scope.current=moment([scope.endDate.year(),scope.endDate.month(),1]).subtract("month",1):scope.current=moment([scope.startDate.year(),scope.startDate.month(),1]):scope.readOnly?null!==scope.startDate&&void 0!==scope.startDate&&(scope.current=moment([scope.startDate.year(),scope.startDate.month(),1]).add("month",1)):null!==scope.endDate&&void 0!==scope.endDate?scope.current=moment([scope.endDate.year(),scope.endDate.month(),1]):scope.current=moment([scope.startDate.year(),scope.startDate.month(),1]).add("month",1),null!==scope.current&&void 0!==scope.current&&scope.updateCalendar())}),scope.$watchCollection("readOnly",function(){scope.readOnly?element.addClass("rs-readonly"):element.removeClass("rs-readonly")}),scope.left=""===attrs.left,scope.right=""===attrs.right,scope.left?scope.$on("nextMonth",function(e){scope.setNextMonth(!0)}):scope.$on("prevMonth",function(e){scope.setPrevMonth(!0)})},replace:!0,restrict:"E",scope:{endDate:"=",isOpen:"=",readOnly:"=",startDate:"="},template:"<div class='rs-calendar'><table class='table-condensed'><thead><tr><th><i class='glyphicon glyphicon-triangle-left' style='cursor:pointer' ng-click='setPrevMonth()' ng-if='left'></i></th><th style='width:auto'>{{monthName}}</th><th class='available'><i class='glyphicon glyphicon-triangle-right' style='cursor:pointer' ng-click='setNextMonth()' ng-if='!left || right'></i></th></tr></thead><tbody><tr><td colspan='3' style='padding:0px'><table class='table-condensed' style='border-spacing:4px;border-collapse:initial;margin-left:-4px;margin-right:-4px'><thead><tr><th sly-repeat='d in daysOfWeek' sly-evaluate-only-when='isOpen'>{{d}}</th></tr></thead><tbody><tr style='height:32px' sly-repeat='week in calendar'><td ng-if='isOpen' style='padding:0' class='available' ng-click='pickDate(day)' sly-repeat='day in week' ng-class='{off:isOff(day), inrange:inRange(day), active:isActive(day)}'><div style='width:32px'>{{getDayNumber(day)}}</div></td></tr></tbody></table></td></tr></tbody></table></div>"}}).directive("rsNonYearCalendar",function(){var buildCalendar=function(month){var i,j,curDate=moment([2e3,month,1]),calendar=[];for(i=0;5>i;++i)calendar[i]=[];for(i=0;5>i;++i)for(j=0;7>j;++j){if(curDate.month()!=month)return calendar;calendar[i][j]=curDate,curDate=angular.copy(curDate).add("day",1)}return calendar};return{controller:["$scope",function($scope){$scope.curMonth=(new Date).getMonth(),$scope.updateCalendar=function(){$scope.calendar=buildCalendar($scope.curMonth),$scope.monthName=moment()._lang._months[$scope.curMonth]},$scope.setPrevMonth=function(){--$scope.curMonth,$scope.updateCalendar()},$scope.setNextMonth=function(){++$scope.curMonth,$scope.updateCalendar()},$scope.getDayNumber=function(day){return day.date()},$scope.daySelected=function(day){$scope.ngModel=day,angular.isFunction($scope.onSelect)&&$scope.onSelect()},$scope.updateCalendar()}],replace:!0,restrict:"E",scope:{ngModel:"=",onSelect:"&"},template:"<div class='rs-calendar'><table class='table-condensed'><thead><tr><th><i class='glyphicon glyphicon-triangle-left' ng-click='setPrevMonth()' ng-show='curMonth !== 0' style='cursor:pointer'></i></th><th style='width:auto'>{{monthName}}</th><th><i class='glyphicon glyphicon-triangle-right' ng-click='setNextMonth()' ng-show='curMonth !== 11' style='cursor:pointer'></i></th></tr><tr></tr></thead><tbody><tr><td colspan='3' style='padding:0px'><table class='table-condensed' style='border-spacing:4px;border-collapse:initial;margin-left:-4px;margin-right:-4px'><tr style='height:32px' sly-repeat='week in calendar'><td style='padding:0' class='available' sly-repeat='day in week' style='cursor:pointer' ng-click='daySelected(day)'><div style='width:32px'>{{getDayNumber(day)}}</div></td></tr></table></td></tr></tbody></table></div>"}}).directive("rsTwoCalendars",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.undetermined=null===$scope.ngModel.to&&void 0===$scope.ngModel.to,$scope.preventClose=function($event){$event.stopPropagation()}}],link:function(scope,element,attrs){scope.start=""===attrs.start,scope.$watch(function(){return scope.ngModel},function(){null!==scope.ngModel.to&&void 0!==scope.ngModel.to&&(scope.undetermined=!1),scope.time=scope.start?scope.ngModel.from:scope.ngModel.to},!0),scope.$watch(function(){return scope.time},function(){scope.start?scope.ngModel.from=moment(scope.time):scope.ngModel.to=moment(scope.time)},!0),scope.$watchCollection("undetermined",function(o,n){scope.undetermined?scope.ngModel.to=null:o!==n&&(scope.ngModel.to=scope.ngModel.from.clone())})},replace:!0,require:"ngModel",restrict:"E",scope:{isOpen:"=",ngModel:"="},template:"<ul class='dropdown-menu' role='menu'><li ng-click='preventClose($event)'><div class='rs-calendar-container'><div class='rs-disabled' ng-if='undetermined && !start'>&nbsp;</div><table><tr><td colspan='2' align='left' style='padding-left:15px;'><span style='height:32px' ng-show='start'>&nbsp;</span><rs-check-box style='height:32px' ng-hide='start' id='{{::uid}}' ng-model='undetermined' label='Undetermined'></rs-check-box></td></tr><tr><td><rs-calendar start-date='ngModel.from' end-date='ngModel.to' is-open='isOpen' left read-only='!start'></rs-calendar></td><td><rs-calendar start-date='ngModel.from' end-date='ngModel.to' right read-only='start || undetermined' is-open='isOpen'></rs-calendar></td></tr><tr><td colspan='2' align='center'><rs-time ng-model='time'></rs-time></td></tr></table></div></li></ul>"}}).directive("rsDateRange",["$compile","UID","dropDownToggleService","$timeout",function($compile,UID,dropDownToggleService,$timeout){return{link:function(scope,elm){scope.enabled=null!==scope.ngModel.from&&void 0!==scope.ngModel.from,scope.uid=UID.create();var d,paddingClass="",handleDropDown=function(){var availableTop=elm.position().top,availableBottom=scrollableElement.height()-elm.height()-availableTop,padding=20;availableBottom>scope.heightD+padding?scope.isDropUp=!1:scope.isDropUp=!0},scrollableElement=dropDownToggleService.findFirstScrollable(elm);scrollableElement.on("scroll",scope.$apply.bind(scope,handleDropDown)),scope.scrollableElement=scrollableElement,null!==scope.labelFrom&&void 0!==scope.labelFrom&&""!==scope.labelFrom&&(paddingClass="label-space"),scope.temporaryClosure||(scope.enabled=!0),void 0!==scope.labelSameLine&&scope.labelSameLine!==!0?(elm.addClass("rs-two-line"),d=$compile("<rs-check-box id='{{::uid}}' ng-model='ngModel.enabled' ng-if='temporaryClosure' label='Schedule a temporary closure'></rs-check-box><div class='rs-date-range-inner' ng-class='{dropup: isDropUp}' ng-if='ngModel.enabled'>  <table style='width:100%'>    <tr>      <td class='rs-from'>        <rs-label style='text-align:left'>{{::labelFrom}}</rs-label>      </td>      <td class='rs-to'>        <rs-label style='text-align:left'>{{::labelTo}}</rs-label>      </td>    </tr>    <tr>      <td class='rs-from'>        <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openStart'>          <input class='dropdown-toggle' style='margin-top:0' dropdown-toggle type='text' value='{{ngModel.from | formattedRSDateTime}}' readonly/>          <rs-two-calendars ng-model='ngModel' start is-open='openStart'></rs-two-calendars>        </div>      </td>      <td class='rs-to'>        <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openEnd'>          <input class='dropdown-toggle' style='margin-top:0' dropdown-toggle type='text' value='{{ngModel.to | formattedRSDateTime}}' readonly/>          <rs-two-calendars ng-model='ngModel' end is-open='openEnd'></rs-two-calendars>        </div>      </td>    </tr>    <tr>     <td><rs-text-area label='{{type}} Description' placeholder='Reason'  ng-model='ngModel.reason'></rs-text-area></td>    </tr>  </table></div>")(scope)):d=$compile("<rs-check-box id='{{::uid}}' ng-model='ngModel.enabled' ng-if='temporaryClosure' label='Schedule a temporary closure'></rs-check-box><div class='rs-date-range-inner' ng-class='{dropup: isDropUp}' ng-if='ngModel.enabled'>  <div class='text-label' style='display:table-cell;width:0'>    <label class='"+paddingClass+" rs-from' style='text-align:right'>{{::labelFrom}}</label>  </div>  <div class='text-field' style='width:50%;display:table-cell'>    <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openStart'>      <input class='dropdown-toggle' dropdown-toggle type='text' value='{{ngModel.from | formattedRSDateTime}}' readonly/>      <rs-two-calendars ng-model='ngModel' start is-open='openStart'></rs-two-calendars>    </div>  </div>  <div class='text-label' style='display:table-cell;width:0'>    <label class='"+paddingClass+" rs-to' style='text-align:right'>{{::labelTo}}</label>  </div>  <div class='text-field' style='width:50%;display:table-cell'>    <div class='dropdown' ng-class='{ dropup: isDropUp }' dropdown is-open='openEnd'>      <input type='text' class='dropdown-toggle' dropdown-toggle value='{{ngModel.to | formattedRSDateTime}}' readonly/>      <rs-two-calendars ng-model='ngModel' end is-open='openEnd'></rs-two-calendars>    </div>  </div></div><div class='rs-date-range-inner'> <rs-text-area ng-if='ngModel.enabled' label='Reason' placeholder='Reason' mandatory='false' ng-model='ngModel.reason'></rs-text-area></div>")(scope),elm.append(d),scope.$watch("enabled",function(o,n){if(scope.enabled){if(o!==n){var tmp=moment();scope.ngModel.from=moment([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),scope.ngModel.to=scope.ngModel.from.clone();var toggleElements=elm.find(".dropdown-toggle");scope.toggleEl1=$(toggleElements[0]),scope.toggleEl2=$(toggleElements[1]);var data1={scope:scope,element:$(scope.toggleEl1[0].parentNode),setMargin:!1,service:dropDownToggleService},data2=_.cloneDeep(data1);data2.element=$(scope.toggleEl2[0].parentNode),scope.toggleEl1.on("click",data1,dropDownToggleService.customClickHandler),scope.toggleEl2.on("click",data2,dropDownToggleService.customClickHandler)}}else scope.ngModel.from=scope.ngModel.to=null}),scope.$on("$destroy",function(){scrollableElement.off(),scope.toggleEl1&&scope.toggleEl1.off(),scope.toggleEl2&&scope.toggleEl2.off()})},replace:!0,require:"ngModel",restrict:"E",scope:{labelFrom:"@",labelTo:"@",labelSameLine:"=",ngModel:"=",temporaryClosure:"@"},template:"<div class='rs-date-range'></div>"}}]).directive("rsDate",function(){return{controller:["$scope","$element","dropDownToggleService",function($scope,$element,dropDownToggleService){if(null!==$scope.ngModel&&void 0!==$scope.ngModel&&_.isDate($scope.ngModel))throw new Error("You must use moment");var handleDropDown=function(){var availableTop=$element.offset().top,availableBottom=$(window).height()-availableTop;availableBottom>$scope.heightD?$scope.isDropUp=!1:$scope.isDropUp=!0},toggleEl=$element.find(".dropdown-toggle"),scrollableElement=dropDownToggleService.findFirstScrollable($element),data={scope:$scope,element:$element,setMargin:!1,service:dropDownToggleService};$(toggleEl).on("click",data,dropDownToggleService.customClickHandler),scrollableElement.on("scroll",$scope.$apply.bind($scope,handleDropDown)),$scope.scrollableElement=scrollableElement,$scope.preventClose=function($event){$event.stopPropagation()},$scope.hideCalendar=function(){$scope.isOpen=!1},$scope.$on("$destroy",function(event){scrollableElement.off(),$(toggleEl).off()})}],replace:!0,require:"ngModel",restrict:"E",scope:{dateFormat:"@",ngModel:"="},template:"<div class='rs-date' ng-class='{ dropup: isDropUp }'>  <div class='dropdown' dropdown is-open='isOpen'>    <input class='dropdown-toggle' dropdown-toggle type='text' placeholder='Date'  value='{{ngModel | formattedRSDate:dateFormat}}' readonly>    <ul class='dropdown-menu' role='menu'>      <li ng-click='preventClose($event)'>        <rs-non-year-calendar ng-model='ngModel' on-select='hideCalendar()'></rs-non-year-calendar>      </li>    </ul>  </div></div>"}}).directive("rsYearDate",function(){return{controller:["$scope","$element","dropDownToggleService",function($scope,$element,dropDownToggleService){var handleDropDown=function(){var availableTop=$element.offset().top,availableBottom=$(window).height()-availableTop;availableBottom>$scope.heightD?$scope.isDropUp=!1:($scope.dropdownElement&&$scope.dropdownElement.css("margin-bottom",$scope.marginBottom),$scope.isDropUp=!0)},toggleEl=$element.find(".dropdown-toggle"),scrollableElement=dropDownToggleService.findFirstScrollable($element);$scope.scrollableElement=scrollableElement;var data={scope:$scope,element:$element,setMargin:!0,service:dropDownToggleService};if($(toggleEl).on("click",data,dropDownToggleService.customClickHandler),scrollableElement.on("scroll",$scope.$apply.bind($scope,handleDropDown)),null!==$scope.ngModel&&null!==$scope.ngModel&&_.isDate($scope.ngModel))throw new Error("You must use moment");$scope.preventClose=function($event){$event.stopPropagation()},$scope.$watch(function(){return $scope.startDate},function(){$scope.ngModel=$scope.startDate},!0),$scope.hideCalendar=function(){$scope.isOpen=!1},$scope.$on("$destroy",function(event){scrollableElement.off(),$(toggleEl).off()})}],replace:!0,require:"ngModel",restrict:"E",scope:{dateFormat:"@",ngModel:"=",startDate:"="},template:"<div class='rs-date' ng-class='{ dropup: isDropUp }'>  <div class='dropdown' dropdown is-open='isOpen'>    <input class='dropdown-toggle' dropdown-toggle type='text' placeholder='Date'  value='{{ngModel | formattedRSDate:dateFormat}}' readonly>    <ul class='dropdown-menu' role='menu'>      <li ng-click='preventClose($event)'>        <rs-calendar ng-model='ngModel' start-date='startDate' end-date='startDate' left right is-open='isOpen' on-select='hideCalendar()'></rs-calendar>      </li>    </ul>  </div></div>"}}),rockspoonUi.directive("rsDeliveryCatering",function(){return{restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"=",type:"@",mapOptions:"="},template:"<div class='rs-delivery-catering'>  <rs-section title='{{::type}}' mandatory='true'>    <rs-section title='{{::type}} Area' mandatory='true'>      <div class='description'>Please draw on the map below (by clicking on the bounds) the covered {{::type}} area</div>      <rs-map options='mapOptions' ng-model='ngModel.area'></rs-map>    </rs-section>    <rs-section title='{{::type}} Time Estimate' mandatory='true' separator='true'>      <rs-estimated-time type='{{::type}}' ng-model='ngModel.estimatedTime'></rs-estimated-time>    </rs-section>    <rs-section title='Order Minimum for {{::type}}' mandatory='true'>      <rs-minimum-fee ng-model='ngModel.minimumFee'></rs-minimum-fee>    </rs-section>    <rs-section title='Restaurant {{::type}} Fee' mandatory='true' >      <rs-fee ng-model='ngModel.fee' type='{{::type}}'></rs-fee>    </rs-section>    <rs-section title='Person in charge of {{::type}}'>      <rs-person-in-charge ng-model='ngModel.personInCharge' type='{{::type}}'></rs-person-in-charge>    </rs-section>  </rs-section></div>"}}),rockspoonUi.directive("rsDropDown",["$compile",function($compile){return{compile:function(element){var template=angular.element("<div ng-form='form' class='rs-drop-down-directive'>  <div class='rs-drop-down-title'>{{title}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && title'></i></div>  <div class='rs-drop-down dropdown' dropdown on-toggle='toggled(open)'>    <div ng-if='ngModel' class='drop-down dropdown-toggle' dropdown-toggle>      <div>"+element.html()+"</div>      <div class='arrow'></div>    </div>    <div  ng-if='!ngModel' class='drop-down-empty dropdown-toggle' dropdown-toggle>      <div class='arrow'></div>    </div>    <ul class='dropdown-menu'>      <li ng-class='{\"rs-selected\": ngModel.selected}' ng-repeat='ngModel in dropOptions' ng-click='onSelect($index)'>"+element.html()+"</li>    </ul>  </div>  <div ng-messages='form.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='empty'>A non-empty option is required.</ng-message>  </div></div>");return element.empty(),function(scope,element){element.append(template),$compile(template)(scope)}},controller:["$scope",function($scope){function updateValidity(){$scope.form.$setDirty(),$scope.mandatory&&!$scope.ngModel?$scope.form.$setValidity("empty",!1):$scope.form.$setValidity("empty",!0)}var preprocess=function(items){return _.forEach(items,function(item){item.selected=!1}),items};$scope.onSelect=function(index){$scope.dropOptions=preprocess($scope.dropOptions),$scope.ngModel=$scope.dropOptions[index],$scope.ngModel.selected=!0,updateValidity()}}],link:function(scope){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation)},replace:!0,restrict:"E",scope:{dropOptions:"=",mandatory:"=",ngModel:"=",title:"@"}}}]),rockspoonUi.directive("rsEmployeesListView",function(){return{controller:["$scope",function($scope){$scope.search=function(value){return null===value?$scope.ngModel:_.filter($scope.ngModel,function(item){var searchText=value.toLowerCase(),itemText=item.userInfo.firstName.toLowerCase()+" "+item.userInfo.lastName.toLowerCase();return itemText.indexOf(searchText)>=0})}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",selected:"="},template:"<div class='rs-employees-list-view'>  <div class='rs-employees-list'>    <rs-generic-list ng-model='ngModel' selected='selected' fetch='search(value)' is-searchable='true'>      <div class='rs-employee'>        <div class='rs-avatar'>          <i class='glyphicon glyphicon-picture' ng-if='!item.userInfo.avatar'></i>          <img ng-src='{{item.userInfo.avatar.loResolution.url}}' ng-if='item.userInfo.avatar' />        </div>        <div class='rs-details'>          <div>{{item.userInfo.firstName}}&nbsp;{{item.userInfo.lastName}}</div>          <div>{{item.userInfo.phone}}</div>          <div style='font-size: 10px;'><i>added by {{item.createdBy}} on {{item.created | date: 'yyyy/MM/dd'}}</i></div>        </div>      </div>    </rs-generic-list>  </div>  <div class='rs-employees-view' ng-if='selected.userInfo'>    <div class='rs-title'>Employee Information</div>    <rs-label>First Name</rs-label>    {{selected.userInfo.firstName}}    <rs-label>Last Name</rs-label>    {{selected.userInfo.lastName}}    <rs-label>Title</rs-label>    {{selected.title}}    <rs-label>Phone</rs-label>    {{selected.userInfo.phone}}    <rs-label>{{selected.userInfo.metadata.internet[0].type}}</rs-label>    {{selected.userInfo.metadata.internet[0].url}}  </div></div>",
transclude:!0}}),rockspoonUi.directive("rsEstimatedTime",function(){return{controller:["$scope",function($scope){$scope.timesBegin=[],$scope.timesEnd=[],$scope.durationType=[{value:"d",label:"Days"},{value:"w",label:"Weeks"},{value:"m",label:"Months"}];for(var i=0;60>i;i+=5)$scope.timesBegin.push({label:i+" minutes",value:""+i});$scope.$watchCollection("ngModel.from",function(){$scope.timesEnd=[];for(var from=$scope.ngModel.from?parseInt($scope.ngModel.from):0,i=from;60>i;i+=5)$scope.timesEnd.push({label:i+" minutes",value:""+i})})}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",type:"@"},template:"<div>  <div style='display:table' class='rs-estimated-time' ng-if='type !== \"Catering\"'>    <div style='display:table-cell'>Order is estimated to be ready for {{::type}} in&nbsp;</div>    <div style='display:table-cell;width:95px'>      <rs-combo-box ng-model='ngModel.from' options='timesBegin'></rs-combo-box>    </div>    <div style='display:table-cell'>&nbsp;to&nbsp;</div>    <div style='display:table-cell;width:95px'>      <rs-combo-box ng-model='ngModel.to' options='timesEnd'></rs-combo-box>    </div>    <div style='display:table-cell'>&nbsp;after being placed</div>  </div>  <div style='display:table' class='rs-estimated-time' ng-if='type === \"Catering\"'>    <div style='display:table-cell'>Order should be made at least&nbsp;</div>    <div style='display:table-cell;width:60px'>      <rs-text-edit ng-model='ngModel.duration' digit></rs-text-edit>    </div>    <div style='display:table-cell'>&nbsp;</div>    <div style='display:table-cell;width:70px'>      <rs-combo-box ng-model='ngModel.durationType' options='durationType'></rs-combo-box>    </div>    <div style='display:table-cell'>&nbsp;in advance</div>  </div></div>"}}),rockspoonUi.directive("rsExtraModifiers",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id,scope.ngModel.free||(scope.ngModel.free="none"),scope.$watch("ngModel.isOptional",function(){scope.ngModel.isOptional||(scope.ngModel.hasDefault=!1)}),scope.maximum=[{label:"",value:""}];for(var i=0;i<scope.ngModel.modifiers.length;++i)scope.maximum.push({value:i+1,label:(i+1).toString()});scope.$watch("ngModel.modifiers.length",function(newLength,oldLength){newLength>oldLength?scope.maximum.push({value:newLength,label:newLength.toString()}):scope.maximum.length>1&&(scope.maximum.pop(),scope.ngModel.allMaxFree>newLength&&(scope.ngModel.allMaxFree=newLength))})},replace:!0,require:"ngModel",restrict:"E",scope:{itemList:"=",sizesList:"=",ngModel:"="},template:"<div class='rs-extra-modifiers'>  <rs-section title='Modifiers - Extra'>    <rs-label label='Optional'></rs-label>    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-extra-modifiers-title'></rs-text-edit>    <div class='free-selections-container'>    <rs-label label='Modifiers for free:'></rs-label>    <rs-radio-button class='free-selections' id='rs-extra_all{{::ngModel.id}}' value='all' label='All'    ng-model='ngModel.free'></rs-radio-button>    <rs-radio-button class='free-selections' id='rs-extra_custom{{::ngModel.id}}' value='custom' label='Custom' ng-model='ngModel.free'></rs-radio-button>    <rs-radio-button class='free-selections' id='rs-extra_none{{::ngModel.id}}' value='none' label='None' ng-model='ngModel.free'></rs-radio-button>    </div>    <rs-multi-extra-price-edit ng-if='ngModel.free == \"custom\"' sizes-list='sizesList' ng-model='ngModel.extras'></rs-multi-extra-price-edit>    <rs-check-box label='Can choose more than 1 modifier' ng-model='ngModel.multiple' id='rs-extra-modifiers + {{::id}}'></rs-check-box>    <rs-multi-extra-modifiers ng-model='ngModel.modifiers' sizes-list='sizesList' default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' item-list='itemList'></rs-multi-extra-modifiers>  </rs-section></div>"}}).directive("rsMultiExtraModifiers",function(){return{controller:["$scope","UID",function($scope,UID){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){var tmp=moment(),from=moment.utc([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),to=from.clone(),extraPrices=[];if($scope.sizesList.length<=1)extraPrices.push({name:"Default",value:0});else for(var i=0;i<$scope.sizesList.length;i++)extraPrices.push({name:$scope.sizesList[i].name,value:0});return{isNotAvailable:!1,name:"",preparationTime:new Date(0,0,0,0,0,0),notAvailable:{from:from,to:to},extraNumber:0,extraPrices:extraPrices,$uid:UID.create()}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"=",hasDefault:"=",defaultModifier:"=",sizesList:"="},template:"  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table>      <thead>        <tr ng-show='internalModel.length > 1'>          <td>&nbsp;</td>          <td>&nbsp;</td>          <td class='rs-add-price-header' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>            <div >Add Price $</div>          </td>          <td>&nbsp;</td>        </tr>        <tr ng-show='internalModel.length > 1'>          <td>&nbsp;</td>          <td>&nbsp;</td>          <td class='rs-prices-header'  ng-class='{ borders: $parent.$parent.sizesList.length > 1 }' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>            <div ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</div>            <span  ng-if='$parent.$parent.sizesList.length == 1'>Price</span>          </td>          <td>&nbsp;</td>        </tr>      </thead>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>          <td width='30' class='remove-td'>            <div class='remove-button'>              <div ng-if='!$last' ng-click='remove(model)'>                <i class='icon-icons_Delete'></i>              </div>            </div>          </td>          <td class='rs-extra-modifiers-container' ng-class='{selected: model.isNotAvailable, leftBorder: $parent.$parent.$parent.ngModel.free != \"none\"  }'>            <div>              <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Modifier' ng-change='changed(model)' ng-model='model.name' />              <div class='line-number'>                <div class='number'>{{$index + 1}}</div>              </div>              <div class='database-icon'>                <i class='icon-icons_Database'></i>              </div>            </div>            <div class='rs-preparation-time-container'>              <div class='rs-preparation-time-text' ng-class='{\"last-preparation-time\": $last}'>Preparation time </div>              <rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ timeSteps: [1, 1, 1], show24Hours: true }' class='rs-preparation-time'/><rs-time>            </div>          </td>          <td class='rs-prices-container' ng-if='$parent.$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1' ng-class='{selected: model.isNotAvailable}'>            <input currency type='text' ng-model='obj.value' ng-change='changed(model)' ng-repeat='obj in model.extraPrices' />          </td>          <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>            <rs-radio-button  id='rs-extra-modifier_default_{{$index}}' value='{{model.name.itemId}}_{{$index}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>          </td>          <td class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>        <tr ng-if='!$last' style='line-height: 5px;'>          <td colspan='6'>&nbsp;</td>        </tr>        <tr ng-if='$parent.$parent.ngModel.free == \"all\"'>          <td></td>          <td>            <div class='free-selections-number-container'>              <div class = 'free-selections-number-text' >Can order a maximum of </div>              <rs-combo-box class = 'free-selections-number-combo' options='$parent.$parent.$parent.maximum' ng-model='$parent.$parent.$parent.ngModel.allMaxFree'></rs-combo-box>              <div class = 'free-selections-number-text'>modifiers.</div>            </div>          </td>          <td colspan='4'></td>        </tr>      </tbody>    </table>  </rs-multi-line>"}}),rockspoonUi.directive("rsFee",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",type:"@"},template:"<div style='display:table' class='rs-fee'>  <div style='display:table-cell'>{{::type}} fee is $&nbsp;</div>  <div style='display:table-cell;width:40px'>    <rs-text-edit ng-model='ngModel' currency mandatory='true'></rs-text-edit>  </div></div>"}}).directive("rsMinimumFee",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div style='display:table' class='rs-minimum-fee'>  <div style='display:table-cell'>The customer must place an order of at least $&nbsp;</div>  <div style='display:table-cell;width:40px'>    <rs-text-edit ng-model='ngModel' currency></rs-text-edit>  </div>  <div style='display:table-cell'>&nbsp;for us to deliver</div></div>"}}),rockspoonUi.directive("rsMultiSpot",function(){return{controller:["$scope",function($scope){$scope.shapes=[{label:"Circular",value:"circular"},{label:"Counter",value:"counter"},{label:"Rectangular",value:"rectangular"},{label:"Oval",value:"oval"}],$scope.types=[{label:"Fixed Seating",value:"fixed_seating"},{label:"Fixed Standing",value:"fixed_standing"},{label:"Movable Seating",value:"movable_seating"},{label:"Movable Standing",value:"movable_standing"}],$scope.opts={rowFactory:function(){return{number:null,type:"",shape:"",seats:null,maximumCapacity:null}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-spot' style='margin-top: 20px'> <rs-multi-line ng-model='ngModel' ng-opts='opts'>   <table class='rs-main-table'>     <tbody>       <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>         <td width='30'>           <div class='remove-button' style='margin-top:45px'>             <div ng-if='!$last' ng-click='remove(model)'>               <i class='icon-icons_Delete'></i>             </div>           </div>         </td>         <td>           <rs-text-edit style='width: 55px;' digit on-change='changed(model)' ng-model='model.number' label='Table #' label-same-line='false'></rs-text-edit>         </td>         <td style='padding-left: 3px;'>           <rs-combo-box label='Table Type' on-change='changed(model)' label-same-line='false' options='$parent.$parent.types' ng-model='model.type'></rs-combo-box>         </td>         <td style='padding-left: 3px;'>           <rs-combo-box label='Table Shape' on-change='changed(model)' label-same-line='false' options='$parent.$parent.shapes' ng-model='model.shape'></rs-combo-box>         </td>         <td style='padding-left: 3px;'>           <rs-text-edit style='width:70px;' digit on-change='changed(model)' ng-model='model.seats' label='# of Seats' label-same-line='false'></rs-text-edit>         </td>         <td style='padding-left: 3px;'>           <rs-text-edit style='width:70px;' digit on-change='changed(model)' ng-model='model.maximumCapacity' label='Capacity' label-same-line='false'></rs-text-edit>         </td>       </tr>     </tbody>   </table> </rs-multi-line></div>"}}),rockspoonUi.directive("rsMultiDiningSection",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:"",description:null,spots:[]}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-dining-section'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table class='rs-main-table'>      <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>        <td style='vertical-align:top'>          <div class='remove-button' ng-class='{\"remove-button-separator\": !$first}'>            <div ng-if='!$last' ng-click='remove(model)'>              <i class='icon-icons_Delete'></i>            </div>          </div>        </td>        <td>          <rs-section title='Dining Section' mandatory='true' style='margin-left:10px' separator='!$first'>            <rs-text-edit style='width:450px' placeholder='Add name' label-same-line='true' on-change='changed(model)' ng-model='model.name'></rs-text-edit>            <rs-text-area style='width:450px' label='Description' on-change='changed(model)' ng-model='model.description'></rs-text-area>            <rs-multi-spot ng-model='model.spots'></rs-multi-spot>          </rs-section>        </td>      </tr>    </table>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsFocusNext",["$timeout",function($timeout){return{link:function($scope,element){$scope.next=function(){return element[0].value.length>=element[0].maxLength},$scope.$watch($scope.next,function(newValue){if(newValue){var nextInput=element.next("input");$timeout(function(){1===nextInput.length&&nextInput[0].focus()},0,!1)}})},require:["ngModel"],restrict:"A"}}]),rockspoonUi.directive("rsForgotPassword",function(){return{controller:["$scope",function($scope){$scope.search=function(){$scope.$parent.search()},$scope.selectAccount=function(idx){$scope.$parent.selectAccount(idx)},$scope.sendRequest=function(){$scope.$parent.sendRequest()},$scope.confirmPIN=function(){$scope.$parent.confirmPIN()},$scope.resetPassword=function(){$scope.$parent.resetPassword()},$scope.$watch("showPassword",function(){$scope.showPassword?$scope.inputType="text":$scope.inputType="password"})}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div ng-form='form' novalidate class='rs-forgot-password'>  <rs-tabs current-step='ngModel.currentStep' selected='ngModel.selectedStep' allow-back='true'>    <rs-tab title='Find Your Account' step mandatory='true'>      <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.search' label='Phone or Email'></rs-text-edit>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='search()'><i class='icon-icons_magnifier'></i>&nbsp;Search</button>      </div>    </rs-tab>    <rs-tab title='Identify your account' step mandatory='true'>      <rs-label>These accounts are compatible with your search</rs-label>      <div class='alert alert-danger' ng-show='ngModel.error'>        <i class='glyphicon glyphicon-exclamation-sign'></i> {{ ngModel.error }}      </div>      <div ng-repeat='match in ngModel.matches'>        <div class='rs-match-row'>          <div class='rs-match-details'>{{ match.name }}</div>          <div class='rs-match-button'>            <rs-spinner ng-show='ngModel.locked'></rs-spinner>            <button ng-show='!ngModel.locked' ng-click='selectAccount($index)'><i class='glyphicon glyphicon-ok'></i>&nbsp;This is my account</button>          </div>        </div>       </div>    </rs-tab>    <rs-tab title='Reset your password' step mandatory='true'>      <rs-label>How would you like to reset your password?</rs-label>      <div ng-repeat='method in ngModel.selected.methods'>        <rs-radio-button id='{{method}}' value='{{method}}' label='{{ ngModel.methodLabels[method] }}' ng-model='ngModel.resetMethod'></rs-radio-button>      </div>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='sendRequest(ngModel.resetMethod)'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>      </div>    </rs-tab>    <rs-tab title='Validate sent pin' step mandatory='true'>      <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.pin' label='Enter your six-digit confirmation code below to continue resetting your password:'></rs-text-edit>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='confirmPIN()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>      </div>    </rs-tab>    <rs-tab title='Reset your password' step mandatory='true'>      <rs-text-edit-compare input-type='{{inputType}}' mandatory='true' label-same-line='false' compare-model='ngModel.confirmPassword' ng-model='ngModel.password' label='Password'></rs-text-edit-compare>      <rs-check-box id='showPassword' ng-model='showPassword' label='Show Password'></rs-check-box>      <div class='footer'>        <rs-spinner ng-show='ngModel.locked'></rs-spinner>        <button ng-show='!ngModel.locked' ng-click='resetPassword()'><i class='glyphicon glyphicon-ok'></i>&nbsp;Continue</button>      </div>    </rs-tab>  </rs-tabs></div>"}}),rockspoonUi.directive("rsGenericList",["$compile",function($compile){return{controller:["$scope",function($scope){var preprocess=function(items){return _.forEach(items,function(item){item.selected=!1}),items};$scope.$watch(function(){return $scope.ngModel},function(){$scope.searchResults=preprocess(_.cloneDeep($scope.ngModel))},!0),$scope.search=function(value){$scope.searchResults=preprocess($scope.fetch({value:value}))},$scope.onSelect=function(index){$scope.multiSelect?($scope.searchResults[index].selected=!$scope.searchResults[index].selected,$scope.selected=_.filter($scope.searchResults,function(item){return item.selected===!0})):($scope.searchResults=preprocess($scope.searchResults),$scope.selected=$scope.searchResults[index],$scope.selected.selected=!0)}}],restrict:"E",scope:{isSearchable:"@",ngModel:"=",selected:"=",fetch:"&",multiSelect:"@"},compile:function(element){var template=angular.element("<div class='rs-generic-list'>  <div class='rs-search-box' ng-if='isSearchable'>    <i class='glyphicon glyphicon-search'></i>    <input class='inputbox' type='text' ng-model='searchValue' ng-change='search(searchValue)'>  </div>  <div class='rs-generic-list-results'>    <div>      <div ng-class='{\"rs-selected-list-item\": item.selected}' sf-virtual-repeat='item in searchResults' ng-click='onSelect($index)'>"+element.html()+"</div>    </div>  </div></div>");return element.empty(),function(scope,element){element.append(template),$compile(template)(scope)}}}}]);var PREVIEW_W=200,PREVIEW_H=200,BOX_W=330,BOX_H=330,REAL_BOX_W=1024,REAL_BOX_H=1024;rockspoonUi.directive("rsImagePickerGeneric",function(){return{controller:["$scope","$modal",function($scope,$modal){this.add=function(){var modal=$modal.open({windowClass:"choose-photo",backdrop:"static",template:"<div ng-form='form'>  <div style='padding-top:10px;margin-left:5px;margin-right:5px;display:table'>    <div style='display:table-cell;width:100%;text-align:left'>      <div>        <span style='font-weight:bold'>Upload Photo </span>(from computer)      </div>      <div style='font-size:12px;font-style:italic'>Keep the image centered in the square</div>    </div>    <div style='display:table-cell;text-align:right'>      <button ng-click='close()'>Cancel</button>    </div>  </div>  <div class='modal-body'>    <div style='text-align:center'>      <center>        <input style='color:white;width:1px;height:1px;border:none' id='imageResult' ng-model='obj.img' value='' type='text' />        <img class='image-result' rs-image-cropped ng-model='obj.result' ng-show='obj.img' image='{{obj.img}}' />      </center>      <rs-image-loader class='image-loader' ng-model='obj.img' ng-hide='obj.img' label='Select Photo'></rs-image-loader>    </div>  </div>  <div>    <button style='margin-top:20px;margin-bottom:8px' ng-disabled='!obj.img' ng-click='setImage()'>Upload Photo</button><br />    <button style='margin-bottom:20px' ng-click='changePhoto()'>Change Photo</button>  </div></div>",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.obj={img:null,result:null},$scope.changePhoto=function(){$scope.$broadcast("changePhoto")},$scope.setImage=function(){$modalInstance.close($scope.obj.result)},$scope.close=function(){$modalInstance.close()}}]});modal.result.then(function(model){model&&(_.isUndefined($scope.ngModel.buffer)?$scope.ngModel=model:$scope.ngModel.buffer=model)})}}],scope:{ngModel:"="},require:"ngModel",replace:!0,restrict:"E",transclude:!0,template:"<ng-transclude ng-form='form'></ng-transclude>"}}).directive("rsImagePicker",function(){return{link:function(scope,elem,attrs,controllers){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation);var rsImagePickerGenericCtrl=controllers[0],rsImagePickerController=controllers[1];scope.$watchCollection("ngModel",function(){var valid="true"==scope.mandatory?!(!scope.ngModel.url&&!scope.ngModel.buffer):!0;rsImagePickerController.$setValidity("image",valid)}),scope.open=rsImagePickerGenericCtrl.add},controller:["$scope",function($scope){$scope.upload=function(){$scope.open(),$scope.modalOpened=!0}}],require:["^rsImagePickerGeneric","ngModel"],restrict:"E",scope:{ngModel:"=",placeholder:"@",type:"@",mandatory:"@"},template:"<div ng-form='form' class='rs-image-picker' ng-if='type === \"image\"'>  <div class='rs-image-picker-empty' ng-click='upload()' ng-if='!ngModel || (!ngModel.url && !ngModel.buffer)'>    <div>      <i class='glyphicon glyphicon-picture'></i>      <div class='add' ng-if='placeholder'><i class='glyphicon glyphicon-camera'></i>&nbsp;{{::placeholder}}</div>    </div>  </div>  <img rs-image='{{ngModel.url}}' ng-if='ngModel.url && !ngModel.buffer' ng-click='upload()' />  <img rs-image='{{ngModel.buffer}}' ng-if='ngModel.buffer' ng-click='upload()' /></div><button class='rs-button' ng-click='upload()' ng-if='type !== \"image\"'>Upload</button><div ng-messages='$parent.form.$error' ng-show='modalOpened || showValidationErrors' class='rs-validation-error image-error'>  <ng-message when='image'>Logo required.</ng-message></div>"}}).directive("rsImage",function(){return{controller:["$scope","$element",function($scope,$element){$scope.$watchCollection("rsImage",function(){$scope.rsImage&&$element.attr("src",$scope.rsImage)})}],restrict:"A",scope:{rsImage:"@"}}}).directive("rsImageCropped",function(){function createArea(w,h){var canvas=$("<canvas></canvas>");return canvas.attr("width",w),canvas.attr("height",h),canvas.hide(),canvas}function setImage(api,src,W,H,scope){var w=PREVIEW_W,h=PREVIEW_H,x=W/2-w/2,y=H/2-h/2,x1=x+w,y1=y+h;api.setImage(src,function(){this.setOptions({minSize:[80,80],maxSize:[BOX_W,BOX_H],setSelect:[x,y,x1,y1],bgOpacity:.3,aspectRatio:1,onChange:scope.updateInfo,allowSelect:!1,allowResize:!0,trackDocument:!0}),this.focus()})}function createImageArea(image,mw,mh,isPreview){var area,w=image.width,h=image.height;w>h?(w>mw||isPreview)&&(h=Math.round(h*mw/w),w=mw):(h>mh||isPreview)&&(w=Math.round(w*mh/h),h=mh),area=createArea();var squareSide=w>h?w:h;area=isPreview?createArea(mw,mh):createArea(squareSide,squareSide);var ctx=area.get(0).getContext("2d"),x=0,y=0;return isPreview?(x=mw/2-w/2,y=mh/2-h/2):w>h?y=(w-h)/2:x=(h-w)/2,ctx.drawImage(image,0,0,image.width,image.height,x,y,w,h),area.remove(),{area:area,side:squareSide}}return{controller:["$scope","$element",function($scope,$element){$scope.$watchCollection("image",function(){$scope.image&&$element.attr("src",$scope.image)}),$scope.updateInfo=function(event){var realSide=$scope.realSide,x=realSide*event.x/BOX_W,y=realSide*event.y/BOX_H,w=realSide*event.w/BOX_W,h=realSide*event.h/BOX_H,area=createArea(w,h),ctx=area.get(0).getContext("2d");ctx.drawImage($scope.realArea.get(0),x,y,w,h,0,0,w,h),$scope.ngModel=area.get(0).toDataURL("image/jpeg",1),$scope.$apply(),area.remove()}}],link:function(scope,element){var api=null;scope.img=new Image,element.bind("load",function(){scope.img.onload=function(){var a=createImageArea(this,REAL_BOX_W,REAL_BOX_H,!1);scope.realArea=a.area,scope.realSide=a.side;var src=this.src=createImageArea(this,BOX_W,BOX_H,!0).area.get(0).toDataURL("image/jpeg",1);this.onload=null,api?setImage(api,src,BOX_W,BOX_H,scope):element.Jcrop({bgColor:"#FFFFFF",addClass:"jcrop-light"},function(){setImage(api=this,src,BOX_W,BOX_H,scope)})},scope.img.src=element.attr("src")}),scope.$on("$destroy",function(){element.unbind("load")})},restrict:"A",scope:{image:"@",height:"@",ngModel:"=",width:"@"}}}).directive("rsImageLoader",function(){return{controller:["$scope","$element","$timeout",function($scope,$element,$timeout){$scope.$on("changePhoto",function(e){$scope.choosePicture()}),$scope.choosePicture=function(){var input=$element.find("input:file").first();$timeout(function(){input.click()})},$scope.getFile=function(){var reader=new FileReader;reader.onload=function(){$scope.$apply(function(){$scope.ngModel=reader.result})},reader.readAsDataURL($scope.file)}}],link:function($scope,element){var input=element.find("input:file").first();input.bind("change",function(event){$scope.file=(event.srcElement||event.target).files[0],$scope.getFile()}),$scope.$on("$destroy",function(){input.unbind("change")})},replace:!0,restrict:"E",scope:{label:"@",ngModel:"="},template:"<div style='background:black;display:table'>  <div style='display:table-cell;vertical-align:middle;width:100%;height:100%'>    <input type='file' accept='image/*' ng-hide='true' />    <button ng-click='choosePicture()'>{{label}}</button>  </div></div>"}}),rockspoonUi.directive("rsIngredient",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id,scope.ngModel.free||(scope.ngModel.free="none"),scope.$watch("ngModel.isOptional",function(){scope.ngModel.isOptional||(scope.ngModel.hasDefault=!1)}),scope.maximum=[{label:"",value:""}];for(var i=0;i<scope.ngModel.ingredients.length;++i)scope.maximum.push({value:i+1,label:(i+1).toString()});scope.$watch("ngModel.ingredients.length",function(newLength,oldLength){newLength>oldLength?scope.maximum.push({value:newLength,label:newLength.toString()}):scope.maximum.length>1&&(scope.maximum.pop(),scope.ngModel.allMaxFree>newLength&&(scope.ngModel.allMaxFree=newLength))})},replace:!0,require:"ngModel",restrict:"E",scope:{itemList:"=",sizesList:"=",ngModel:"="},template:"<div class='rs-ingredient'>  <rs-section title='Ingredient Modifiers'>    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-ingredients-title'></rs-text-edit>    <rs-on-off on='Optional Modifier' off='Mandatory Modifier' ng-model='ngModel.isOptional'></rs-on-off>    <rs-label label='Modifiers for free'></rs-label>    <div class='free-selections-container'>      <rs-radio-button class='free-selections' id='rs-ingredient_all{{::ngModel.id}}' value='all' label='All'    ng-model='ngModel.free'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-ingredient_custom{{::ngModel.id}}' value='custom' label='Custom' ng-model='ngModel.free'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-ingredient_none{{::ngModel.id}}' value='none' label='None' ng-model='ngModel.free'></rs-radio-button>    </div>    <rs-multi-extra-price-edit ng-if='ngModel.free == \"custom\"' sizes-list='sizesList' ng-model='ngModel.extras'></rs-multi-extra-price-edit>    <rs-check-box class='rs-default-check' id='rs-ingredient + {{::id}}' label='With Default Option' ng-if='ngModel.isOptional' ng-model='ngModel.hasDefault'></rs-check-box>    <rs-multi-ingredients ng-model='ngModel.ingredients' sizes-list='sizesList' default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' item-list='itemList'></rs-multi-ingredients>  </rs-section></div>"}}).directive("rsMultiIngredients",function(){return{controller:["$scope","UID",function($scope,UID){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){var tmp=moment(),from=moment.utc([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),to=from.clone(),extraPrices=[];if($scope.sizesList.length<=1)extraPrices.push({name:"Default",value:0});else for(var i=0;i<$scope.sizesList.length;i++)extraPrices.push({name:$scope.sizesList[i].name,value:0});return{isNotAvailable:!1,name:"",preparationTime:new Date(0,0,0,0,0,0),notAvailable:{from:from,to:to},extraNumber:0,extraPrices:extraPrices,$uid:UID.create()}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"=",hasDefault:"=",defaultModifier:"=",sizesList:"="},template:"  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table>      <thead>        <tr >          <td>&nbsp;</td>          <td>&nbsp;</td>          <td class='rs-add-price-header' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>            <div >Add Price $</div>          </td>          <td ng-if='$parent.hasDefault && internalModel.length > 1'>&nbsp;</td>          <td ng-if='internalModel.length > 1'>Ingredient</td>          <td>&nbsp;</td>        </tr>        <tr>          <td>&nbsp;</td>          <td>&nbsp;</td>          <td class='rs-prices-header' ng-class='{ borders: $parent.$parent.sizesList.length > 1 }' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>            <div ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</div>            <span  ng-if='$parent.$parent.sizesList.length == 1'>Price</span>          </td>          <td ng-if='$parent.hasDefault && internalModel.length > 1' style='padding:0 5px'>            <span>Default</span>          </td>          <td class='default-header' ng-if='internalModel.length > 1'>            <span>not available</span>          </td>          <td>&nbsp;</td>        </tr>      </thead>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>          <td width='30' class='remove-td'>            <div class='remove-button'>              <div ng-if='!$last' ng-click='remove(model)'>                <i class='icon-icons_Delete'></i>              </div>            </div>          </td>          <td class='rs-ingredient-container' ng-class='{selected: model.isNotAvailable, leftBorder: $parent.$parent.$parent.ngModel.free != \"none\"  }'>            <div>              <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Ingredient' ng-change='changed(model)' ng-model='model.name' />              <div class='line-number'>                <div class='number'>{{$index + 1}}</div>              </div>              <div class='database-icon'>                <i class='icon-icons_Database'></i>              </div>            </div>            <div class='rs-preparation-time-container'>              <div class='rs-preparation-time-text' ng-class='{\"last-preparation-time\": $last}'>Preparation time </div>              <rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ timeSteps: [1, 1, 1], show24Hours: true }' class='rs-preparation-time'/><rs-time>            </div>            <div ng-if='model.isNotAvailable'>              <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>            </div>          </td>          <td class='rs-prices-container' ng-if='$parent.$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1' ng-class='{selected: model.isNotAvailable}'>            <input currency type='text' ng-model='obj.value' ng-change='changed(model)' ng-repeat='obj in model.extraPrices' />          </td>          <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>            <rs-radio-button  id='rs-ingredient_default_{{$index}}' value='{{model.name.itemId}}_{{$index}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>          </td>          <td class='rs-ingredient-not-available-check' ng-if='!$last'>            <rs-check-box id='rs-ingredient_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>          </td>          <td class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>        <tr ng-if='!$last' style='line-height: 5px;'>          <td colspan='6'>&nbsp;</td>        </tr>        <tr ng-if='$parent.$parent.ngModel.free == \"all\"'>          <td></td>          <td>            <div class='free-selections-number-container'>              <div class = 'free-selections-number-text' >Can order a maximum of </div>              <rs-combo-box class = 'free-selections-number-combo' options='$parent.$parent.$parent.maximum' ng-model='$parent.$parent.$parent.ngModel.allMaxFree'></rs-combo-box>              <div class = 'free-selections-number-text'>modifiers.</div>            </div>          </td>          <td colspan='4'></td>        </tr>      </tbody>    </table>  </rs-multi-line>"
}}).directive("rsExtraPriceEdit",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<tr class='rs-extra-price-edit' ng-class='{lightgray:ngModel.$isNew}'>  <td class='remove-button'>    <div ng-if='!$last' ng-click='$parent.$parent.remove(ngModel)'>      <i class='icon-icons_Delete'></i>    </div>  </td>  <td class='price-text'>Enter price for</td>  <td class='price-field'>    <input digit type='text' ng-model='ngModel.extraNumber' ng-change='changed()' />  </td>  <td class='price-text'>extra options $</td>  <td class='price-field' ng-repeat='obj in ngModel.extraPrices' >    <input currency type='text' ng-model='obj.value' ng-change='changed()' />  </td>  <td class='price-text'>Total</td></tr>"}}).directive("rsMultiExtraPriceEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){var extraPrices=[];if($scope.sizesList.length<=1)extraPrices.push({name:"Default",value:0});else for(var i=0;i<$scope.sizesList.length;i++)extraPrices.push({name:$scope.sizesList[i].name,value:0});return{extraNumber:2,extraPrices:extraPrices}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",sizesList:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts'>  <table class='rs-extra-price-edit-table'>    <tr ng-if='$parent.$parent.ngModel.free == \"custom\"'>      <td></td>      <td colspan='3'><rs-label>Enter maximum number of free modifiers</rs-label></td>      <td colspan='2' class='max-free'><input digit placeholder='-' ng-model='$parent.$parent.$parent.ngModel.customMaxFree'/></td>    </tr>    <tr ng-if='$parent.sizesList.length > 1'>      <td colspan='4'>&nbsp;</td>      <td ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</td>      <td></td>    </tr>    <tr class='rs-extra-price-edit' ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>      <td class='remove-button'>        <div ng-if='!$last' ng-click='remove(model)'>          <i class='icon-icons_Delete'></i>        </div>      </td>      <td class='price-text'>Enter price for</td>      <td class='price-field'>        <input digit type='text' ng-model='model.extraNumber' ng-change='changed(model)' />      </td>      <td class='price-text'>extra options $</td>      <td class='price-field' ng-repeat='obj in model.extraPrices' >        <input currency type='text' ng-model='obj.value' ng-change='changed(model)' />      </td>      <td class='price-text'>Total</td>    </tr>  </table></rs-multi-line>"}}),rockspoonUi.directive("rsIngredientsView",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.nextStep=function(){$scope.currentStep++}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",currentStep:"=",selected:"=",options:"="},template:"<div class='rs-ingredients-view'>  <rs-section>    <div class='rs-next-step'>      <button class='rs-button' ng-click='nextStep()'>Continue <i class='icon-icons_ArrowRight'></i></button>    </div>    <rs-tabs current-step='currentStep' selected='selected'>      <rs-tab title='General Information' step mandatory='true'>         <rs-section>           <rs-title-description ng-model='ngModel' type='House Made Ingredient'></rs-title-description>         </rs-section>      </rs-tab>      <rs-tab title='Recipes' step>        <rs-section title='Coming Soon!'></rs-section>      </rs-tab>      <rs-tab title='Tags' step>        <rs-item-tags ng-model='ngModel' tag-options='options.tagOptions'></rs-item-tags>      </rs-tab>      <rs-tab title='Photos' step>        <rs-item-photos ng-model='ngModel'></rs-item-photos>      </rs-tab>    </rs-tabs>  </rs-section></div>"}}),rockspoonUi.directive("rsInvoiceInfo",function(){return{controller:["$scope",function($scope){$scope.model=_.clone($scope.ngModel),$scope.cancel=function(){$scope.ngModel=_.clone($scope.model)},$scope.list=function(){var cb=function(err,result){err?$scope.ngModel.supplierName="":result&&($scope.ngModel.supplierName=result.name),$scope.$apply()};$scope.listOptions({cb:cb})},$scope.$watch(function(){return $scope.ngModel},function(){$scope.ngModel.totalPrice=$scope.ngModel.bottles*$scope.ngModel.unitPrice},!0)}],replace:!0,require:"ngModel",restrict:"E",scope:{listOptions:"&",ngModel:"=",save:"&"},template:"<div class='rs-invoice-info'><table><tr><td class='rs-date'><rs-label>Date</rs-label></td><td class='rs-supplier'><rs-label>Supplier Name</rs-label></td><td class='rs-invoice'><rs-label>Invoice Number</rs-label></td><td class='rs-small'><rs-label>Bottles</rs-label></td><td class='rs-date'><rs-label>$ Unit Price</rs-label></td><td class='rs-date'><rs-label>$ Total Price</rs-label></td><td class='rs-small'>&nbsp;</td><td class='rs-small'>&nbsp;</td></tr><tr><td><rs-year-date ng-model='ngModel.date' start-date='ngModel.start'></rs-year-date></td><td class='rs-supplier'><button class='rs-button' ng-click='add()'><i class='icon-icons_SaveAsDraft'></i><span ng-if = '!ngModel.supplierName'>&nbsp;Add from supplier list</span><span ng-if = 'ngModel.supplierName'>&nbsp;{{ ngModel.supplierName }}</span></button></td><td><rs-text-edit ng-model='ngModel.invoiceNumber'></rs-text-edit></td><td><rs-text-edit ng-model='ngModel.bottles'></rs-text-edit></td><td><rs-text-edit ng-model='ngModel.unitPrice'></rs-text-edit></td><td><rs-text-edit ng-disabled='true' ng-model='ngModel.totalPrice'></rs-text-edit></td><td><button class='rs-button' ng-click='save()'>&nbsp;Save</button></td><td><button class='rs-button' ng-click='cancel()'>&nbsp;Cancel</button></td></tr></table></div>"}}),rockspoonUi.directive("rsItemGeneralInfo",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-item-general-info'>  <rs-section>    <rs-title-description ng-model='ngModel' type='Item' show-abbreviation='true'></rs-title-description>  </rs-section>  <rs-section title='Available for' mandatory='true' separator='true'>    <rs-check-box-list ng-model='ngModel.availableFor'></rs-check-box-list>  </rs-section>  <rs-section separator='true'>    <rs-check-box id='tax_applicable{{::uid}}' ng-model='ngModel.applyTaxDeliveryTakeout' label='Sales tax applicable when ordered for delivery & takeout'></rs-check-box>  </rs-section>  <rs-section>    <rs-check-box id='item_rateable{{::uid}}' ng-model='ngModel.rateable' label='Rateable by customers'></rs-check-box>  </rs-section>  <rs-section title='Countdown Availability' separator='true'>    <div class='free-selections-container'>      <rs-radio-button class='free-selections' id='rs-skip-countdown' ng-value='false' label=\"Don't Include Countdown\" ng-model='ngModel.includeCountdown'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-include-countdown' ng-value='true' label='Include Countdown' ng-model='ngModel.includeCountdown'></rs-radio-button>      <br style='clear: both;' />    </div>    <div style='width: 33%' ng-if='ngModel.includeCountdown === true'>      <rs-text-edit label='Starting at QTY' label-same-line='true' ng-model='ngModel.countdown' digit></rs-text-edit>    </div>  </rs-section>  <rs-section title='Daily Availability' separator='true'>    <div class='free-selections-container'>      <rs-radio-button class='free-selections' id='rs-item_same-as-menu{{::uid}}' value='same' label='Same as Menu' ng-model='ngModel.availability'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-item_different-than-menu{{::uid}}' value='different' label='Different than Menu' ng-model='ngModel.availability'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-item_not-available{{::uid}}' value='none' label='Item Not Available' ng-model='ngModel.availability'></rs-radio-button>      <br style='clear: both;' />    </div>  </rs-section>  <rs-section title='Available on' ng-if='ngModel.availability == \"different\"'>    <rs-check-box-list ng-model='ngModel.availableOn'></rs-check-box-list>  </rs-section></div>"}}),rockspoonUi.directive("rsItemPhotos",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-item-photos'>  <rs-section>    <rs-photos gallery='ngModel.photos'></rs-photos>  </rs-section></div>"}}),rockspoonUi.directive("rsItemSettings",function(){return{require:"ngModel",restrict:"E",replace:!0,scope:{ngModel:"=",options:"=",sizes:"="},template:"<div class='rs-item-settings'>  <rs-section>    <p>Settings Name</p>    <rs-auto-complete class='auto' ng-model='ngModel.settingsName' src-list='settingsList' icon-class-name='icon-icons_Database' placeholder='Enter settings name.'></rs-auto-complete>    <i class= 'description'>Add a name for these settings in order to use them from another item.</i>  </rs-section>  <rs-section separator='true'>    <rs-size-price show-info='true' ng-model='ngModel.sizePrice'></rs-size-price>  </rs-section>  <rs-section separator='true'>    <rs-cooking-modifiers ng-model='ngModel.cookingModifiers'></rs-cooking-modifiers>  </rs-section>  <rs-section separator='true'>    <rs-ingredient ng-model='ngModel.ingredientModifiers' sizes-list='sizes' item-list='options.ingredients'></rs-ingredient>  </rs-section>  <rs-section separator='true'>    <rs-sides ng-model='ngModel.sides' sizes-list='sizes' item-list='options.sides'></rs-sides>  </rs-section>  <rs-section separator='true'>    <rs-optional-modifiers ng-model='ngModel.modifiersRemove' type='Remove' item-list='options.removeModifiers'></rs-optional-modifiers>  </rs-section>  <rs-section separator='true'>    <rs-extra-modifiers ng-model='ngModel.extras' sizes-list='sizes' item-list='options.extraModifiers'></rs-extra-modifiers>  </rs-section>  <rs-section separator='true'>    <rs-optional-modifiers ng-model='ngModel.modifiersOnTheSide' type='On the Side' item-list='options.sideModifiers'></rs-optional-modifiers>  </rs-section><div>"}}),rockspoonUi.directive("rsItemTags",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",tagOptions:"="},template:"<div class='rs-item-tags'>  <rs-section title='Categories'>    <rs-section title='Cuisine'>      <rs-section title='Suggested by Rockspoon' ng-if='ngModel.cuisines.rockspoon.length > 0'>        <rs-suggested-tags ng-model='ngModel.cuisines.rockspoon' tags-list='tagOptions.cuisines'></rs-suggested-tags>      </rs-section>      <rs-section title='Added by Restaurant'>        <rs-tags ng-model='ngModel.cuisines.restaurant' tags-list='tagOptions.cuisines'></rs-tags>      </rs-section>    </rs-section>    <rs-section title='Diet' separator='true'>      <rs-section title='Suggested by Rockspoon' ng-if='ngModel.diets.rockspoon.length > 0'>        <rs-suggested-tags ng-model='ngModel.diets.rockspoon' tags-list='tagOptions.diets'></rs-suggested-tags>      </rs-section>      <rs-section title='Added by Restaurant'>        <rs-tags ng-model='ngModel.diets.restaurant' tags-list='tagOptions.diets'></rs-tags>      </rs-section>    </rs-section>    <rs-section title='Food Description' separator='true'>      <rs-section>        <rs-tags ng-model='ngModel.foodDesc' tags-list='tagOptions.foodDesc'></rs-tags>      </rs-section>    </rs-section>    <rs-section separator='true'>      <rs-section class='no-padding'>        <rs-allergens-tags ng-model='ngModel.allergens' allergens-list='tagOptions.allergens'></rs-allergens-tags>      </rs-section>    </rs-section>  </rs-section></div>"}}),rockspoonUi.directive("rsItemView",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.nextStep=function(){$scope.currentStep++}}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",currentStep:"=",selected:"=",options:"="},template:"<div class='rs-item-view'>  <rs-section>    <div class='rs-next-step'>      <button class='rs-button' ng-click='nextStep()'>Continue <i class='icon-icons_ArrowRight'></i></button>    </div>    <rs-tabs current-step='currentStep' selected='selected'>      <rs-tab title='General Information' step mandatory='true'>        <rs-item-general-info ng-model='ngModel'></rs-item-general-info>      </rs-tab>      <rs-tab title='Items Settings & Price' step mandatory='true'>        <rs-item-settings ng-model='ngModel' sizes='ngModel.sizePrice.sizes' options='options.itemSettings'></rs-item-settings>      </rs-tab>      <rs-tab title='Printing Settings' step mandatory='true'>        <rs-section title='Work in Progress!'></rs-section>      </rs-tab>      <rs-tab title='Recipes & Nutrition Facts' step>        <rs-section title='Coming Soon!'></rs-section>      </rs-tab>      <rs-tab title='Tags' step>        <rs-item-tags ng-model='ngModel' tag-options='options.tagOptions'></rs-item-tags>      </rs-tab>      <rs-tab title='Photos' step>        <rs-item-photos ng-model='ngModel'></rs-item-photos>      </rs-tab>      <rs-tab title='Shared With' step>        <rs-section title='Coming Soon!'></rs-section>      </rs-tab>    </rs-tabs>  </rs-section></div>"}}),rockspoonUi.directive("rsLabel",["$compile",function($compile){return{link:function($scope,elm,attrs,ctrl,transclude){transclude($scope,function(clone,scope){var html=clone.html();null===html||void 0===html?elm.append($compile("<div class='rs-label'><span><label>{{::label}}</label></span></div>")($scope)):elm.append($compile("<div class='rs-label'><span><label>"+html+"</label></span></div>")(scope.$parent))})},replace:!0,restrict:"E",scope:{label:"@"},template:"<div></div>",transclude:!0}}]),rockspoonUi.directive("rsLink",[function(){return{replace:!0,restrict:"E",scope:{label:"@",action:"&"},template:"<a class='rs-link' ng-click='action()'>{{::label}}</a>"}}]),rockspoonUi.directive("rsMap",["$timeout",function($timeout){return{link:function(scope,elem,attr,ctrl){function clearSelection(){selectedShape&&(selectedShape=null)}function setSelection(shape){map.controls[google.maps.ControlPosition.TOP_CENTER].push(deleteControlDiv),clearSelection(),selectedShape=shape,drawingManager.setDrawingMode(null),drawingManager.setOptions({drawingControl:!1})}function deleteShapeControl(controlDiv){var controlUI=document.createElement("div");controlUI.className=scope.options.deleteControlClassName||"deleteControl",controlUI.title=scope.options.deleteControlTitle||"Delete Drawn Area",controlUI.innerHTML=scope.options.deleteControlText||"Delete Drawn Area",controlDiv.appendChild(controlUI),google.maps.event.addDomListener(controlUI,"click",deleteSelectedShape)}function deleteSelectedShape(){for(;scope.ngModel.length>0;)scope.ngModel.pop();map.controls[google.maps.ControlPosition.TOP_CENTER].clear(),selectedShape&&selectedShape.setMap(null),drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON),drawingManager.setOptions({drawingControl:!0}),$timeout(function(){scope.$apply(function(){ctrl.$setValidity("area",!1)})})}function getPolygonData(e){for(var vertices=e.getPath(),i=0;i<vertices.getLength();++i){var xy=vertices.getAt(i);scope.ngModel.push(xy.lat()),scope.ngModel.push(xy.lng())}var newShape=e;setSelection(newShape),scope.$$phase||scope.$apply(function(){ctrl.$setValidity("area",scope.ngModel.length>0),ctrl.$setViewValue(scope.ngModel)})}scope.ngModel||(scope.ngModel=[]),ctrl.$setValidity("area",scope.ngModel.length>0);var selectedShape=null,mapOptions={zoom:scope.options.mapZoom||12,center:new google.maps.LatLng(scope.options.mapCenter.latitude,scope.options.mapCenter.longitude)},polyOptions={strokeWeight:scope.options.polygonStrokeWeight||1,fillOpacity:scope.options.polygonFillOpacity||.45},map=new google.maps.Map(elem[0].childNodes[0],mapOptions),deleteControlDiv=document.createElement("div");deleteShapeControl(deleteControlDiv,map),deleteControlDiv.index=1;var drawingManager=new google.maps.drawing.DrawingManager({drawingMode:google.maps.drawing.OverlayType.POLYGON,drawingControl:!0,polygonOptions:polyOptions,map:map,drawingControlOptions:{position:google.maps.ControlPosition.TOP_CENTER,drawingModes:[google.maps.drawing.OverlayType.POLYGON]}});if(scope.options.showPin)var marker=new google.maps.Marker({map:map,draggable:!1,position:mapOptions.center,title:scope.options.pinTitle});google.maps.event.addListener(drawingManager,"polygoncomplete",getPolygonData),scope.$watchCollection("ngModel",function(){if(google&&0===scope.ngModel.length&&deleteSelectedShape(),scope.ngModel.length>0&&_.isNull(selectedShape)){for(var polygonCoords=[],i=0;i<scope.ngModel.length;i+=2)polygonCoords.push(new google.maps.LatLng(scope.ngModel[i],scope.ngModel[i+1]));var polygon=new google.maps.Polygon({paths:polygonCoords,strokeWeight:scope.options.polygonStrokeWeight||1,fillOpacity:scope.options.polygonFillOpacity||.45});polygon.setMap(map),setSelection(polygon),drawingManager.setDrawingMode(null),drawingManager.setOptions({drawingControl:!1}),$timeout(function(){scope.$apply(function(){ctrl.$setValidity("area",scope.ngModel.length>0)})})}else drawingManager.setMap(map)}),scope.$watch(function(){return scope.options},function(){mapOptions={zoom:scope.options.mapZoom||12,center:new google.maps.LatLng(scope.options.mapCenter.latitude,scope.options.mapCenter.longitude)},marker.setPosition(mapOptions.center),map.panTo(marker.getPosition())},!0)},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",options:"="},template:"<div class='rs-map'><div class='rs-map-container'></div></div>"}}]),rockspoonUi.directive("rsMenuBar",function(){return{replace:!0,restrict:"E",scope:{title:"@"},template:"<div class='rs-menu-bar'>  <div class='rs-menu-bar-title' ng-bind='title'></div>  <div class='rs-menu-bar-items' ng-transclude></div></div>",transclude:!0}}).directive("rsMenuBarButtons",function(){return{controller:["$scope",function($scope){var self=this;this.resize=function(){$scope.isHorizontal=$(window).width()<=$scope.minWidth},this.onResize=function(){$scope.$apply(function(){self.resize()})}}],link:function(scope,element,attr,ctrl){$(window).resize(ctrl.onResize),scope.$on("$destroy",function(){$(window).off("resize")}),ctrl.resize()},replace:!0,restrict:"E",scope:{title:"@",iconClass:"@",minWidth:"@"},template:"<div>  <div class='rs-menu-bar-buttons' ng-transclude ng-show='!isHorizontal'></div>  <rs-menu-bar-dropdown title='{{title}}' icon-class='{{iconClass}}' ng-show='isHorizontal'>    <ng-transclude></ng-transclude>  </rs-menu-bar-dropdown></div>",transclude:!0}}).directive("rsMenuBarDropdown",function(){return{replace:!0,restrict:"E",scope:{title:"@",iconClass:"@"},template:"<span class='rs-menu-bar-dropdown dropdown' dropdown on-toggle='toggled(open)'>  <a href class='dropdown-toggle' dropdown-toggle>    <span class='{{iconClass}}'></span>    {{title}}    <b class='caret'></b>  </a>  <ul class='dropdown-menu'>    <ng-transclude></ng-transclude>  </ul></span>",transclude:!0}}).directive("rsMenuBarDropdownLink",function(){return{replace:!0,restrict:"E",scope:{iconClass:"@"},template:"<li class='rs-menu-bar-dropdown-link'>  <span class='{{iconClass}}'></span>  <div ng-transclude></div></li>",transclude:!0}}),rockspoonUi.directive("rsMenuForm",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-menu-form'>  <rs-section>    <rs-title-description ng-model='ngModel' type='Menu'></rs-title-description>  </rs-section>  <rs-section  separator='true'>    <rs-check-box-list title='Available for' ng-model='ngModel.availableFor'></rs-check-box-list>  </rs-section>  <rs-section  separator='true'>    <rs-daily-availability label='Availability Period' ng-model='ngModel'></rs-daily-availability>  </rs-section></div>"}}),rockspoonUi.directive("rsMenu",function(){return{controller:["$scope",function($scope){var self=this;this.resize=function(){$scope.isHorizontal=$(window).width()<=$scope.minWidth},this.onResize=function(){$scope.$apply(function(){self.resize()})}}],link:function(scope,element,attr,ctrls){var ctrl=ctrls[1];$(window).resize(ctrl.onResize),scope.$on("$destroy",function(){$(window).off("resize")}),ctrl.resize()},replace:!0,restrict:"E",require:["ngModel","rsMenu"],scope:{currentStep:"=",ngModel:"=",minWidth:"=",controllerWidth:"="},template:"<div class='rs-menu' ng-class='{ \"vertical\": !isHorizontal }'>  <div class='rs-control-vertical' rs-viewport ng-show='!isHorizontal' style='width: {{controllerWidth}}px'>    <rs-menu-control-vertical current-step='currentStep' ng-model='ngModel'></rs-menu-control-vertical>  </div>  <div class='rs-control-horizontal' rs-viewport ng-show='isHorizontal'>    <rs-menu-control-horizontal current-step='currentStep' ng-model='ngModel'></rs-menu-control-horizontal>  </div>  <div class='rs-content' ng-transclude></div></div>",transclude:!0}}).directive("rsMenuControlVertical",["$compile",function($compile){function calculateHeight(idx,models,templates,stopSameLevel){if(null===models||void 0===models||!models.length)return 0;for(var height=stopSameLevel?0:templates[models[idx].level].height,findNextLevel=-1,level=models[idx].level,i=idx+1;i<models.length;++i){var model=models[i];if(stopSameLevel&&model.level<=level)break;-1!==findNextLevel&&model.level>findNextLevel||(height+=templates[model.level].height,findNextLevel=model.isOpen?-1:model.level)}return height}function createRowTemplates($element,models){var templates={};return _.forEach(models,function(model){if(null===templates[model.level]||void 0===templates[model.level]){var template=angular.element("<rs-menu-item-vertical level='"+model.level+"' class='rs-menu-item rs-level"+model.level+"'></rs-menu-item-vertical>");$element.append(template),templates[model.level]={height:template.height(),template:template,cache:[]},template.remove()}}),templates}return{controller:["$scope","$element",function($scope,$element){var self=this,templates=createRowTemplates($element,$scope.ngModel);$element.height(calculateHeight(0,$scope.ngModel,templates,!1)),this.toggle=function(toggledModel){var idx=_.findIndex($scope.ngModel,function(model){return toggledModel===model}),height=calculateHeight(idx,$scope.ngModel,templates,!0);$element.height($element.height()+height*(toggledModel.isOpen?1:-1)),self.update()},this.selected=function(selectedModel){_.forEach($scope.ngModel,function(model){model.selected=!1}),selectedModel.selected=!0},this.update=function(){var port={top:self.viewport.scrollTop(),bottom:self.viewport.scrollTop()+self.viewport.outerHeight()},bounds={top:0,bottom:0};_.forEach($element.children(),function(entry){null!==$(entry).scope&&void 0!==$(entry).scope&&($(entry).is(":visible")&&templates[$(entry).attr("level")].cache.push($(entry)),$(entry).hide())});for(var findNextLevel=-1,i=0;i<$scope.ngModel.length&&!(bounds.top>=2*port.bottom);++i){var model=$scope.ngModel[i],template=templates[model.level];if(!(-1!==findNextLevel&&model.level>findNextLevel)){if(findNextLevel=-1,bounds.bottom+=template.height,!(bounds.top<=port.top&&bounds.bottom<=port.top)){var entry,cache=templates[model.level].cache;if(cache.length)entry=cache[0],cache=templates[model.level].cache=cache.slice(1),entry.scope().ngModel=model,entry.scope().currentStep=$scope.currentStep;else{entry=templates[model.level].template.clone(),entry.hide(),$element.append(entry);var scope=$scope.$new();scope.ngModel=model,scope.currentStep=$scope.currentStep,$compile(entry)(scope,void 0,{transcludeControllers:self})}entry.css({top:bounds.top+"px","z-index":i}),entry.show()}bounds.top=bounds.bottom,model.isOpen||(findNextLevel=model.level)}}},this.onUpdate=function(){$scope.$apply(function(){self.update()})}}],link:function($scope,element,attr,ctrls){var ctrl=ctrls[1];ctrl.viewport=ctrls[0].viewport,ctrl.viewport.css({"overflow-y":"auto",display:"block"}),ctrl.viewport.bind("scroll",ctrl.onUpdate),$(window).resize(ctrl.onUpdate),$scope.$on("$destroy",function(){$(window).off("resize"),ctrl.viewport.unbind("scroll")}),$scope.$watch("currentStep",function(){var old=null,hasMoreSteps=!1;_.forEach($scope.ngModel,function(model){model.selected&&(old=model),model.step===$scope.currentStep?(hasMoreSteps=!0,model.selected=!0):model.selected=!1}),!hasMoreSteps&&old&&(old.selected=!0),_.forEach(element.children(),function(entry){null!==$(entry).scope&&void 0!==$(entry).scope&&$(entry).is(":visible")&&($(entry).scope().currentStep=$scope.currentStep,$scope.currentStep===$(entry).scope().ngModel.step&&$scope.$emit("menu-clicked",$(entry).scope().ngModel.id))})}),ctrl.update()},replace:!0,require:["^rsViewport","rsMenuControlVertical"],restrict:"E",scope:{currentStep:"=",ngModel:"="},template:"<div class='rs-menu-control-vertical'></div>"}}]).directive("rsMenuItemVertical",function(){return{link:function($scope,element,attr,ctrl){$scope.clicked=function(){!_.isUndefined($scope.ngModel.step)&&$scope.currentStep<$scope.ngModel.step||($scope.ngModel.hasSubmenu?($scope.ngModel.isOpen=!$scope.ngModel.isOpen,ctrl.toggle($scope.ngModel)):(ctrl.selected($scope.ngModel),$scope.$emit("menu-clicked",$scope.ngModel.id)))}},replace:!0,require:"^rsMenuControlVertical",restrict:"E",template:"<div ng-click='clicked()' ng-class='{selected:ngModel.selected, disabled:currentStep < ngModel.step}'>  <table>    <tr>      <td class='rs-menu-item-toggle' ng-if='ngModel.hasSubmenu'>        <i ng-class='{\"icon-icons_ArrowDown\":ngModel.isOpen, \"icon-icons_ArrowUp\":!ngModel.isOpen}'></i>      </td>      <td ng-if='ngModel.icon' class='rs-icon'>        <i class='{{ngModel.icon}}'></i>      </td>      <td style='width:30px' ng-if='ngModel.step'>        <div class='rs-step-container'>          <div class='rs-step'>Step</div>          <div style='margin-top:-3px'>{{ngModel.step}}</div>        </div>      </td>      <td>{{ngModel.title}}</td>    </tr>  </table></div>"}}).directive("rsMenuControlHorizontal",function(){return{controller:["$scope",function($scope){$scope.selected=function(selectedItem){_.forEach($scope.ngModel,function(model){model.selected=!1}),selectedItem.selected=!0,$scope.selectedItem=selectedItem},$scope.isOpen=function(selectedModel){_.forEach($scope.ngModel,function(model){model.isOpen=!1}),selectedModel.isOpen=!0,$scope.selectedModel=selectedModel}}],link:function($scope,element){function getNestedChildren(arr,parent){var out=[];for(var i in arr)if(arr[i].isOpen=!1,arr[i].parentId==parent){var children=getNestedChildren(arr,arr[i].id);children.length&&(arr[i].children=children),out.push(arr[i])}return out}var fixModel=function(){$scope.ngModel||($scope.ngModel=[]),$scope.internalModel=getNestedChildren($scope.ngModel)};$scope.$watchCollection("ngModel",function(){fixModel()}),$scope.clicked=function(model){!_.isUndefined(model.step)&&$scope.currentStep<model.step||(model.parentId?($scope.selected(model),$scope.$emit("menu-clicked",model.id)):$scope.isOpen(model))},$scope.$watch("currentStep",function(){var old=null,parent=null,hasMoreSteps=!1;_.forEach($scope.ngModel,function(model){model.parentId||(parent=model),model.selected&&(old=model),model.step===$scope.currentStep?(hasMoreSteps=!0,model.selected=!0,$scope.selectedItem=model):model.selected=!1,_.isUndefined($scope.selectedItem)||$scope.selectedItem.parentId!==parent.id||$scope.clicked(parent)}),!hasMoreSteps&&old&&(old.selected=!0,$scope.selectedItem=old),$scope.$emit("menu-clicked",$scope.selectedItem.id)})},replace:!0,restrict:"E",scope:{currentStep:"=",ngModel:"="},template:"<div class='rs-menu-control-horizontal'>  <div class='rs-menu-parent-items'>    <div sly-repeat='item in internalModel'  ng-click='clicked(item)' ng-class='{isOpen:item.isOpen}'>{{item.title}}</div>  </div>  <div class='rs-menu-child-items' ng-show='selectedModel'>    <div ng-repeat='item in selectedModel.children' ng-click='clicked(item)' ng-class='{selected:item.selected, disabled:currentStep < item.step}'>      <div class='rs-step-container' ng-if='item.step'>        <div class='rs-step'>Step</div>        <div style='margin-top:-3px'>{{item.step}}</div>     </div>     <rs-radio-button class='free-selections' id='rs-menu-item{{::item.id}}' value='{{item.id}}' label='{{item.title}}' ng-model='$parent.selectedItem.id' ng-disabled='currentStep < item.step'></rs-radio-button>    </div>  </div></div>"}}),rockspoonUi.directive("rsMultiLine",["UID","focus",function(UID,focus){return{link:function($scope,elm,attrs,ctrl,transclude){if(!_.isObject($scope.ngOpts))throw new Error("Must pass the ng-opts");if(!_.isFunction($scope.ngOpts.rowFactory))throw new Error("Must pass a row factory in ng-options");$scope.uid=UID.create(),transclude($scope,function(clone,scope){elm.append(clone)});var cloneModel=function(){$scope.ngModel||($scope.ngModel=[]),$scope.internalModel=_.clone($scope.ngModel);var obj=$scope.ngOpts.rowFactory();obj.$isNew=!0,$scope.internalModel.push(obj)};$scope.remove=function(model){_.isFunction($scope.ngOpts.onBeforeRowRemove)?$scope.ngOpts.onBeforeRowRemove(model,$scope):$scope.performRemove(model)},$scope.performRemove=function(model){elm.parent().removeClass("ng-pristine"),_.pull($scope.ngModel,model),_.pull($scope.internalModel,model),_.isFunction($scope.ngOpts.onRowRemoved)&&$scope.ngOpts.onRowRemoved(model),focus($scope.uid),focus($scope.uid+"_last")},$scope.changed=function(model){elm.removeClass("ng-pristine"),_.isUndefined(model.$isNew)?!_.isString($scope.ngOpts.autoDeleteKey)||_.isUndefined(model[$scope.ngOpts.autoDeleteKey])||model[$scope.ngOpts.autoDeleteKey].length||$scope.remove(model):(delete model.$isNew,$scope.ngModel.push(model),cloneModel(),elm.find("#"+$scope.uid+"_last").length&&focus($scope.uid))},$scope.$watchCollection("ngModel",function(){cloneModel()}),$scope.$watch(function(){return $scope.internalModel},function(newM,oldM){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed(newM,oldM)},!0),$scope.sortableOptions={cursor:"move",handle:".handler",stop:function(){$scope.ngModel.length=0;for(var i=0;i<$scope.internalModel.length-1;++i)$scope.ngModel.push($scope.internalModel[i]);_.isFunction($scope.ngOpts.onMove)&&$scope.ngOpts.onMove()},items:"tr:not(.not-sortable)"}},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",ngOpts:"="},template:"<div></div>",transclude:!0}}]),rockspoonUi.directive("rsNavbar",function(){return{replace:!0,restrict:"E",template:"<div class='rs-navbar'>  <div class='rs-navbar-wrapper' ng-transclude></div></div>",transclude:!0}}).directive("rsQuickMenu",function(){return{controller:["$scope",function($scope){this.addLink=function(link){$scope.links.push(link)},$scope.open=!1,$scope.links=[],$scope.toggle=function(){$scope.open=!$scope.open}}],replace:!0,restrict:"E",template:"<div class='rs-navbar-menu' ng-click='toggle()'>  <div class='rs-navbar-menu-icon' ng-class='{ selected : open }'>    <div class='icon-icons_QuickMenu'></div>  </div>  <div class='rs-navbar-menu-bubble' ng-class='{ selected : open }' ng-transclude></div></div>",transclude:!0}}).directive("rsQuickMenuLink",function(){return{link:function($scope,element,attr,rsQuickMenu){rsQuickMenu.addLink($scope)},replace:!0,require:"^rsQuickMenu",restrict:"E",scope:{iconClass:"@",toState:"@"},template:"<div class='rs-navbar-menu-circle' ui-sref='{{toState}}' ui-sref-active='selected'>  <span class='{{iconClass}}'></span>  <div ng-transclude></div><div>",transclude:!0}}).directive("rsNavbarLogo",function(){return{replace:!0,restrict:"E",scope:{logoClass:"@"},template:"<div class='rs-navbar-logo'>  <span class='{{logoClass}}'></span></div>"}}).directive("rsNavbarTitle",function(){return{replace:!0,restrict:"E",scope:{description:"@"},template:"<div class='rs-navbar-title'>  <div>    <ng-transclude></ng-transclude>    <div class='rs-title-description' title='{{description}}'>{{description}}</div>  </div></div>",transclude:!0}}).directive("rsNavbarVenues",function(){
return{controller:["$scope","$rootScope",function($scope,$rootScope){$("#rs-stopclose").on("click",function(e){e.stopPropagation()});var unregClose=$rootScope.$on("closeBalloon",function(){$scope.balloonOpen=!1});$scope.$on("$destroy",unregClose)}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-navbar-dropdown rs-navbar-title' dropdown is-open='balloonOpen'>  <div dropdown-toggle>    <span ng-hide='ngModel.venueId'>      (New Restaurant)    </span>    <span ng-show='ngModel.venueId'>      {{ngModel.brand.name}}    </span>    <div ng-show='ngModel.venueId' class='rs-title-description'>{{ngModel.address.address1}}, {{ngModel.address.city}}, {{ngModel.address.region}} <b class='caret'></b></div>  </div>  <ul class='dropdown-menu'>    <li id='rs-stopclose' ng-transclude>    </li>  </ul></div>",transclude:!0}}).directive("rsNavbarDropdown",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<span class='rs-navbar-dropdown dropdown' dropdown on-toggle='toggled(open)'>  <a href class='dropdown-toggle' dropdown-toggle>    <img class='rs-navbar-avatar' ng-src='{{ngModel.avatar.url}}' ng-if='ngModel.avatar.url' />    <span class='icon-icons_Avatar' ng-if='!ngModel.avatar.url'></span>    {{ngModel.firstName}} {{ngModel.lastName}}    <b class='caret'></b>  </a>  <ul class='dropdown-menu'><ng-transclude></ng-transclude></ul></span>",transclude:!0}}).directive("rsNavbarDropdownLink",function(){return{replace:!0,restrict:"E",scope:{iconClass:"@",thumb:"="},template:"<li class='rs-dropdown-link'>  <img class='rs-navbar-avatar' ng-src='{{thumb}}' ng-if='thumb' />    <span class='{{iconClass}}' ng-if='!thumb'></span>  <div ng-transclude></div></li>",transclude:!0}}),rockspoonUi.directive("rsOnOff",function(){return{link:function($scope){$scope.internalModel=$scope.ngModel?$scope.on:$scope.off,$scope.$watchCollection("internalModel",function(){$scope.ngModel=$scope.internalModel===$scope.on})},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",off:"@",on:"@"},template:"<div class='rs-on-off'>  <div class='btn-group'>    <label class='btn btn-primary' ng-model='internalModel' btn-radio=\"'{{::on}}'\">{{::on}} <i ng-class='{\"icon-icons_Success\":ngModel === true}'></i></label>    <label class='btn btn-primary' ng-model='internalModel' btn-radio=\"'{{::off}}'\">{{::off}} <i ng-class='{\"icon-icons_Success\":ngModel === false}'></i></label>  </div></div>"}}),rockspoonUi.directive("rsSingleOpeningHours",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-opening-hours'>  <div class='day-container'>    <rs-label class='day' label={{::ngModel.day}}></rs-label>    <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.day}}' ng-model='ngModel.closed' label='Closed all day'></rs-check-box>  </div>  <rs-multi-time class='multi' ng-if='!ngModel.closed' ng-model='ngModel.time' ></rs-multi-time>  <hr class='separator'/></div>"}}).directive("rsOpeningHours",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div>  <rs-single-opening-hours ng-repeat='day in ngModel' ng-model=day></rs-single-opening-hours></div>"}}).directive("rsSingleAvailability",function(){return{controller:["$scope","$element","UID",function($scope,$element,UID){$scope.uid=UID.create()}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-opening-hours'>  <div class='day-container'>    <rs-label class='day' label={{::ngModel.day}}></rs-label>    <rs-check-box class='closed' id='{{::uid}}_{{::ngModel.day}}' ng-model='ngModel.unavailable' label='Unavailable'></rs-check-box>  </div>  <rs-multi-time class='multi' ng-if='!ngModel.unavailable' ng-model='ngModel.time' ></rs-multi-time>  <hr class='separator'/></div>"}}).directive("rsAvailabilityPeriod",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-availability'>  <rs-radio-button id='availability_always' value='always' label='Always Available' ng-model='ngModel.availability'></rs-radio-button>  <rs-radio-button id='availability_sometimes' value='sometimes' label='During a period' ng-model='ngModel.availability'></rs-radio-button>  <rs-single-availability  ng-if='ngModel.availability === \"sometimes\"' ng-repeat='day in ngModel.days' ng-model=day></rs-single-availability></div>"}}).directive("rsDailyAvailability",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",label:"@"},template:"<div class='rs-availability'>  <rs-label label={{::label}}></rs-label>  <rs-radio-button id='availability_always' ng-value='true' label='Always Available' ng-model='ngModel.alwaysAvailable'></rs-radio-button>  <rs-radio-button id='availability_sometimes' ng-value='false' label='During a period' ng-model='ngModel.alwaysAvailable'></rs-radio-button>  <rs-single-availability  ng-if='ngModel.alwaysAvailable === false' ng-repeat='day in ngModel.dailyAvailability' ng-model=day></rs-single-availability></div>"}}),rockspoonUi.directive("rsOptionalModifiers",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"=",type:"@"},template:"<div class='rs-optional-modifiers'>  <rs-section title='Modifiers - {{::type}}'>    <rs-label label='Optional'></rs-label>    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-optional-modifiers-title'></rs-text-edit>    <div class='rs-optional-modifiers-container'>      <div> Available Modifiers</div>       <rs-check-box label='Can choose more than 1 modifier' ng-model='ngModel.multiple'></rs-check-box>      <rs-optional-modifiers-text-edit ng-model='ngModel' item-list='itemList'></rs-optional-modifiers-text-edit>    </div>  </rs-section></div>"}}).directive("rsOptionalModifiersTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){return{name:"",time:new Date(0,0,0,0,0,0)}}}}],replace:!1,restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<rs-multi-line ng-model='ngModel.modifiers' ng-opts='opts' class='rs-mods-list'>  <table>    <tbody ui-sortable='sortableOptions' ng-model=internalModel>      <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>        <td width='30' class='remove-td'>          <div class='remove-button'>            <div ng-if='!$last' ng-click='remove(model)'>              <i class='icon-icons_Delete'></i>            </div>          </div>        </td>        <td  class='rs-modifier-container'>          <div>            <input type='text' placeholder='Add Modifier' ng-change='changed(model)' ng-model='model.name' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false'/>            <div class='line-number'>              <div class='number'>{{$index + 1}}</div>            </div>              <div class='database-icon'>                <i class='icon-icons_Database'></i>              </div>          </div>          <div class='rs-preparation-time-container'><span ng-class='{\"last-preparation-time\": $last}'>Preparation time </span><rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ show24Hours: true }' class='rs-preparation-time'/><rs-time></div>        </td>        <td ng-class='{ \"handler-td\" : (!$last && !$parent.$parent.hasDefault) }'>          <div class='drag-handler handler-item' ng-if='!$last'>            <div class='handler'>&nbsp;</div>          </div>        </td>      </tr>    </tbody>  </table></rs-multi-line>"}}),rockspoonUi.directive("rsOrderMethod",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],require:"ngModel",restrict:"E",replace:!0,scope:{ngModel:"="},template:"<div class='rs-order-method'>  <b>Order Method</b> (This is how we will inform you about new orders)  <div class='rs-order-method-radios'>    <rs-radio-button  id='rs-printer-order-{{::uid}}' value='rockPrinter' label='RockPrinter' ng-model='ngModel.orderMethod'></rs-radio-button>    <rs-radio-button  id='rs-fax-order-{{::uid}}' value='fax' label='By Fax' ng-model='ngModel.orderMethod'></rs-radio-button>    <rs-radio-button  id='rs-email-order-{{::uid}}' value='email' label='by Email' ng-model='ngModel.orderMethod'></rs-radio-button>  </div>  <rs-contact-info-validation ng-model='ngModel'>    <rs-order-methods ng-model='ngModel'></rs-order-methods>  </rs-contact-info-validation></div>"}}).directive("rsOrderMethods",function(){return{controller:["$scope",function($scope){$scope.validate=function(type,model){$scope.verify(type,model)}}],link:function(scope,elem,attrs,rsContactInfoValidationCtrl){scope.verify=rsContactInfoValidationCtrl.verify},require:"^rsContactInfoValidation",restrict:"E",replace:!0,scope:{ngModel:"="},template:"<div class='rs-order-methods'>  <div class='rs-method' ng-if='ngModel.orderMethod === \"email\"'>    <rs-text-edit mandatory='true' label='Email' placeholder='Email' ng-model='ngModel.orderEmail' label-same-line='false'></rs-text-edit>    <div class='rs-order-method-validation'>      <button class='rs-button' ng-click='validate(\"email\" , { email: ngModel.orderEmail })' ng-if='!ngModel.validatedEmail && ngModel.orderEmail !== \"\"'>Validate Email</button>      <label ng-if='ngModel.validatedEmail'>Validated</label>    </div>  </div>  <div class='rs-method' ng-if='ngModel.orderMethod === \"fax\"'>    <div class='rs-phone-input' ng-class='{lightgray:ngModel.$isNew}'>      <div style='display:table-row'>        <div class='text-label' style='display:table-cell'>          <label style='text-align:right'>Fax<i class='glyphicon glyphicon-asterisk'></i></label>        </div>      </div>      <div style='display:table-row'>        <div class='text-field' style='width:100%;display:table-cell'>          <input type='tel' id='order-fax-{{::uid}}' rs-intl-phone-number ng-model='ngModel.orderFax' default-country='us' preferred-countries='us'/>        </div>      </div>    </div>    <div class='rs-order-method-validation'>      <button class='rs-button' ng-click='validate(\"fax\", { fax: ngModel.orderFax })' ng-if='!ngModel.validatedFax && ngModel.orderFax !== \"\"'>Validate Fax</button>      <label ng-if='ngModel.validatedFax'>Validated</label>    </div>  </div>  <rs-multi-call-back-phones ng-model='ngModel.callbackPhones' ng-if='ngModel.orderMethod !== \"rockPrinter\"'></rs-multi-call-back-phones></div>"}}).directive("rsMultiCallBackPhones",function(){return{controller:["$scope",function($scope){$scope.validate=function(type,model){$scope.verify(type,model)},$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{isValidated:!1,phone:null}}}}],link:function(scope,elem,attrs,rsContactInfoValidationCtrl){scope.verify=rsContactInfoValidationCtrl.verify},replace:!1,require:"^rsContactInfoValidation",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts'>  <div class='rs-multi-call-back-phones'>    <div ng-repeat='model in internalModel'>      <div class='rs-phone-container'>        <rs-phone-input label='Call Back Phone {{$index+1}}' ng-model='model'></rs-phone-input>      </div>      <div class='remove-button'>        <button ng-if='!$last && !($first && model.isValidated)' ng-click='remove(model)'>          <i class='icon-icons_Delete'></i>        </button>      </div>      <div class='rs-order-method-validation' ng-if='!$last'>        <button class='rs-button' ng-click='$parent.$parent.$parent.validate(\"phone\", model)' ng-show='!model.isValidated'>Validate Phone</button>        <label ng-if='model.isValidated'>Validated</label>      </div>    </div>  </div></rs-multi-line>"}}).directive("rsContactInfoValidation",function(){return{controller:["$scope","$modal",function($scope,$modal){this.verify=function(type,model){var modal=$modal.open({windowClass:"centered-modal",backdrop:"static",resolve:{type:function(){return type},model:function(){return model}},template:"<div class='modal-body'>  <div ng-if='type === \"email\"'>    <p>You will receive an automated email at <a style='font-weight: bold;'>{{model.email}}</a><br />Please enter the PIN from that email in the field below:</p>    <p>      <input type='text' ng-model='validation.pin' placeholder='######' autofocus maxlength='6' size='6' ui-keypress='{ 13:\"submit()\" }' />      <div class='rs-error' ng-show='form.error'>        Invalid Pin      </div>    </p>  </div>  <div ng-if='type === \"fax\"'>    <p>You will receive an automated fax at <a style='font-weight: bold;'>{{model.fax}}</a><br />Please enter the PIN from that fax in the field below:    </p>    <p>      <input type='text' ng-model='validation.pin' placeholder='######' auto-focus='true' maxlength='6' size='6' ui-keypress='{ 13:\"submit()\" }' />      <div class='rs-error' ng-show='form.error'>        Invalid Pin      </div>    </p>  </div>  <div ng-if='type === \"phone\"'>    <p ng-if='pin'>      You will receive an automated phone call at <a style='font-weight: bold;'>{{model.phone}}</a>      <br />Please use the phone touchpad      <br />to enter the following PIN code:      <h2>{{pin}}</h2>    </p>    <div ng-if='error' class='alert alert-danger text-left'>      <i class='glyphicon glyphicon-exclamation-sign'></i>{{ error }}    </div>  </div>  <button ng-click='submit()' ng-hide='form.locked' ng-if='type !== \"phone\"'>    Submit  </button>  <button ng-click='cancel()' ng-hide='form.locked'>    Cancel  </button>  <label ng-show='form.locked' ng-if='type !== \"phone\"'>    Loading...  </label></div>",controller:["$scope","$modalInstance","$timeout","type","model","ValidationService",function($scope,$modalInstance,$timeout,type,model,validation){$scope.type=type,$scope.model=model;var handleError=function(err){$scope.form.locked=!1};switch($scope.form={locked:!1},$scope.validation={pin:""},$scope.$watch("validation.pin",function(){$scope.validation.error=!1,$scope.validation.pin=$scope.validation.pin.replace(/[^0-9]/g,"")}),$scope.type){case"phone":$scope.value=model.phone;var pollValidation=function(){$scope.poll=$timeout(function(){validation.performPhoneValidation($scope.pin,$scope.value).then(function(result){model.isValidated=!0,$modalInstance.close()})["catch"](function(err){pollValidation()})},5e3)};validation.triggerPhoneValidation($scope.value).then(function(result){$scope.pin=result,pollValidation()})["catch"](function(err){$scope.error=err.message,handleError(err)});break;case"email":$scope.value=model.email,validation.triggerEmailValidation(model.email)["catch"](handleError),$scope.submit=function(){$scope.form.locked=!0,validation.performEmailValidation($scope.validation.pin,$scope.value).then(function(){$scope.form.locked=!1,$modalInstance.close("EMAIL_VALIDATED")})["catch"](function(err){$scope.form.locked=!1,"InternalServerError"===err.name||"ForbiddenAccessError"===err.name?handleError(err):$scope.form.error=!0})};break;case"fax":$scope.value=model.fax,validation.triggerFaxValidation(model.fax)["catch"](handleError),$scope.submit=function(){$scope.form.locked=!0,validation.performFaxValidation($scope.validation.pin,$scope.value).then(function(){$scope.form.locked=!1,$modalInstance.close("FAX_VALIDATED")})["catch"](function(err){$scope.form.locked=!1,"InternalServerError"===err.name||"ForbiddenAccessError"===err.name?handleError(err):$scope.form.error=!0})}}$scope.cancel=function(){$scope.poll&&$timeout.cancel($scope.poll),$modalInstance.close()}}]});modal.result.then(function(result){"EMAIL_VALIDATED"===result?$scope.ngModel.validatedEmail=!0:"FAX_VALIDATED"===result&&($scope.ngModel.validatedFax=!0)})}}],scope:{ngModel:"="},require:"ngModel",replace:!0,restrict:"E",transclude:!0,template:"<ng-transclude></ng-transclude>"}}),rockspoonUi.directive("rsParkingAddress",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"=",typeLabel:"@"},template:"<div class='rs-parking-address'><rs-label>{{::label}}</rs-label><div class='address-info'><rs-combo-box class='parking-type' label-same-line='false' label='{{::typeLabel}}' ng-model='ngModel.parkingType' ></rs-combo-box><rs-check-box label='Same as property address' ng-model='samePropertyAddress'></rs-check-box><rs-address ng-model='ngModel'></rs-address></div></div>"}}),rockspoonUi.directive("rsPaymentMethod",function(){return{require:"ngModel",restrict:"E",replace:!0,scope:{ngModel:"=",options:"="},controller:["$scope",function($scope){$scope.$watch(function(){return $scope.ngModel},function(newP,oldP){"weekly"===newP?$scope.description=$scope.options.weekly:"monthly"===newP&&($scope.description=$scope.options.monthly),$scope.enabled=!0})}],template:"<div class='rs-section'>  <p>Payment Method<i> (Select how you would prefer to be paid by RockSpoon)*</i></p>  <div class='rs-payment-radio-container'>    <div class='rs-payment-radio-left'>      <input type='radio' value='weekly' label='Automatic Transfer(once per week)' ng-model='ngModel' />      Automatic transfer (once per week)    </div>    <div class='rs-payment-radio-right'>      <input type='radio' value='monthly' label='Check(once per month)' ng-model='ngModel' />      Check (once per month)    </div>  </div>  <div class='rs-payment-description' ng-show='enabled'>    <p>{{description.title}}</p>    <ul>      <li ng-repeat='option in description.options'>        {{option}}      </li>    </ul>  </div></div>"}}),rockspoonUi.directive("rsPersonInCharge",function(){return{controller:["$scope","$modal","FetchEmployee",function($scope,$modal,fetch){$scope.selectPersonInCharge=function(model){var modal=$modal.open({windowClass:"centered-modal",backdrop:"static",resolve:{model:function(){return model}},template:"<div>  <rs-menu-bar title='Employees'>    <rs-menu-bar-buttons>      <button ng-click='cancel()'>Cancel</button>      <button ng-click='use()'>Use</button>    </rs-menu-bar-buttons>  </rs-menu-bar>  <div style='width:600px; height:400px; border: 1px solid #D3D3D3; padding: 10px; overflow: hidden;'>    <rs-employees-list-view ng-model='list' selected='model'></rs-employees-list-view>  </div></div>",controller:["$scope","$modalInstance","model",function($scope,$modalInstance,model){$scope.model=model,$scope.list=[],fetch.fetchEmployee().then(function(result){$scope.list=result}),$scope.use=function(){$modalInstance.close($scope.model)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]});modal.result.then(function(result){$scope.ngModel=result})}}],restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"="},template:"<div class='rs-person-in-charge'>  <a ng-click='selectPersonInCharge(ngModel)'>    <i class='icon-icons_Database'></i>    <span ng-if='!ngModel.userInfo.firstName'>Click here to access your employee contact list</span>    <span ng-if='ngModel.userInfo.firstName'>{{ngModel.userInfo.firstName}}&nbsp;{{ngModel.userInfo.lastName}}</span>  </a></div>"}}),rockspoonUi.directive("rsIntlPhoneNumber",function(){return{link:function(scope,elm,attr,ctrl){scope.$watchCollection("elm.val()",function(){""!==elm.val()&&elm.intlTelInput("setNumber",elm.val())});var read=function(){return ctrl.$setViewValue(elm.val())},handleArrays=function(value){return"object"==typeof value?value:value.toString().replace(/[ ]/g,"").split(",")},options={autoFormat:!0,autoHideDialCode:!0,defaultCountry:"",nationalMode:!1,numberType:"",onlyCountries:void 0,preferredCountries:["us","gb"],responsiveDropdown:!0,utilsScript:""};return angular.forEach(options,function(value,key){var option;return option=attr[key],angular.isDefined(option)?void("preferredCountries"===key?options.preferredCountries=handleArrays(option):"onlyCountries"===key?options.onlyCountries=handleArrays(option):"boolean"==typeof value?options[key]="true"===option:options[key]=option):void 0}),elm.intlTelInput(options),elm.intlTelInput("loadUtils","/3rdparty/intl-tel-input/lib/libphonenumber/build/utils.js"),ctrl.$parsers.push(function(value){return value?value.replace(/[^\+\d]/g,""):value}),ctrl.$parsers.push(function(value){return value?ctrl.$setValidity("intlPhoneNumber",elm.intlTelInput("isValidNumber")):(value="",delete ctrl.$error.intlPhoneNumber),value}),elm.on("blur keyup change",function(){return scope.$apply(read)}),elm.on("invalidkey",function(){elm.addClass("invalid-flash"),setTimeout(function(){elm.removeClass("invalid-flash")},100)}),elm.on("$destroy",function(){return elm.off("blur keyup change")})},restrict:"A",require:"^ngModel"}}).directive("rsPhoneInput",["UID",function(UID){return{controller:["$scope",function($scope){$scope.uid=UID.create(),$scope.changed=function(){if(_.isFunction($scope.$parent.changed)){var dialCode="+"+$("#phone_"+$scope.uid).intlTelInput("getSelectedCountryData").dialCode;if($scope.ngModel.phone===dialCode||""===$scope.ngModel.phone)return;$scope.$parent.changed($scope.ngModel)}}}],replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",mandatory:"=",ngModel:"="},template:"<div class='rs-phone-input' ng-class='{lightgray:ngModel.$isNew}'>  <div style='display:table-row' ng-if='label'>    <div class='text-label' style='display:table-cell'>      <label style='text-align:right'>{{label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>    </div>  </div>  <div style='display:table-row'>    <div class='text-field' style='width:100%;display:table-cell'>      <input type='tel' id='phone_{{::uid}}' rs-intl-phone-number ng-model='ngModel.phone' default-country='us' preferred-countries='us' ng-change='changed()' />    </div>  </div></div>"}}]).directive("rsPhoneTextEdit",["UID",function(UID){return{controller:["$scope",function($scope){$scope.uid=UID.create(),$scope.changed=function(){if(_.isFunction($scope.$parent.changed)){var dialCode="+"+$("#phone_"+$scope.uid).intlTelInput("getSelectedCountryData").dialCode;if($scope.ngModel.phone===dialCode||""===$scope.ngModel.phone)return;$scope.$parent.changed($scope.ngModel)}},$scope.phoneType=[{label:"Mobile",value:"Mobile"},{label:"Landline",value:"Landline"}]}],link:function(scope,elm,attrs){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation)},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",mandatory:"="},template:"<div class='rs-phone-text-edit' ng-class='{lightgray:ngModel.$isNew}'>  <div class='rs-phone-type'>    <rs-combo-box mandatory='mandatory' ng-model='ngModel.type' options='phoneType'></rs-combo-box>  </div>  <div ng-form='form' class='rs-phone-field'>    <input type='tel' id='phone_{{::uid}}' rs-intl-phone-number ng-model='ngModel.phone' ng-change='changed()' default-country='us' preferred-countries='us'>    <div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'><ng-message when='intlPhoneNumber'>This field is required.</ng-message></div>  </div></div>"}}]).directive("rsMultiPhoneTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{type:"Mobile",phone:null}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-label>{{::label}}</rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'>  <div class='rs-multi-phone-text-edit'>    <div ng-repeat='model in internalModel'>      <div class='remove-button'>        <div ng-if='!$last' ng-click='remove(model)'>          <i class='icon-icons_Delete'></i>        </div>      </div>      <div class='rs-phone-container'>        <rs-phone-text-edit ng-model='model'></rs-phone-text-edit>      </div>    </div>  </div></rs-multi-line>"}}),rockspoonUi.directive("rsPhotos",[function(){return{controller:["$scope","UID",function($scope,UID){$scope.isDescEnabled=!0,$scope.selectedPhotoIds=[],$scope.newPhoto={},$scope.selectPhoto=function(photo,$index){photo.selected?(photo.selected=!1,_.pull($scope.selectedPhotoIds,$index)):(photo.selected=!0,$scope.selectedPhotoIds.push($index))},$scope.toggleDescription=function(){$scope.isDescEnabled=!$scope.isDescEnabled},$scope.deletePhotos=function(){_.pullAt($scope.gallery,$scope.selectedPhotoIds),$scope.selectedPhotoIds=[]},$scope.makeDefault=function(){for(var newDefaultIndex=$scope.selectedPhotoIds[0],i=0;i<$scope.gallery.length;i++)$scope.gallery[i].selected=!1;$scope.gallery.unshift(_.pullAt($scope.gallery,newDefaultIndex)[0]),$scope.selectedPhotoIds=[]}}],link:function(scope){scope.$watch(function(){return scope.newPhoto},function(newP,oldP){newP!==oldP&&scope.gallery.push({buffer:newP})},!0)},replace:!0,restrict:"E",scope:{gallery:"=",descriptionToggle:"="},template:"<div class='rs-photos' ng-model='newPhoto'>  <div class='rs-photos-bar'>    <button class='rs-button' ng-click='toggleDescription()' ng-if='descriptionToggle'>      <span ng-if='isDescEnabled'>Hide Description</span>      <span ng-if='!isDescEnabled'>Show Description</span>    </button>    <button class='rs-button' ng-click='deletePhotos()' ng-disabled='selectedPhotoIds.length === 0'>Delete</button>    <button class='rs-button' ng-click='makeDefault()' ng-disabled='selectedPhotoIds.length !== 1'>Make as Default</button>    <rs-image-picker-generic ng-model='newPhoto'><rs-image-picker ng-model='newPhoto'></rs-image-picker></rs-image-picker-generic>  </div>  <div ng-if='!gallery || gallery.length === 0' class='rs-no-photos'>    No Photos yet, Please add some  </div>  <div class='rs-photos-container' ng-if='gallery && gallery.length > 0'>    <div ng-repeat='photo in gallery track by $index' class='rs-photo' ng-class='{ noDescription : !isDescEnabled }'>      <div class='rs-ribbon' ng-if='$index === 0'>        <span>Default</span>      </div>      <img ng-src='{{photo.url}}' ng-if='photo.buffer == null' ng-class='{ selected: photo.selected }' ng-click='selectPhoto(photo, $index)' />      <img ng-src='{{photo.buffer}}' ng-if='photo.buffer != null' ng-class='{ selected: photo.selected }' ng-click='selectPhoto(photo, $index)' />      <input placeholder='Title' ng-model='photo.title' />      <textarea placeholder='Description' ng-model='photo.description'></textarea>    </div>  </div></div>"}}]),rockspoonUi.directive("rsPinInput",["UID","focus",function(UID,focus){var state={INIT:1,VALIDATING:2,VALIDATED:3,FAILED:4,FAILED_REQUEST:5,REQUESTING_PIN:6};return{controller:["$scope",function($scope){$scope.validate=function(pin){$scope.state=state.VALIDATING,$scope.isDisabled=!0;var validator=function(err,result){if(err){for(var i=0;i<$scope.arr.length;++i)$scope.arr[i]="";$scope.state=state.FAILED,$scope.isDisabled=!1,focus("pin["+$scope.uid+"_0]")}else result&&($scope.state=state.VALIDATED,$scope.isDisabled=!0,$scope.onValidated());$scope.$apply()};$scope.validatePin({pin:pin,cb:validator})},$scope.request=function(){$scope.state=state.REQUESTING_PIN,$scope.isDisabled=!0;var cb=function(err,result){if(err)$scope.state=state.FAILED_REQUEST;else if(result){$scope.state=state.INIT;for(var i=0;i<$scope.arr.length;++i)$scope.arr[i]=""}$scope.isDisabled=!1,$scope.$apply()};$scope.requestPin({cb:cb})}}],link:function($scope){$scope.state=state.INIT,$scope.isDisabled=!1,$scope.pin="",$scope.uid=UID.create();var pLength=parseInt($scope.length,10);$scope.arr=new Array(pLength);for(var i=0;i<$scope.arr.length;++i)$scope.arr[i]="";$scope.request(),$scope.$watch(function(){return $scope.arr},function(){$scope.pin="";for(var i=0;i<$scope.arr.length;++i)$scope.pin+=$scope.arr[i];$scope.pin.length==$scope.length&&$scope.validate($scope.pin)},!0)},replace:!0,restrict:"E",scope:{label:"@",length:"@",onValidated:"&",requestPin:"&",validatePin:"&"},template:"<div class='rs-pin-input'><rs-label>{{::label}}</rs-label><input digit ng-disabled='isDisabled' id='pin[{{uid}}_{{$index}}]' focus-on='pin[{{uid}}_{{$index}}]' ng-class='{ \"rs-error\" : state == 4, \"rs-success\": state == 3 }' sly-repeat='n in arr' placeholder = '#' class='box' rs-focus-next ng-model='arr[$index]' maxlength='1' /><span ng-if='state == 4' class='rs-error'><i class='glyphicon glyphicon-remove' style='margin: 0 5px;'></i>Wrong Pin Code <span class='sep'>&nbsp;</span> <button class='rs-button' ng-click='request()'>Resend a new PIN Code</button></span><span ng-if='state == 3' class='rs-success'><i class='glyphicon glyphicon-ok' style='margin:0 5px;'></i>PIN code validated</span><span ng-if='state == 2'><i class='glyphicon glyphicon-refresh' style='margin:0 5px;'></i>Validating</span><span ng-if='state == 5' class='rs-error'><i class='glyphicon glyphicon-remove' style='margin: 0 5px;'></i> Failed to generate a new PIN <span class='sep'>&nbsp;</span> <button class='rs-button' ng-click='request()'>Resend a new PIN Code</button></span><span ng-if='state == 6'><i class='glyphicon glyphicon-refresh' style='margin:0 5px;'></i>Requesting a PIN</span></div>"}}]),rockspoonUi.directive("rsPrice",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-price'>  <rs-text-edit class='price-input' ng-model='ngModel.price' label='Price $' label-same-line='false' placeholder=0.00 currency></rs-text-edit>  <rs-label class='select-label' label='Select how many items customers can order:'></rs-label>  <div class='items-container'>Enter how many items customers can order in total <input digit ng-model='ngModel.totalItems' type='text' placeholder='0' /></div>  <div class='items-container'>Enter how many items per category customers can  order <input digit ng-model='ngModel.categoryItems' type='text' placeholder='0'/></div></div>"}}),rockspoonUi.directive("rsPrinterForm",function(){return{controller:["$scope","$q","$element","PrinterDataService",function($scope,$q,$element,printerData){function loadPrinterData(){printerData.fetchStationNames().then(function(stations){$scope.stationNames=stations.slice()},function(reason){$scope.stationNames=[],console.log("cannot fetch StationNames: "+reason)}),printerData.fetchLocationNames().then(function(locations){$scope.locationNames=locations.slice()},function(reason){$scope.locationNames=[],console.log("cannot fetch LocationNames: "+reason)}),printerData.fetchPrinterTypes().then(function(types){$scope.printerTypes=types.slice()},function(reason){$scope.printerTypes=[],console.log("cannot fetch PrinterTypes: "+reason)})}$scope.printer={printerStation:void 0,printerLocation:void 0,printerType:void 0,printerName:""},loadPrinterData(),$scope.create=function(){for(var k in $scope.printer)$scope.ngModel[k]=$scope.printer[k];$scope.$emit("printer-created",$scope.printer)},$scope.cancel=function(){$scope.printer.printerStation=void 0,$scope.printer.printerLocation=void 0,$scope.printer.printerType=void 0,$scope.printer.printerName="",$scope.$emit("printer-cancel",$scope.printer)}}],replace:!0,require:["ngModel"],restrict:"E",scope:{ngModel:"="},template:"<div class='rs-printer-form'>  <div class='rs-printer-name'>    <rs-text-edit label='Enter Printer Name' label-same-line='false' ng-model='printer.printerName'></rs-text-edit>  </div>  <div class='rs-printer-type' ng-hide='!printer.printerName'>    <rs-combo-box label='Printer Type' label-same-line='false' ng-model='printer.printerType' options='printerTypes' ng-disabled='!printer.printerName'></rs-combo-box>  </div>  <div class='rs-printer-location' ng-hide='!printer.printerName || !printer.printerType'>    <rs-combo-box label='Select Location Name' label-same-line='false' ng-model='printer.printerLocation' options='locationNames'></rs-combo-box>  </div>  <div class='rs-printer-station' ng-hide='!printer.printerName || !printer.printerType || !printer.printerLocation'>    <rs-combo-box label='Select Station Name' label-same-line='false' ng-model='printer.printerStation' options='stationNames'></rs-combo-box>  </div>  <div class='rs-printer-buttons'>    <button class='rs-button' ng-hide='!printer.printerName || !printer.printerType || !printer.printerLocation || !printer.printerStation' ng-click='create()'>Create</button>    <button class='rs-button' ng-hide='!printer.printerName' ng-click='cancel()'>Cancel</button>  </div></div>"
}}),rockspoonUi.directive("rsPrinterManager",function(){return{controller:["$scope",function($scope){function updateSelectedDevice(){$scope.showManagerBar=$scope.selectedDevices.length>0,$scope.selectedDevices.length>1?($scope.showPrinterData=!1,$scope.printerData=$scope.selectedDevices):($scope.showPrinterData=!0,$scope.printerData=$scope.selectedDevices[0],void 0!==$scope.printerData&&$scope.wifiOptions.forEach(function(wifi){return wifi.name===$scope.printerData.wifi.name?($scope.wifiModel=JSON.parse(JSON.stringify(wifi)),!1):void 0}))}$scope.selectedDevices=[],$scope.showPrinterData=!1,$scope.showManagerBar=!1,$scope.printerData={},$scope.sendSMSPhone={},$scope.wifiModel={};var sorter=function(predicate,reverse){var key=function(x){return x[predicate]};return reverse=reverse?-1:1,function(a,b){return a=key(a),b=key(b),reverse*((a>b)-(b>a))}};$scope.sortBy=function(cb){$scope.ngModel.sort(sorter($scope.tableOptions.predicate,$scope.tableOptions.reverse)),setTimeout(function(){cb()},2e3)},$scope.nextPage=function(cb){setTimeout(function(){cb(!0,!1)},100)},$scope.localCall=function(){var fn=[].shift.apply(arguments);fn=fn&&"[object Function]"==Object.prototype.toString.call(fn)?fn():void 0,void 0!==fn&&fn.apply(this,arguments)},$scope.wifiDiscardChanges=function(){updateSelectedDevice()},$scope.$watchCollection("selectedDevices",updateSelectedDevice)}],replace:!0,require:["ngModel","tableOptions"],restrict:"E",scope:{ngModel:"=",tableOptions:"=",wifiOptions:"=",editName:"&",sendSms:"&",printCode:"&",editPrinter:"&",restartPrinters:"&",deletePrinters:"&",saveWireless:"&"},template:"<div novalidate class='rs-printer-manager'> <div class='holder'>   <div class='content'>     <rs-table options='tableOptions' ng-model='ngModel' style='height:500px;' next-page='nextPage(cb)' sort-by='sortBy(cb)' selected='selectedDevices'>       <rs-table-column model-column='name' header='Printer Name'></rs-table-column>       <rs-table-column model-column='productionarea' header='Production Area Name'>         {{ngModel.productionarea.name}}       </rs-table-column>       <rs-table-column model-column='wifi' width='180' header='Wireless'>         {{ngModel.wifi.name}}          <div style='float: right' ng-show='ngModel.wifi.name!==\"\"'>            <i ng-class='{\"icon-icons_Lock\": ngModel.wifi.security}'></i>            <i ng-class='{\"glyphicon glyphicon-screenshot\": ngModel.wifi.passwordSaved}'></i>            <rs-connectivity-signal ng-model='ngModel.wifi.signal' type='wifi'></rs-connectivity-signal>          </div>       </rs-table-column>       <rs-table-column model-column='celular' width='100' header='Celular'>         {{ngModel.celular.networkType}}         <rs-connectivity-signal ng-show='ngModel.celular.networkType!==\"\"' ng-model='ngModel.celular.signal' type='operator'></rs-connectivity-signal>       </rs-table-column>       <rs-table-column model-column='status' width='120' header='Status'></rs-table-column>     </rs-table>   </div>   <div class='tab-separator'/>   <div ng-if='!showManagerBar' class='manager lightgray'>     Select Printers to: <BR/>     - Change Wi-Fi Network<BR/>     - Edit Details<BR/>     - Delete<BR/>     - Restart Printer<BR/>   </div>   <div ng-if='showManagerBar' class='manager'>     <div ng-if='showPrinterData'>       <div ng-if='!printerData.registered'>         To activate your printer, please turn it on and use the registration code:<BR/><BR/>         Registration Code<BR/>         {{printerData.regCode}}         <BR/>         <BR/>         <table>           <tr>             <td><rs-phone-input label-same-line='false' ng-model='sendSMSPhone' label='Send by SMS'/></td>             <td class='column-space buttontab'><button ng-click='localCall(sendSms, printerData, sendSMSPhone)' class='rs-button'>Send</button></td>           </tr>         </table>         <BR/>         <div style='text-align: center'>           <button ng-click='localCall(printCode, printerData)' class='rs-button'>Print Code</button>         </div>       </div>       <div ng-if='printerData.registered'>         <rs-wifi-select ng-model='wifiModel' table-options='wifiOptions' discard-changes='wifiDiscardChanges()' save-changes='localCall(saveWireless, wifiModel)'></rs-wifi-select>         <hr class='thickseparator'/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>IMEI</td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{printerData.celular.imei}}</td>           </tr>         </table>       </div>       <hr class='thickseparator'/>       <div>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Printer Name</td>             <td class='column-space buttontab'><button ng-click='localCall(editName, printerData)' class='rs-button'>Edit</button></td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{printerData.name}}</td>           </tr>         </table>         <hr class='separator'/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Printer Category</td>             <td class='column-space buttontab'><button ng-click='localCall(editPrinter, printerData)' class='rs-button'>Edit</button></td>           </tr>           <tr>             <td colspan=2 class='fieldgray'>{{printerData.subtype}}</td>           </tr>         </table>         <BR/>         <table>           <tr>             <td class='fieldlabel' style='width: 200px'>Production Area Name</td>           </tr>           <tr>             <td class='fieldgray'>{{printerData.productionarea.name}}</td>           </tr>         </table>         <BR ng-if='printerData.stations.length > 0'/>         <table ng-if='printerData.stations.length > 0'>           <tr>             <td class='fieldlabel' style='width: 200px'>Station Name</td>           </tr>           <tr ng-repeat='model in printerData.stations'>             <td class='fieldgray'>{{model.name}}</td>           </tr>         </table>       </div>       <hr class='thickseparator'/>     </div>     <div style='text-align: center'>       <button ng-click='localCall(restartPrinters, [].concat(printerData))' class='rs-button'>Restart Printer</button><BR/><BR/>       <button ng-click='localCall(deletePrinters, [].concat(printerData))' class='rs-button'>Delete Printer</button>     </div>   </div> </div></div>"}}),rockspoonUi.directive("rsMultiStation",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:""}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-station'>  <rs-section title='Station Name' mandatory='true'>    <rs-multi-line ng-model='ngModel' ng-opts='opts'>      <table class='rs-main-table'>        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>          <td width='30'>            <div class='remove-button'>              <div ng-if='!$last' ng-click='remove(model)'>                <i class='icon-icons_Delete'></i>              </div>            </div>          </td>          <td>            <div class='rs-multi-station-container'>              <input type='text' style='padding-right: 20px' placeholder='Add name' ng-change='changed(model)' ng-model='model.name' />              <div class='line-number'>                <div class='number'>{{$index + 1}}</div>              </div>            </div>          </td>        </tr>      </table>    </rs-multi-line>  </rs-section></div>"}}),rockspoonUi.directive("rsMultiProductionArea",function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:"",stations:[]}}}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-multi-production-area'> <rs-multi-line ng-model='ngModel' ng-opts='opts'>   <rs-section title='Location Name' separator='!$first' mandatory='true' ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>     <table class='rs-main-table'>       <tr ng-class='{lightgray: $last}'>         <td width='30'>           <div class='remove-button'>             <div ng-if='!$last' ng-click='remove(model)' style='margin-right:15px'>               <i class='icon-icons_Delete'></i>             </div>           </div>         </td>         <td>           <div class='rs-multi-production-area-container'>             <input type='text' style='padding-left:3px;padding-right:20px' placeholder='Add name' ng-change='changed(model)' ng-model='model.name' />           </div>         </td>       </tr>       <tr ng-if='!$last'>         <td width='30'>&nbsp;</td>         <td colspan='3'><rs-multi-station ng-model='model.stations'></rs-multi-station></td>       </tr>     </table>   </rs-section> </rs-multi-line></div>"}}),rockspoonUi.directive("rsRadioButton",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id},restrict:"E",replace:!0,require:"ngModel",scope:{label:"@",value:"@",ngModel:"=",ngDisabled:"@"},template:"<div class='rs-radio-button'>  <span>    <input id='rdb[{{::id}}]' type='radio' ng-value='value' ng-model='ngModel' ng-disabled='ngDisabled' />    <label for='rdb[{{::id}}]'>{{::label}}</label>  </span></div>"}}),rockspoonUi.directive("rsReadOnly",function(){return{restrict:"A",link:function(scope,elem,attrs){"true"==attrs.rsReadOnly&&(elem.find("input").attr("readonly",!0),elem.find("textarea").attr("readonly",!0),elem.find("select").attr("disabled",!0))}}}),rockspoonUi.directive("rsSalesInfo",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"=",availableSalesOptions:"=",dinein:"@"},template:"<div class='rs-sales-info'>  <rs-section>    <rs-text-edit label='Sales Tax' label-same-line='true' ng-model='ngModel.salesTax' decimal></rs-text-edit><span>&nbsp;%</span>  </rs-section>  <rs-section separator='true' title='Available Sales Options' mandatory='true'>    <rs-check-box-list ng-model='availableSalesOptions'></rs-check-box-list>  </rs-section>  <rs-section separator='true' ng-if='dinein'>    <rs-label>Dine-in *</rs-label><rs-check-box id='sales_tax{::uid}}' ng-model='ngModel.isMandatoryGratuity' label='Mandatory Gratuity'></rs-check-box>    <div ng-if='ngModel.isMandatoryGratuity' class='rs-gratuity'>      <rs-text-edit ng-model='ngModel.mandatoryGratuityPercentage' label='' decimal></rs-text-edit>      <rs-text-edit ng-model='ngModel.mandatoryGratuityLargerThan' label='% Mandatory Gratuity will be paid for party larger than' label-same-line='true' digit></rs-text-edit>    </div>  </rs-section></div>"}}),rockspoonUi.directive("rsSection",function(){return{replace:!0,restrict:"E",scope:{mandatory:"=",separator:"=",title:"@",subtitle:"@"},template:"<div class='rs-section'>  <hr class='separator' ng-if='separator === true'/>  <div class='title'>    {{::title}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i>    <label ng-if='subtitle' class='subtitle'>{{::subtitle}}</label>   </div>  <div ng-transclude></div></div>",transclude:!0}}),rockspoonUi.directive("rsSides",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id,scope.ngModel.free||(scope.ngModel.free="none"),scope.$watch("ngModel.isOptional",function(){scope.ngModel.isOptional||(scope.ngModel.hasDefault=!1)}),scope.maximum=[{label:"",value:""}];for(var i=0;i<scope.ngModel.sides.length;++i)scope.maximum.push({value:i+1,label:(i+1).toString()});scope.$watch("ngModel.sides.length",function(newLength,oldLength){newLength>oldLength?scope.maximum.push({value:newLength,label:newLength.toString()}):scope.maximum.length>1&&(scope.maximum.pop(),scope.ngModel.allMaxFree>newLength&&(scope.ngModel.allMaxFree=newLength))})},replace:!0,require:"ngModel",restrict:"E",scope:{itemList:"=",sizesList:"=",ngModel:"="},template:"<div class='rs-side'>  <rs-section title='Sides'>    <rs-text-edit placeholder='Enter Title' label='Title' label-same-line='true' ng-model='ngModel.title' class='rs-sides-title'></rs-text-edit>    <rs-on-off on='Optional Sides' off='Mandatory Sides' ng-model='ngModel.isOptional'></rs-on-off>    <rs-label label='Sides for free'></rs-label>    <div class='free-selections-container'>      <rs-radio-button class='free-selections' id='rs-sides_all{{::ngModel.id}}' value='all' label='All'    ng-model='ngModel.free'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-sides_custom{{::ngModel.id}}' value='custom' label='Custom' ng-model='ngModel.free'></rs-radio-button>      <rs-radio-button class='free-selections' id='rs-sides_none{{::ngModel.id}}' value='none' label='None' ng-model='ngModel.free'></rs-radio-button>    </div>    <rs-multi-extra-price-edit ng-if='ngModel.free == \"custom\"' sizes-list='sizesList' ng-model='ngModel.extras'></rs-multi-extra-price-edit>    <rs-check-box class='rs-default-check' id='rs-sides + {{::id}}' label='With Default Option' ng-if='ngModel.isOptional' ng-model='ngModel.hasDefault'></rs-check-box>    <rs-multi-sides ng-model='ngModel.sides' sizes-list='sizesList' default-modifier='ngModel.defaultModifier' has-default='ngModel.hasDefault' item-list='itemList'></rs-multi-sides>  </rs-section></div>"}}).directive("rsMultiSides",function(){return{controller:["$scope","UID",function($scope,UID){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){var tmp=moment(),from=moment.utc([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),to=from.clone(),extraPrices=[];if($scope.sizesList.length<=1)extraPrices.push({name:"Default",value:0});else for(var i=0;i<$scope.sizesList.length;i++)extraPrices.push({name:$scope.sizesList[i].name,value:0});return{isNotAvailable:!1,name:"",preparationTime:new Date(0,0,0,0,0,0),notAvailable:{from:from,to:to},extraNumber:0,extraPrices:extraPrices,$uid:UID.create()}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"=",hasDefault:"=",defaultModifier:"=",sizesList:"="},template:"  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <table>      <thead>        <tr >          <td>&nbsp;</td>          <td>&nbsp;</td>          <td class='rs-add-price-header' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>            <div >Add Price $</div>          </td>          <td ng-if='$parent.hasDefault && internalModel.length > 1'>&nbsp;</td>          <td ng-if='internalModel.length > 1'>Show</td>          <td ng-if='internalModel.length > 1'>Sides</td>          <td>&nbsp;</td>        </tr>        <tr>          <td>&nbsp;</td>          <td>&nbsp;</td>          <td class='rs-prices-header' ng-class='{ borders: $parent.$parent.sizesList.length > 1 }' ng-if='$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1'>            <div ng-repeat='item in $parent.$parent.sizesList'>{{item.name}}</div>            <span  ng-if='$parent.$parent.sizesList.length == 1'>Price</span>          </td>          <td ng-if='$parent.hasDefault && internalModel.length > 1' style='padding:0 5px'>            <span>Default</span>          </td>          <td class='default-header' ng-if='internalModel.length > 1'>            <span>in Menu</span>          </td>          <td class='default-header' ng-if='internalModel.length > 1'>            <span>not available</span>          </td>          <td>&nbsp;</td>        </tr>      </thead>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{lightgray: $last}'>          <td width='30' class='remove-td'>            <div class='remove-button'>              <div ng-if='!$last' ng-click='remove(model)'>                <i class='icon-icons_Delete'></i>              </div>            </div>          </td>          <td class='rs-side-container' ng-class='{selected: model.isNotAvailable, leftBorder: $parent.$parent.$parent.ngModel.free != \"none\"  }'>            <div>              <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Side' ng-change='changed(model)' ng-model='model.name' />              <div class='line-number'>                <div class='number'>{{$index + 1}}</div>              </div>              <div class='database-icon'>                <i class='icon-icons_Database'></i>              </div>            </div>            <div class='rs-preparation-time-container'>              <div class='rs-preparation-time-text' ng-class='{\"last-preparation-time\": $last}'>Preparation time </div>              <rs-time on-change='changed(model)' ng-class='{\"last-preparation-time\": $last}' ng-model='model.time' time-options='{ timeSteps: [1, 1, 1], show24Hours: true }' class='rs-preparation-time'/><rs-time>            </div>            <div ng-if='model.isNotAvailable'>              <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>            </div>          </td>          <td class='rs-prices-container' ng-if='$parent.$parent.$parent.ngModel.free == \"none\" && internalModel.length > 1' ng-class='{selected: model.isNotAvailable}'>            <input currency type='text' ng-model='obj.value' ng-change='changed(model)' ng-repeat='obj in model.extraPrices' />          </td>          <td class='rs-radio-button-container' ng-if='!$last && $parent.$parent.hasDefault'>            <rs-radio-button  id='rs-sides_default_{{$index}}' value='{{model.name.itemId}}_{{$index}}' ng-model='$parent.$parent.$parent.defaultModifier'></rs-radio-button>          </td>          <td class='rs-side-not-available-check' ng-if='!$last'>            <rs-check-box id='rs-sides_{{::model.$uid}}_show' on-change='changed(model)' ng-model='model.showInMenu'></rs-check-box>          </td>          <td class='rs-side-not-available-check' ng-if='!$last'>            <rs-check-box id='rs-sides_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>          </td>          <td class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>            </div>          </td>        </tr>        <tr ng-if='!$last' style='line-height: 5px;'>          <td colspan='6'>&nbsp;</td>        </tr>        <tr ng-if='$parent.$parent.ngModel.free == \"all\"'>          <td></td>          <td>            <div class='free-selections-number-container'>              <div class = 'free-selections-number-text' >Can order a maximum of </div>              <rs-combo-box class = 'free-selections-number-combo' options='$parent.$parent.$parent.maximum' ng-model='$parent.$parent.$parent.ngModel.allMaxFree'></rs-combo-box>              <div class = 'free-selections-number-text'>sides.</div>            </div>          </td>          <td colspan='4'></td>        </tr>      </tbody>    </table>  </rs-multi-line>"}}),rockspoonUi.directive("rsSizePrice",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",showInfo:"="},template:"<div class='rs-size-price'>  <rs-section title='Size & Price'>    <rs-on-off on='Single Size' off='Multiple Sizes' ng-model='ngModel.isSingle'></rs-on-off>    <div class='rs-price-container' ng-class='{\"hide-border\": !showInfo}'>      <div class='rs-price-title' ng-if='showInfo'>Price must be re-entered for the item</div>      <rs-multi-size-price-text-edit ng-model='ngModel.sizes' ng-if='!ngModel.isSingle'></rs-multi-size-price-text-edit>      <table ng-if='ngModel.isSingle'>        <thead>          <tr><td></td><td>Price $</td><td></td></tr>        </thead>        <tbody          <tr>            <td width='30'>              &nbsp;            </td>            <td width='100'>              <input type='text' placeholder='0.00' ng-model='model.price' currency />            </td>            <td>&nbsp;</td>          </tr>        </tbody>      </table>    </div>  </rs-section></div>"}}).directive("rsMultiSizePriceTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{name:""}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts'>  <table>    <thead>      <tr><td></td><td>Size</td><td>Price $</td><td></td></tr>    </thead>    <tbody ui-sortable='sortableOptions' ng-model=internalModel>      <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last}'>        <td width='30'>          <div class='remove-button'>            <button ng-if='!$last' ng-click='remove(model)'>              <i class='icon-icons_Delete'></i>            </button>          </div>        </td>        <td>          <div class='rs-price-text-container' ng-class='{lightgray:model.$isNew}'>            <input type='text' placeholder='Add Size' ng-change='changed(model)' ng-model='model.name' />            <div class='line-number'>              <div class='number'>{{$index + 1}}</div>            </div>          </div>        </td>        <td width='100'>          <input type='text' placeholder='0.00' ng-change='changed(model)' ng-model='model.price' currency ng-class='{lightgray:model.$isNew}' />        </td>        <td>          <div class='drag-handler handler-item' ng-if='!$last'>            <div class='handler'>&nbsp;</div>          </div>        </td>      </tr>    </tbody>  </table></rs-multi-line>"}}),rockspoonUi.directive("rsHttpPrefix",function(){return{link:function(scope,elm,attrs,ctrl){function ensureHttpPrefix(value){return value&&!/^(https?):\/\//i.test(value)&&-1==="http://".indexOf(value)&&-1==="https://".indexOf(value)?(ctrl.$setViewValue("http://"+value),ctrl.$render(),"http://"+value):value}ctrl.$formatters.push(ensureHttpPrefix),ctrl.$parsers.push(ensureHttpPrefix)},require:"ngModel",restrict:"A"}}).directive("rsSocialTextEdit",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)},$scope.socialType=[{label:"Website",value:"Website"},{label:"Facebook",value:"Facebook"},{label:"Twitter",value:"Twitter"}]}],link:function(scope,elm,attrs){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation)},replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",mandatory:"="},template:"<div ng-form='form' class='rs-social-text-edit' ng-class='{lightgray:ngModel.$isNew}'><div class='social-type' style='display:table-cell'><rs-combo-box mandatory='mandatory' ng-model='ngModel.type' options='socialType'></rs-combo-box></div><div class='social-field' style='display:table-cell'><input type='text' ng-required='mandatory' rs-http-prefix placeholder='Add URL' ng-model='ngModel.url' ng-change='changed()'><div ng-if='form.$dirty || showValidationErrors' ng-messages='form.$error' class='rs-validation-error'><ng-message when='required'>This field is required.</ng-message></div></div></div>"}}).directive("rsMultiSocialTextEdit",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{url:null,type:"Website"}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-label label='{{::label}}'></rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'><div class='rs-multi-social-text-edit'><div style='display:table' ng-repeat='model in internalModel'><div class='remove-button'><div ng-if='!$last' ng-click='remove(model)'><i class='icon-icons_Delete'></i></div></div><div style='display:table-cell;width:90%'><rs-social-text-edit ng-model='model'></rs-social-text-edit></div></div></div></rs-multi-line>"}}),rockspoonUi.directive("rsSpinBox",["$compile",function($compile){return{controller:["$scope",function($scope){$scope.incrementNumber=function(){++$scope.ngModel},$scope.decrementNumber=function(){--$scope.ngModel}}],link:function(scope,elm){var d,paddingClass="";(null===scope.ngModel||void 0===scope.ngModel)&&(scope.ngModel=0),null!==scope.label&&void 0!==scope.label&&""!==scope.label&&(paddingClass="label-space"),d=void 0!==scope.labelSameLine&&scope.labelSameLine!==!0?$compile("<div style='display:table-row'><div class='text-label' style='display:table-cell'><label class='"+paddingClass+"' style='text-align:right'>{{::label}}</label></div></div><div style='display:table-row'><div class='text-field' style='width:100%;display:table-cell'><table><tr class='text-center'><td><a ng-click='incrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowUp'></span></a></td></tr><tr class='text-center'><td><input type='text' ng-model='ngModel' class='text-center' ng-readonly='true' maxlength='2' readonly='readonly'></td></tr><tr class='text-center'><td><a ng-click='decrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowDown'></span></a></td></tr></table></div></div>")(scope):$compile("<div class='text-label' style='display:table-cell'><label class='"+paddingClass+"' style='text-align:right'>{{::label}}</label></div><div class='text-field' style='width:100%;display:table-cell'><table><tr class='text-center'><td><a ng-click='incrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowUp'></span></a></td></tr><tr class='text-center'><td><input type='text' ng-model='ngModel' class='text-center' ng-readonly='true' maxlength='2' readonly='readonly'></td></tr><tr class='text-center'><td><a ng-click='decrementNumber()' class='btn btn-link'><span style='font-size:8px' class='icon-icons_ArrowDown'></span></a></td></tr></table></div>")(scope),elm.append(d)},replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",labelSameLine:"=",ngModel:"="},template:"<div class='rs-spin-box'></div>"}}]),rockspoonUi.directive("rsSpinner",function(){return{replace:!0,restrict:"E",template:"<div class='rs-spinner'>  <div></div>  <div></div>  <div></div></div>"}}).directive("rsSpinnerOverlay",function(){return{replace:!0,restrict:"E",template:"<div class='rs-spinner-overlay'>  <div class='overlay'></div>  <div class='content'>    <div class='pos'>      <rs-spinner></rs-spinner>    </div>  </div></div>"}}),rockspoonUi.directive("rsSubcategoryForm",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-subcategory-form'>  <rs-title-description ng-model='ngModel' type='Subcategory'></rs-title-description></div>"}}),rockspoonUi.directive("rsSubstitution",function(){return{link:function(scope,elm,attrs){scope.id=attrs.id},replace:!0,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<div class='rs-substitution'>  <rs-label label='Optional'></rs-label>  <rs-multi-substitution ng-model='ngModel' item-list='itemList'></rs-multi-substitution></div>"}}).directive("rsMultiSubstitution",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){return{name:"",substitutions:[]}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts'>  <table class='rs-main-table'>    <tr ng-repeat-start='model in internalModel' ng-class='{lightgray: $last}'>      <td width='30'>        <div class='remove-button'>          <div ng-if='!$last' ng-click='remove(model)'>            <i class='icon-icons_Delete'></i>          </div>        </div>      </td>      <td>        <div class='rs-substitution-container'>          <input type='text' style='padding-right: 20px' placeholder='Add Item' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' ng-change='changed(model)' ng-model='model.name' />          <div class='line-number'>            <div class='number'>{{$index + 1}}</div>          </div>          <div class='database-icon'>            <i class='icon-icons_Database'></i>          </div>        </div>      </td>      <td class='rs-substitution-not-available-header'><div ng-if='$first'>Substitution not available</div></td>      <td class='rs-handler'>&nbsp;</td>    </tr>    <tr ng-repeat-end ng-if='!$last'>      <td colspan='4'><rs-multi-substitution-choice item-list='ngOpts.itemList' ng-model='model.substitutions'></rs-multi-substitution-choice></td>    </tr>  </table></rs-multi-line>"}}).directive("rsMultiSubstitutionChoice",function(){return{controller:["$scope","UID",function($scope,UID){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={itemList:$scope.itemList,rowFactory:function(){var tmp=moment(),from=moment.utc([tmp.year(),tmp.month(),tmp.date(),tmp.hours(),5*Math.ceil(tmp.minutes()/5)]),to=from.clone();return{isNotAvailable:!1,name:"",preparationTime:new Date(0,0,0,0,0,0),notAvailable:{from:from,to:to},$uid:UID.create()}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{itemList:"=",ngModel:"="},template:"<rs-multi-line class='rs-substitution-choice' ng-model='ngModel' ng-opts='opts'>  <div style='padding-left:30px; width: 100%'>    <table class='rs-substitution-choice-table'>      <tbody ui-sortable='sortableOptions' ng-model=internalModel>        <tr ng-repeat='model in internalModel' ng-class='{\"not-sortable\": $last, lightgray: $last}'>          <td width='30' style='vertical-align:top;' ng-class='{selected: model.isNotAvailable}'>            <div class='remove-button'>              <div ng-if='!$last' ng-click='remove(model)'>                <i class='icon-icons_Delete'></i>              </div>            </div>          </td>          <td width='30' class='rs-with' ng-class='{selected: model.isNotAvailable}' ng-if='$first'>With</td>          <td width='30' class='rs-with' ng-class='{selected: model.isNotAvailable}' ng-if='!$first'>or</td>          <td ng-class='{selected: model.isNotAvailable}'>            <table class='rs-substitution-table' ng-class='{selected: model.isNotAvailable}'>              <tr>                <td colspan='2'>                  <div class='rs-substitution-container'>                    <input type='text' style='padding-right: 20px' typeahead='item as item.name for item in ngOpts.itemList | filter:$viewValue' data-typeahead-editable='false' placeholder='Add Substitute' ng-change='changed(model)' ng-model='model.name' />                    <div class='database-icon substitute'>                      <i class='icon-icons_Database'></i>                    </div>                  </div>                </td>                <td class='rs-substitution-not-available-check'>                  <rs-check-box id='rs-substitution_{{::model.$uid}}' on-change='changed(model)' ng-model='model.isNotAvailable'></rs-check-box>                </td>              </tr>              <tr>                <td align='right'>                  Preparation time                </td>                <td align='right' style='width:100px'>                  <rs-time ng-model='model.preparationTime' on-change='changed(model)' time-options='{ show24Hours: true }'></rs-time>                </td>                <td class='rs-substitution-not-available-check'>                  &nbsp;                </td>              </tr>              <tr ng-if='model.isNotAvailable'>                <td class='not-available' colspan='3' ng-if='model.isNotAvailable'>                  <rs-date-range label-from='From' label-to='To' ng-model='model.notAvailable'></rs-date-range>                </td>              </tr>            </table>          </td>          <td ng-class='{selected: model.isNotAvailable}' class='rs-handler'>            <div class='drag-handler handler-item' ng-if='!$last'>              <div class='handler'>&nbsp;</div>           </div>         </td>        </tr>      </tbody>    </table>  </div></rs-multi-line>"
}}),rockspoonUi.directive("rsTabs",[function(){return{controller:["$scope",function($scope){var tabs=[],self=this;this.showSteps=$scope.showSteps,this.selected=$scope.selected=0,this.addTab=function(tabCtrl){tabs.push(tabCtrl),tabCtrl.added(tabs.length-1,self.barContainer)},this.clicked=function(idx){$scope.selected=idx,$scope.allowBack===!0&&($scope.currentStep=idx+1)},this.notifyClick=function(idx){var forward=self.selected<=idx;_.forEach(tabs,function(tab,i){tab.selected(idx,forward)}),self.selected=idx};var step=1;this.updateStep=function(currentStep){step>currentStep&&($scope.selected=currentStep-1,_.forEach(tabs,function(tab){tab.updateStep(currentStep)}))},this.nextStep=function(){return step++}}],link:function($scope,element,attr,ctrl,transclude){ctrl.barContainer=element.find(".rs-tab-bar"),ctrl.contentContainer=element.find(".rs-content"),transclude($scope.$parent,function(clone){ctrl.contentContainer.append(clone)}),$scope.$watch("selected",function(){ctrl.notifyClick(parseInt($scope.selected)||0)}),$scope.$watch("currentStep",function(){ctrl.updateStep($scope.currentStep)})},replace:!0,require:"rsTabs",restrict:"E",scope:{selected:"=",currentStep:"=",showSteps:"=",allowBack:"="},template:"<div class='rs-tabs'><div class='rs-tab-bar'></div><div class='rs-content'></div></div>",transclude:!0}}]).directive("rsTab",["$compile",function($compile){return{controller:["$scope","$element",function($scope,$element){var self=this,button=angular.element("<div class='rs-tab-button' ng-class='{selected:selected, mandatory : (mandatory === true && currentStep <= step ) }' ng-click='click()'><div class='rs-step' ng-if='step && showStep'>Step {{step}}</div><div ng-if='!step'>&nbsp;</div><div class='title'>{{title}}</div></div>");this.added=function(idx,barContainer){button=$compile(button)($scope),barContainer.append($compile(button)($scope)),self.idx=idx},this.selected=function(idx,forward){forward?$element.addClass("forward"):$element.removeClass("forward"),$scope.selected=idx==self.idx},this.updateStep=function(currentStep){$scope.currentStep=currentStep,!$scope.step||$scope.step<=$scope.currentStep?button.removeClass("disabled"):button.addClass("disabled")}}],link:function($scope,element,attr,ctrls,transclude){var tabsCtrl=ctrls[0],ctrl=ctrls[1];ctrl.scope=$scope,$scope.showStep=tabsCtrl.showSteps,""===attr.step&&($scope.step=tabsCtrl.nextStep()),$scope.click=function(){(null===$scope.step||void 0===$scope.step||$scope.step<=$scope.currentStep)&&tabsCtrl.clicked(ctrl.idx)},tabsCtrl.addTab(ctrl),transclude($scope.$parent,function(clone){element.append(clone)})},replace:!0,require:["^rsTabs","rsTab"],restrict:"E",scope:{mandatory:"=",title:"@"},template:"<div class='rs-tab' ng-hide='!selected'></div>",transclude:!0}}]),rockspoonUi.directive("rsTable",function(){return{controller:["$scope",function($scope){$scope.busy=!1,$scope.columns=[],this.addColumn=function(column){$scope.columns.push(column)},this.loadMore=function(callback){var cb=function(){$scope.busy=!1,$scope.$apply(),callback()};$scope.busy||($scope.busy=!0,$scope.nextPage({cb:cb}))},this.scrollDistance=function(){return $scope.options.scrollDistance?30*$scope.options.scrollDistance:0},$scope.filterSelected=function(){$scope.selected=_.filter($scope.ngModel,function(item){return item.selected===!0}),$scope.selected.length===$scope.ngModel.length&&($scope.selectedAll=!0)},$scope.checkAll=function(){$scope.selectedAll=!$scope.selectedAll,angular.forEach($scope.ngModel,function(item){item.selected=$scope.selectedAll}),$scope.filterSelected()},$scope.sort=function(key){var cb=function(){$scope.busy=!1,$scope.$broadcast("sort")};$scope.busy||($scope.busy=!0,$scope.options.predicate=key,$scope.options.reverse=!$scope.options.reverse,$scope.sortBy({cb:cb}))}}],replace:!0,require:"ngModel",restrict:"E",scope:{nextPage:"&",ngModel:"=",selected:"=",options:"=",sortBy:"&"},template:"<div class='rs-table'><ng-transclude style='display: none;'></ng-transclude><div class='rs-table-container'><div class='rs-loading' ng-show='options.showSpinner && busy'><div class='rs-spinner'><div></div><div></div><div></div></div></div><div class='rs-table-header'>  <div class='rs-table-column' style='width:30px'>    <rs-check-box ng-model='selectedAll' ng-click='checkAll()'></rs-check-box>  </div><div class='rs-table-column' ng-repeat='column in columns' ng-style='{ \"width\" : column.width + \"px\" }' ng-class='{ \"rs-last-column\": $last, \"rs-flex\": !column.width, \"rs-sortable\": column.sortable, \"sort-asc\": options.predicate === column.key && !options.reverse, \"sort-desc\": options.predicate === column.key && options.reverse }'><div ng-if='column.sortable' ng-click='sort(column.key)'>{{::column.title}}</div><div ng-if='!column.sortable'>{{::column.title}}</div></div></div><div class='rs-table-body' rs-viewport><rs-table-control columns='columns' ng-model='ngModel' selected='selected'></rs-table-control></div></div></div>",transclude:!0}}).directive("rsTableControl",["$compile",function($compile){function calculateHeight(models){return null!==models&&void 0!==models&&models.length?30*models.length:0}function createRowTemplate($element){var row={};if(!row.template){var template=angular.element("<rs-table-row></rs-table-row>");$element.append(template),row={height:template.height(),template:template,cache:[]},template.remove()}return row}return{controller:["$scope","$element",function($scope,$element){var self=this;$scope.busy=!1;var parentController,scrollDistance=0;$scope.filterSelected=function(){$scope.$parent.filterSelected()},this.setParent=function(parent){parentController=parent,scrollDistance=parentController.scrollDistance()},this.loadMore=function(){var cb=function(){$element.height(calculateHeight($scope.ngModel))};parentController.loadMore(cb)};var templates=createRowTemplate($element,$scope.ngModel);$element.height(calculateHeight($scope.ngModel)),this.update=function(){var port={top:self.viewport.scrollTop(),bottom:self.viewport.scrollTop()+self.viewport.outerHeight()};port.bottom>=$element.height()-scrollDistance&&this.loadMore();var bounds={top:0,bottom:0};_.forEach($element.children(),function(entry){null!==$(entry).scope&&void 0!==$(entry).scope&&$(entry).is(":visible")&&($(entry).hide(),templates.cache.push($(entry)))});for(var i=0;i<$scope.ngModel.length&&!(bounds.top>=port.bottom);++i){var model=$scope.ngModel[i];if(bounds.bottom+=30,!(bounds.top<=port.top&&bounds.bottom<=port.top)){var entry,cache=templates.cache;if(cache.length)entry=cache.pop(),entry.scope().ngModel=model,entry.scope().columns=$scope.columns;else{entry=templates.template.clone(),$element.append(entry);var scope=$scope.$new();scope.ngModel=model,scope.columns=$scope.columns,$compile(entry)(scope,void 0,{transcludeControllers:self})}entry.css({top:bounds.top+"px"}),entry.show()}bounds.top=bounds.bottom}},this.onUpdate=function(){$scope.$apply(function(){self.update()})}}],link:function($scope,element,attr,ctrls){var ctrl=ctrls[1],parentController=ctrls[2];ctrl.setParent(parentController),ctrl.viewport=ctrls[0].viewport,ctrl.viewport.css({"overflow-y":"auto",display:"block"}),ctrl.viewport.bind("scroll",ctrl.onUpdate),$(window).resize(ctrl.onUpdate),$scope.$on("sort",function(){ctrl.onUpdate()}),$scope.$on("$destroy",function(){$(window).off("resize"),ctrl.viewport.unbind("scroll")}),ctrl.update()},replace:!0,require:["?^rsViewport","rsTableControl","^rsTable"],restrict:"E",scope:{columns:"=",ngModel:"=",selected:"="},template:"<div class='rs-table-control'></div>"}}]).directive("rsTableRow",function(){return{controller:["$scope",function($scope){$scope.onSelect=function(){$scope.ngModel.selected=!$scope.ngModel.selected,$scope.filterSelected()}}],replace:!0,restrict:"E",template:"<div class='rs-table-row' ng-class='{\"rs-selected-table-row\": ngModel.selected}' ng-click='onSelect()'>  <div class='rs-table-column' style='width:30px'>    <rs-check-box ng-model='ngModel.selected'></rs-check-box>  </div>  <div class='rs-table-column test' ng-repeat='column in columns' ng-class='{ \"rs-flex\": !column.width }' ng-style='{ \"width\" : column.width + \"px\" }'>    <span ng-if='!column.template'>{{ngModel[column.key]}}</span>    <div ng-if='column.template' bind-html-compile='column.template'></div>  </div></div>"}}).directive("rsTableColumn",["$sce",function($sce){return{transclude:!0,link:function(scope,element,attrs,rsTable,transclude){var col={};col.key=scope.modelColumn,col.title=scope.header?scope.header:scope.modelColumn.charAt(0).toUpperCase()+scope.modelColumn.slice(1),scope.sortable&&(col.sortable=scope.sortable),scope.width&&(col.width=scope.width),transclude(function(clone,scope){if(clone.length>0){for(var template="",i=0;i<clone.length;++i)clone[i].outerHTML&&(template+=clone[i].outerHTML);col.template=$sce.trustAsHtml(template)}}),rsTable.addColumn(col)},replace:!0,require:"^rsTable",restrict:"E",scope:{header:"@",modelColumn:"@",sortable:"@",width:"@"}}}]),rockspoonUi.directive("rsTags",[function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:""}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",tagsList:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-tags'>  <label class='rs-tag' for='rs-tag-input-{{$index}}' ng-repeat='tag in internalModel'>    <a ng-click='remove(tag)' ng-if='!$last'>      <i class='icon-icons_Delete'></i>    </a>    <input class='rs-tag-input' type='text'            ng-change='changed(tag)' ng-model='tag.name'            placeholder='Add Tag'            typeahead='tag as tag.name for tag in $parent.$parent.tagsList | filter: $viewValue'            name='rs-tag-input-{{$index}}' />  </label></div>"}}]).directive("rsSuggestedTags",[function(){return{controller:["$scope",function($scope){$scope.opts={rowFactory:function(){return{name:""}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{ngModel:"=",tagsList:"="},template:"<rs-multi-line ng-model='ngModel' ng-opts='opts' class='rs-tags'>  <label class='rs-tag' for='rs-tag-input-{{$index}}' ng-repeat='tag in internalModel' ng-if='!$last'>    <a ng-click='remove(tag)' ng-if='!$last'>      <i class='icon-icons_Delete'></i>    </a>    <input class='rs-tag-input' type='text'            ng-change='changed(tag)' ng-model='tag.name'            placeholder='Add Tag'            typeahead='tag as tag.name for tag in $parent.$parent.tagsList | filter: $viewValue'            name='rs-tag-input-{{$index}}' disabled='disabled'/>  </label></div>"}}]),rockspoonUi.directive("rsTakeoutInfo",function(){return{restrict:"E",replace:!0,require:"ngModel",scope:{ngModel:"="},template:"<div class='rs-takeout-info'>  <rs-section title='Takeout'>    <rs-section title='Takeout Time Estimate' mandatory='true'>      <rs-estimated-time type='Takeout' ng-model='ngModel.estimatedTime'></rs-estimated-time>    </rs-section>    <rs-section title='Person in charge Takeout'>      <rs-person-in-charge ng-model='ngModel.personInCharge'></rs-person-in-charge>    </rs-section>  </rs-section></div>"}}),rockspoonUi.directive("rsTempClosure",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-temp-closure'>  <rs-label ng-if='ngModel.tempClosedTime.from == null' label='This restaurant is currently operating under normal scheduled business hours (including holidays)'></rs-label>  <rs-label ng-if='ngModel.tempClosedTime.from == null' class='no-additional-label' label='No additional closures are scheduled'></rs-label>  <rs-date-range temporary-closure='true' label-from='From' label-to='To' ng-model='ngModel.tempClosedTime' label-same-line='true'></rs-date-range>  <rs-label ng-if='ngModel.tempClosedTime.from != null' label='Reason'></rs-label>  <textarea ng-if='ngModel.tempClosedTime.from != null' ng-model='ngModel.reason'></textarea></div>"}}),rockspoonUi.directive("currency",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^((\-|\+)|(\-|\+)?(\d{1,6})(\.\d{0,2})?)$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("digit",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^[\d]*$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("decimal",function(){return{require:"ngModel",link:function(scope,element,attrs,ctrl){var RE=/^[\d]*(\.[\d]*)?$/;ctrl.$parsers.push(function(inputValue){return null===inputValue||""===inputValue||RE.test(inputValue)?inputValue:(ctrl.$setViewValue(ctrl.$modelValue),ctrl.$render(),ctrl.$modelValue)})}}}).directive("rsTextEdit",["$compile",function($compile){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],link:function(scope,elm,attrs){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation);var d,type=null,decimal="",currency="",digit="",paddingClass="",required="";scope.mandatory===!0&&(required="required"),""===attrs.password&&(type="password"),""===attrs.currency&&(currency=" currency "),""===attrs.digit&&(digit=" digit "),""===attrs.decimal&&(digit=" decimal "),null!==scope.label&&void 0!==scope.label&&""!==scope.label&&(paddingClass="label-space"),d=void 0!==scope.labelSameLine&&scope.labelSameLine!==!0?angular.element("<div style='display:table-row' ng-if='label'>  <div class='text-label' style='display:table-cell'>    <label class='"+paddingClass+"' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i></label>  </div></div><div style='display:table-row'>  <div class='text-field' ng-class='{\"text-field-full\": label}' style='width:100%'>    <input name='input_{{::uid}}' type='"+(null===type?"{{inputType}}":type)+"' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='onChange()' "+currency+digit+decimal+required+"/>    <div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>      <ng-message when='required'>This field is required.</ng-message>    </div>  </div></div>"):angular.element("<div class='text-label' style='display:table-cell' ng-if='label'>  <label class='"+paddingClass+"' style='text-align:right'>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i></label></div><div class='text-field' ng-class='{\"text-field-full\": label}' style='width:100%'>  <input name='input_{{::uid}}' type='"+(null===type?"{{inputType}}":type)+"' placeholder='{{::placeholder}}' ng-model='ngModel' ng-change='onChange()' "+currency+digit+decimal+required+"/>  <div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='required'>This field is required.</ng-message>  </div></div>"),elm.append(d),$compile(d)(scope)},replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",labelSameLine:"=",inputType:"@",mandatory:"=",ngModel:"=",onChange:"&",placeholder:"@"},template:"<div ng-form='form' class='rs-text-edit'></div>"}}]).directive("rsTextEditCompare",["$compile",function($compile){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create(),$scope.compareModel=""}],link:function(scope,elm,attrs){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation);var d,decimal="",currency="",digit="",paddingClass="",required="";"true"===attrs.mandatory&&(required="required"),""===attrs.currency&&(currency=" currency "),""===attrs.digit&&(digit=" digit "),""===attrs.decimal&&(digit=" decimal "),null!==scope.label&&void 0!==scope.label&&""!==scope.label&&(paddingClass="label-space"),d=void 0!==scope.labelSameLine&&scope.labelSameLine!==!0?angular.element("<div style='display:table-row'>  <div class='text-label' style='display:table-cell'>    <label class='"+paddingClass+"' style='text-align:right'>{{::label}}      <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'>      </i>    </label>  </div></div><div style='display:table-row'>  <div class='text-field' style='width:100%;display:table-cell'>    <input name='input_{{::uid}}' type='{{inputType}}' placeholder='{{::placeholder}}' ng-pattern='pattern' ng-model='ngModel' ng-model-options='{allowInvalid: true}' ng-change='onChange()' "+currency+digit+decimal+required+"/>    <div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>      <ng-message when='required'>This field is required.</ng-message>      <ng-message when='matchingFields'>Fields do not match.</ng-message>      <ng-message when='pattern'>{{patternMessage}}</ng-message>    </div>  </div></div><div style='display:table-row'>  <div class='text-label' style='display:table-cell'>    <label class='"+paddingClass+"' style='text-align:right'>Confirm {{::label}}      <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'>      </i>    </label>  </div></div><div style='display:table-row'>  <div class='text-field' style='width:100%;display:table-cell'>    <input name='input_compare_{{::uid}}' type='{{inputType}}' placeholder='{{::placeholder}}' ng-pattern='pattern' ng-model='compareModel' ng-model-options='{allowInvalid: true}' compare-to='ngModel' ng-change='onChange()' "+currency+digit+decimal+required+"/>    <div ng-messages='form.input_compare_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>      <ng-message when='required'>This field is required.</ng-message>      <ng-message when='matchingFields'>Fields do not match.</ng-message>      <ng-message when='pattern'>{{patternMessage}}</ng-message>    </div>  </div></div>"):angular.element("<div class='text-label' style='display:table-cell'>  <label class='"+paddingClass+"' style='text-align:right'>{{::label}}    <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i>  </label></div><div class='text-field' style='width:100%;display:table-cell'>  <input name='input_{{::uid}}' type='{{inputType}}' placeholder='{{::placeholder}}' ng-model='ngModel' ng-pattern='pattern' ng-model-options='{allowInvalid: true}' ng-change='onChange()' "+currency+digit+decimal+required+"/>  <div ng-messages='form.input_{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='required'>This field is required.</ng-message>    <ng-message when='matchingFields'>Fields do not match.</ng-message>    <ng-message when='pattern'>{{patternMessage}}</ng-message>  </div></div><div class='text-label' style='display:table-cell'>  <label class='"+paddingClass+"' style='text-align:right'>Confirm {{::label}}    <i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true && label'></i>  </label></div><div class='text-field' style='width:100%;display:table-cell'>  <input name='input_compare{{::uid}}' type='{{inputType}}' placeholder='{{::placeholder}}' ng-model='compareModel' ng-pattern='pattern' ng-model-options='{allowInvalid: true}'compare-to='ngModel' ng-change='onChange()' "+currency+digit+decimal+required+"/>  <div ng-messages='form.input_compare{{::uid}}.$error' ng-if='form.$dirty || showValidationErrors' class='rs-validation-error'>    <ng-message when='required'>This field is required.</ng-message>    <ng-message when='matchingFields'>Fields do not match.</ng-message>    <ng-message when='pattern'>{{patternMessage}}</ng-message>  </div></div>"),elm.append(d),$compile(d)(scope)},replace:!0,require:"ngModel",restrict:"E",scope:{compareModel:"=",inputType:"@",label:"@",labelSameLine:"=",mandatory:"=",ngModel:"=",onChange:"&",pattern:"@",patternMessage:"@",placeholder:"@"},template:"<div ng-form='form' class='rs-text-edit'></div>"}}]).directive("rsTextArea",function(){return{controller:["$scope","UID",function($scope,UID){$scope.uid=UID.create()}],link:function(scope,elm,attrs){function doValidation(){scope.showValidationErrors=!0}scope.$on("kickOffValidations",doValidation)},replace:!0,require:"ngModel",restrict:"E",scope:{label:"@",mandatory:"=",ngModel:"=",onChange:"&",placeholder:"@"},template:"<div ng-form='form' class='rs-text-area'>  <div ng-if='label'>    <div class='text-label'>      <label>{{::label}}<i class='glyphicon glyphicon-asterisk' ng-if='mandatory === true'></i></label>    </div>  </div>  <div>    <textarea name=text_{{::uid}} ng-model='ngModel' ng-required=mandatory ng-change='changed()' placeholder='{{::placeholder}}'></textarea>    <div ng-messages='form.text_{{::uid}}.$error' ng-show='form.text_{{::uid}}.$dirty || showValidationErrors' class='rs-validation-error'>      <ng-message when='required'>This field is required.</ng-message>    </div>  </div></div>"}}),rockspoonUi.directive("rsTime",function(){return{compile:function(){return{pre:function(scope,element,attributes){scope.settings={minuteStep:1,minDate:null,maxDate:null,fixedDay:!0,show24Hours:!1};var timeOptions=scope.$eval(attributes.timeOptions);if(timeOptions)for(var key in timeOptions)scope.settings[key]=timeOptions[key]}}},controller:["$scope",function($scope){(null===$scope.ngModel||void 0===$scope.ngModel)&&($scope.ngModel=new Date),$scope.$watch(function(){return $scope.ngModel},function(){$scope.ngModel&&($scope.internalModel=moment($scope.ngModel).clone().toDate())},!0),$scope.$watch(function(){return $scope.internalModel},function(){$scope.internalModel&&($scope.ngModel=moment($scope.internalModel))},!0)}],require:"ngModel",restrict:"E",scope:{minuteStep:"=",ngModel:"=",onChange:"&"},template:"<div class='rs-time'>  <input type='text' ng-model='internalModel' ps-input-time class='rs-time-input' ng-change='onChange()' time-options='settings' /></div>"}}).directive("rsTimeRange",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)},$scope.options=["Same Day","Next Day"]}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",timeOptions:"="},template:"<div class='rs-time-range'>  <div class='rs-from' ng-class='{lightgray:ngModel.$isNew}'>    <rs-label>From</rs-label>  </div>  <rs-time time-options='timeOptions' ng-model='ngModel.from' ng-class='{lightgray:ngModel.$isNew}' on-change='changed()'></rs-time>  <div class='rs-to' ng-class='{lightgray:ngModel.$isNew}'>    <rs-label>To</rs-label>  </div>  <div class='rs-which-day'>    <rs-combo-box options='options' on-change='changed()' ng-model='ngModel.whichDay' ng-class='{lightgray:ngModel.$isNew}'></rs-combo-box>  </div>  <rs-time time-options='timeOptions' ng-model='ngModel.to' ng-class='{lightgray:ngModel.$isNew}' on-change='changed()'></rs-time></div>"}}).directive("rsMultiTime",function(){var lastHour=moment("1970-01-01T23:59:00.000Z");return{controller:["$scope",function($scope){$scope.changed=function(newD,oldD){for(var i=0;i<newD.length;++i){if((null===newD[i].whichDay||void 0===newD[i].whichDay)&&(newD[i].whichDay=oldD[i].whichDay),newD.length>i+1&&newD[i+1].from.isBefore(newD[i].to)&&(newD[i+1].from=newD[i].to.clone()),"Next Day"===newD[i].whichDay)return(newD[i].to.isAfter(newD[0].from)||newD[i].to.isSame(newD[0].from))&&(newD[i].to=newD[0].from.clone()),newD[i].isFinal=!0,void(i+1<newD.length&&$scope.ngModel.splice(i+1,$scope.ngModel.length-i-1));!newD[i].from.isSame(newD[i].to)&&newD[i].from.isAfter(newD[i].to)&&(newD[i].to=newD[i].from.clone()),newD[i].to.toDate()>=lastHour?newD[i].isFinal=!0:newD[i].isFinal=!1}},$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},_.forEach($scope.ngModel,function(model){model.from.isSame(model.to,"day")?model.whichDay="Same Day":model.whichDay="Next Day"}),$scope.opts={rowFactory:function(){return{from:moment("1970-01-01T09:00:00.000Z"),to:moment("1970-01-01T18:00:00.000Z"),whichDay:"Same Day"}}}}],replace:!0,require:"ngModel",restrict:"E",scope:{id:"@",label:"@",ngDisabled:"=",ngModel:"=",timeOptions:"="},template:"<div class='rs-multi-time'>  <rs-multi-line ng-model='ngModel' ng-opts='opts'>    <div style='display:table; margin-bottom: 5px' ng-repeat='model in internalModel' ng-hide='$last && internalModel[$index - 1].isFinal'>      <div class='remove-button'>        <div ng-if='!$last' ng-click='remove(model)'>          <i class='icon-icons_Delete'></i>        </div>      </div>      <div style='display:table-cell; width:90%; vertical-align: middle'>        <rs-time-range ng-model='model' time-options='$parent.$parent.timeOptions'></rs-time-range>      </div>    </div>  </rs-multi-line></div>"}}),rockspoonUi.directive("rsTitleDescription",function(){return{replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"=",type:"@",showAbbreviation:"@"},template:"<div ng-form='form' novalidate class='rs-title-description'>  <rs-text-edit label='{{type}} Name' placeholder='{{type}} Name' label-same-line='false' mandatory='true' ng-model='ngModel.title'></rs-text-edit>  <rs-text-edit label='Abbreviation' placeholder='Abbreviation' label-same-line='false' mandatory='true' ng-model='ngModel.abbreviation' ng-if='showAbbreviation'></rs-text-edit>  <rs-text-area label='{{type}} Description' placeholder='{{type}} Description' ng-model='ngModel.description'></rs-text-area></div>"}}),rockspoonUi.directive("rsUtensils",function(){return{controller:["$scope",function($scope){$scope.changed=function(){_.isFunction($scope.$parent.changed)&&$scope.$parent.changed($scope.ngModel)},$scope.options=[0,1,2,3,4,5,6,7,8,9,10]}],replace:!0,require:"ngModel",restrict:"E",scope:{ngModel:"="},template:"<div class='rs-utensils' ng-class='{lightgray:ngModel.$isNew}'><table><tr><td><rs-text-edit label='Name' ng-model='ngModel.name' label-same-line='true' on-change='changed()'></rs-text-edit></td><td></td></tr><tr><td><rs-combo-box label='Customer can request up to' ng-model='ngModel.quantity' options='options'></rs-combo-box></td><td><rs-label class='rs-extra-label'>extra items free of charge.</rs-label></td></tr><tr><td><rs-text-edit class='rs-currency' label='Cost of each additional extra item $' ng-model='ngModel.price' label-same-line='true' currency on-change='changed()'></rs-text-edit></td><td></td></tr></div>"}}).directive("rsMultiUtensils",function(){return{controller:["$scope",function($scope){$scope.remove=function(model){_.isFunction($scope.$parent.remove)&&$scope.$parent.remove(model)},$scope.opts={rowFactory:function(){return{name:"",quantity:0,price:0}}}}],replace:!1,require:"ngModel",restrict:"E",scope:{label:"@",ngModel:"="},template:"<rs-label label='{{::label}}'></rs-label><rs-multi-line ng-model='ngModel' ng-opts='opts'><div class='rs-multi-utensils'><div style='display:table' ng-repeat='model in internalModel'><div class='remove-button'><div ng-if='!$last' ng-click='remove(model)'><i class='icon-icons_Delete'></i></div></div><div style='display:table-cell;width:90%'><rs-utensils ng-model='model'></rs-utensils></div></div></div></rs-multi-line>"}}),rockspoonUi.directive("rsVenues",function(){return{controller:["$scope","$rootScope",function($scope,$rootScope){$scope.statuses={PUBLISHED:"enabled",CLOSED:"disabled",ARCHIVED:"deleted"},$scope.menuFilters={all:[$scope.statuses.PUBLISHED,$scope.statuses.CLOSED,$scope.statuses.ARCHIVED],published:[$scope.statuses.PUBLISHED],archived:[$scope.statuses.ARCHIVED],closed:[$scope.statuses.CLOSED]},$scope.menu=$scope.menuFilters.all,$scope.$watchCollection("ngModel",function(){$scope.all=$scope.published=$scope.closed=$scope.archived=0,angular.forEach($scope.ngModel,function(venue){++$scope.all,venue.status===$scope.statuses.PUBLISHED&&++$scope.published,venue.status===$scope.statuses.CLOSED&&++$scope.closed,venue.status===$scope.statuses.ARCHIVED&&++$scope.archived})}),$scope.contains=function(arr,value){return _.contains(arr,value)},$scope.addVenue=function(){$scope.close(),$scope.$parent.addVenue()},$scope.close=function(){$rootScope.$emit("closeBalloon")}}],replace:!0,restrict:"E",scope:{ngModel:"="},template:"<div class='rs-venues'>  <rs-menu-bar title='Menu Bar'>    <rs-menu-bar-buttons>      <button class='rs-button' ng-click='addVenue()'><i class='icon-icons_Add'></i>&nbsp;New Venue</button>    </rs-menu-bar-buttons>  </rs-menu-bar>  <div class='rs-venues-body'>    <div class='rs-venues-filters'>      <a class='button' ng-model='menu' btn-radio='{{menuFilters.all}}'>        All        <span ng-if='all > 0'>          ({{all}})        </span>      </a>      <hr />      <a class='button' ng-model='menu' btn-radio='{{menuFilters.published}}'>        Published        <span ng-if='published > 0'>          ({{published}})        </span>      </a>      <hr />      <a class='button' ng-model='menu' btn-radio='{{menuFilters.closed}}'>        Closed        <span ng-if='closed > 0'>          ({{closed}})        </span>      </a>      <hr />      <a class='button' ng-model='menu' btn-radio='{{menuFilters.archived}}'>        Archived        <span ng-if='archived > 0'>          ({{archived}})        </span>      </a>    </div>    <div class='rs-venues-list'>      <rs-menu-bar title='Select a Restaurant to View'>      </rs-menu-bar>      <div class='line text-center' ng-if='ngModel.length === 0'>        <h4>No restaurants available yet.</h4>      </div>      <div id='restaurant_{{$index}}' ng-repeat='venue in ngModel' class='venues' ng-if='contains(menu, venue.status)'>        <div class='venue' ui-sref='properties.general_info({ venueId: venue.venueId })' ng-click='close()'>          <div class='info'>            <div class='title'>{{venue.brand.name}}</div>            <div>{{venue.address.address1}}, {{venue.address.city}}, {{venue.address.region}}</div>          </div>          <div class='status'>            <div ng-if='venue.status === statuses.PUBLISHED'>Published</div>            <div ng-if='venue.status === statuses.ARCHIVED'>Archived</div>            <div class='highlight' ng-if='venue.status === statuses.CLOSED'>Closed</div>          </div>        </div>      </div>    </div>  </div></div>"}}),rockspoonUi.directive("rsViewport",function(){return{controller:["$element",function($element){this.viewport=$element}]}}),rockspoonUi.directive("rsViews",function(){return{restrict:"E",controller:function(){var registeredViews={};this.$registerView=function(ctrl){registeredViews[ctrl.$name]=ctrl},this.$switchTo=function(viewName){for(var k in registeredViews)k==viewName?registeredViews[k].$show():registeredViews[k].$hide()}},link:function(scope,element,attrs,viewsCtrl){element.on("click","[view-target]",function(){var viewName=angular.element(this).attr("view-target");viewsCtrl.$switchTo(viewName)}),scope.$views=viewsCtrl}}}).directive("rsView",function(){return{restrict:"E",require:["rsView","^rsViews"],controller:function($element,$attrs){this.$name=$attrs.name,this.$show=function(){$element.show()},this.$hide=function(){$element.hide()}},link:function(scope,el,attrs,ctrls){var viewCtrl=ctrls[0],viewsCtrl=ctrls[1];viewsCtrl.$registerView(viewCtrl),void 0!==attrs.initial?viewCtrl.$show():viewCtrl.$hide()}}}),rockspoonUi.directive("rsWifiSelect",function(){return{controller:["$scope",function($scope){$scope.securityTypes=[{value:null,label:"None"},{value:"WEP",label:"WEP"},{value:"WPA",label:"WPA/WPA2"}],$scope.$watch("showPassword",function(){$scope.showPassword?$scope.inputType="text":$scope.inputType="password"}),$scope.localSaveChanges=function(){null===$scope.ngModel.id&&($scope.ngModel.securityType=$scope.securityType.value,$scope.ngModel.security=null!==$scope.ngModel.securityType),$scope.saveChanges()},$scope.inputType="password"}],replace:!0,require:["ngModel","tableOptions"],restrict:"E",scope:{ngModel:"=",tableOptions:"=",saveChanges:"&",discardChanges:"&"},template:"<div novalidate class='rs-wifi-select'> <rs-drop-down drop-options='tableOptions' ng-model='ngModel' title='Wi-Fi' mandatory='true'>   {{ngModel.name}}   <div style='float: right' ng-show='ngModel.id!==null'>     <i ng-class='{\"icon-icons_Lock\": ngModel.security}'></i>     <i ng-class='{\"glyphicon glyphicon-screenshot\": ngModel.passwordSaved}'></i>     <rs-connectivity-signal ng-model='ngModel.signal' type='wifi'></rs-connectivity-signal>   </div> </rs-drop-down> <div ng-show='ngModel.id===null'>   <rs-text-edit mandatory='true' label-same-line='false' ng-model='ngModel.name' label='Network Name'></rs-text-edit>   <rs-drop-down drop-options='securityTypes' ng-model='securityType' title='Security Type' mandatory='true'>     {{ngModel.label}}   </rs-drop-down> </div> <rs-text-edit input-type='{{inputType}}' mandatory='true' label-same-line='false' ng-model='ngModel.password' label='Password'></rs-text-edit> <rs-check-box id='showPassword' ng-model='showPassword' label='Show Password'></rs-check-box> <div style='text-align: center'>   <button ng-click='localSaveChanges()' class='rs-button'>Save Changes</button><BR/><BR/>   <button ng-click='discardChanges()' class='rs-button'>Discard Changes</button> </div></div>"
}}),rockspoonUi.factory("UID",function(){var nextUid=0;return{create:function(){for(var str=nextUid.toString(36);str.length<3;)str="0"+str;return nextUid++,str}}}),angular.module("ps.inputTime",[]).value("psInputTimeConfig",{minuteStep:5,minDate:null,maxDate:null,fixedDay:!0,format:"hh : mm a"}).directive("psInputTime",["$filter","psInputTimeConfig","$parse",function($filter,psInputTimeConfig,$parse){var temp12hr="((0[0-9])|(1[0-2]))[\\s][:][\\s]([0-5][0-9])[\\s][apAP][mM]",temp24hr="([01][0-9]|2[0-3])[\\s][:;][\\s][0-5][0-9]",temp24noColon="(2[0-3]|[01]?[0-9])([0-5][0-9])",timeTest12hr=new RegExp("^"+temp12hr+"$"),timeTest24hr=new RegExp("^"+temp24hr+"$"),timeTest24noColon=new RegExp("^"+temp24noColon+"$");return{restrict:"A",require:"?^ngModel",scope:{timeOptions:"="},link:function(scope,element,attrs,ngModel){function checkMinMaxValid(){null!==minDate&&ngModel.$modelValue<minDate?ngModel.$setValidity("time-min",!1):null!==minDate&&ngModel.$setValidity("time-min",!0),null!==maxDate&&ngModel.$modelValue>maxDate?ngModel.$setValidity("time-max",!1):null!==maxDate&&ngModel.$setValidity("time-max",!0)}function verifyFormat(){return"12hr"==checkTimeFormat(element.val())||"24hr"==checkTimeFormat(element.val())?!0:""===element.val()?(element.val(formatter(getDefaultDate())),ngModel.$setViewValue(getDefaultDate()),setTimeout(function(){selectTime("hour")},0),!0):"invalid"!=checkTimeFormat(element.val())?(element.val(formatter(ngModel.$modelValue)),ngModel.$setViewValue(getDefaultDate()),setTimeout(function(){selectTime("hour")},0),!0):!1}function selectTime(part){"hour"==part?setTimeout(function(){element[0].setSelectionRange(0,2)},0):"minute"==part?setTimeout(function(){element[0].setSelectionRange(5,7)},0):setTimeout(function(){element[0].setSelectionRange(8,10)},0)}function getSelectionPoint(){var pos=element.prop("selectionStart");return element.val().length<1?"hour":4>pos?"hour":8>pos?"minute":11>pos?"meridian":"unknown"}function tabForward(){var cspot=getSelectionPoint();selectTime("hour"==cspot?"minute":"minute"==cspot?"meridian":"hour")}function tabBackward(e){var cspot=getSelectionPoint();"meridian"==cspot?(selectTime("minute"),e.preventDefault()):"minute"==cspot?(selectTime("hour"),e.preventDefault()):selectTime("meridian")}function getDefaultDate(){return null!==minDate?new Date(minDate):null!==maxDate?new Date(maxDate):new Date}function parser(value){return value?angular.isDate(value)?(checkMinMaxValid(),ngModel.$setValidity("time",!0),null!==minDate&&minDate>value&&(value=minDate),null!==maxDate&&value>maxDate&&(value=maxDate),value):(ngModel.$setValidity("time",!1),ngModel.$modelValue):void 0}function formatter(value){return value?$filter("date")(value,timeFormat):void 0}function createDateFromTime(time,cdate){isNaN(cdate)&&(cdate=getDefaultDate());var minutes,hours,sHours,sMinutes,ct=checkTimeFormat(time);if("12hr"==ct)hours=Number(time.match(/^(\d+)/)[1]),minutes=Number(time.match(/:[\s](\d+)/)[1]),AMPM=time.match(/[apAP][mM]/)[0],"PM"==AMPM.toUpperCase()&&12>hours&&(hours+=12),"AM"==AMPM.toUpperCase()&&12==hours&&(hours-=12);else if("24hr"==ct)hours=Number(time.match(/^(\d+)/)[1]),minutes=Number(time.match(/:[\s](\d+)/)[1]);else{if("24nc"!=ct)return"invalid";hours=4==time.length?time.substr(0,2):time.substr(0,1),minutes=time.substr(-2)}return sHours=hours.toString(),sMinutes=minutes.toString(),10>hours&&(sHours="0"+sHours),10>minutes&&(sMinutes="0"+sMinutes),cdate.setHours(sHours,sMinutes),new Date(cdate)}function checkTimeFormat(value){return timeTest12hr.test(value)?"12hr":timeTest24hr.test(value)?"24hr":timeTest24noColon.test(value)?"24nc":"invalid"}function addTime(){var cPoint=getSelectionPoint();"hour"==cPoint?addMinutes(60):"minute"==cPoint?addMinutes(minuteStep):"meridian"==cPoint&&addMinutes((ngModel.$modelValue?ngModel.$modelValue:getDefaultDate()).getHours>12?-720:720),selectTime(cPoint)}function subtractTime(){var cPoint=getSelectionPoint();"hour"==cPoint?addMinutes(-60):"minute"==cPoint?addMinutes(-1):"meridian"==cPoint&&addMinutes((ngModel.$modelValue?ngModel.$modelValue:getDefaultDate()).getHours>12?720:-720),selectTime(cPoint)}function addMinutes(minutes){selected=ngModel.$modelValue?new Date(ngModel.$modelValue):getDefaultDate(),dt=new Date(selected.getTime()+6e4*minutes),(fixedDay===!0||"true"==fixedDay)&&(dt=selected.setHours(dt.getHours(),dt.getMinutes()),dt=new Date(dt)),scope.$apply(function(){ngModel.$setViewValue(dt)}),element.val(formatter(ngModel.$modelValue))}if(ngModel){var minuteStep=scope.timeOptions.minuteStep||psInputTimeConfig.minuteStep,fixedDay=scope.timeOptions.fixedDay||psInputTimeConfig.fixedDay,timeFormat=scope.timeOptions.show24Hours?"HH : mm":"hh : mm a",maxDate=null,minDate=null;(attrs.min||attrs.max)&&(fixedDay=!1),attrs.max&&scope.$parent.$watch($parse(attrs.max),function(value){maxDate=value?new Date(value):null,checkMinMaxValid()}),attrs.min&&scope.$parent.$watch($parse(attrs.min),function(value){minDate=value?new Date(value):null,checkMinMaxValid()});var reservedKey=!1;element.on("keydown",function(e){switch(reservedKey=!1,e.keyCode){case 37:verifyFormat()&&(tabBackward(e),reservedKey=!0);break;case 38:verifyFormat()&&(addTime(),reservedKey=!0);break;case 39:verifyFormat()&&(tabForward(e),reservedKey=!0);break;case 40:verifyFormat()&&(subtractTime(),reservedKey=!0);break;case 9:verifyFormat()&&(e.shiftKey?"hour"!=getSelectionPoint()&&(reservedKey=!0,tabBackward(e)):"meridian"!=getSelectionPoint()&&(reservedKey=!0,tabForward(e)));break;case 65:e.preventDefault();break;case 8:e.preventDefault();break;default:"hour"==getSelectionPoint()&&e.keyCode>31&&(e.keyCode<48||e.keyCode>57)?e.preventDefault():"minute"==getSelectionPoint()&&e.keyCode>31&&(e.keyCode<48||e.keyCode>57)?e.preventDefault():"meridian"==getSelectionPoint()&&e.preventDefault()}reservedKey&&e.preventDefault()}).on("keyup blur",function(){"invalid"==checkTimeFormat(element.val())||reservedKey||scope.$apply(function(){ngModel.$setViewValue(createDateFromTime(element.val(),ngModel.$modelValue)),tabForward()})}).on("click",function(){selectTime(getSelectionPoint())}),ngModel.$parsers.push(parser),ngModel.$formatters.push(formatter)}}}}]),angular.module("sly",["slyEvaluate","slyRepeat"]),defineScalyrAngularModule("slyEvaluate",["gatedScope"]).directive("slyEvaluateOnlyWhen",["$parse",function($parse){return{scope:!0,restrict:"A",compile:function(tElement,tAttrs){return{pre:function(scope,element,attrs){var previousValue=null,initialized=!1,expressionToCheck=$parse(attrs.slyEvaluateOnlyWhen),alwaysEvaluateString=null;if(hasProperty(attrs,"slyAlwaysEvaluate")&&(alwaysEvaluateString=attrs.slyAlwaysEvaluate,isStringEmpty(alwaysEvaluateString)))throw new Exception("Empty string is illegal for value of slyAlwaysEvaluate");scope.$addWatcherGate(function(){var currentValue=expressionToCheck(scope);if(!initialized)return initialized=!0,previousValue=currentValue,!0;var result=previousValue!==currentValue;return previousValue=currentValue,result},function(watchExpression){return isNull(alwaysEvaluateString)||!(isStringNonempty(watchExpression)&&watchExpression.indexOf(alwaysEvaluateString)>=0)},!0)}}}}}]).directive("slyAlwaysEvaluate",function(){return{restrict:"A",link:function(scope,element,attrs){}}}).directive("slyShow",["$animate",function($animate){function toBoolean(value){if(value&&0!==value.length){var v=""+value;v=isString(v)?v.toLowerCase():v,value=!("f"==v||"0"==v||"false"==v||"no"==v||"n"==v||"[]"==v)}else value=!1;return value}return{restrict:"A",link:function(scope,element,attr){scope.$watch(attr.slyShow,function(value){$animate[toBoolean(value)?"removeClass":"addClass"](element,"ng-hide")},!1,"slyShow")}}}]).directive("slyPreventEvaluationWhenHidden",function(){return{restrict:"A",scope:!0,compile:function(tElement,tAttrs){return{pre:function(scope,element,attrs){scope.$addWatcherGate(function(){return!element.hasClass("ng-hide")},function(watchExpression,listener,equality,directiveName){return isDefined(directiveName)&&"slyShow"==directiveName?!1:!0})}}}}}),defineScalyrAngularModule("slyRepeat",["gatedScope"]).directive("slyRepeat",["$animate","$parse",function($animate,$parse){function gateWatchersForScope(elementScope){elementScope.scope.$addWatcherGate(function(){return elementScope.isActiveForRepeat})}return{restrict:"A",scope:!0,transclude:"element",priority:1e3,terminal:!0,compile:function(element,attr,linker){return function($scope,$element,$attr){var expression=$attr.slyRepeat,match=expression.match(/^\s*(.+)\s+in\s+(.*?)$/);if(!match)throw Error("Expected slyRepeat in form of '_item_ in _collection_' but got '"+expression+"'.");var iterVar=match[1],collectionExpr=match[2];if(match=iterVar.match(/^(?:([\$\w]+))$/),!match)throw Error("'item' in 'item in collection' should be identifier but got '"+lhs+"'.");var previousElements=[],previousElementBuffer=[],deregisterCallback=$scope.$watchCollection(collectionExpr,function(collection){if(collection){if(!isArray(collection))throw Error("'collection' did not evaluate to an array.  expression was "+collectionExpr);var originalPreviousElementsLength=previousElements.length;if(previousElements.length<collection.length&&previousElementBuffer.length>0){var limit=previousElements.length+previousElementBuffer.length;limit>collection.length&&(limit=collection.length),previousElements=previousElements.concat(previousElementBuffer.splice(0,limit-previousElements.length))}var currentElements=null,currentElementBuffer=[],newElements=[];if(collection.length>previousElements.length){for(var i=previousElements.length;i<collection.length;++i){var newElement={scope:$scope.$new(),isActiveForRepeat:!0};gateWatchersForScope(newElement),newElement.scope.$index=i,newElement.scope.$first=0==i,newElements.push(newElement)}currentElements=previousElements.concat(newElements),currentElementBuffer=previousElementBuffer}else if(collection.length<previousElements.length){for(var i=collection.length;i<previousElements.length;++i)previousElements[i].isActiveForRepeat=!1;currentElementBuffer=previousElements.splice(collection.length,previousElements.length-collection.length).concat(previousElementBuffer),currentElements=previousElements}else currentElements=previousElements,currentElementBuffer=previousElementBuffer;if(currentElements.length>0){var firstIndexToFix=currentElements.length-1,lastIndexToFix=currentElements.length-1;originalPreviousElementsLength<currentElements.length&&(firstIndexToFix=originalPreviousElementsLength),firstIndexToFix>0&&(firstIndexToFix-=1);for(var i=firstIndexToFix;lastIndexToFix>=i;++i)currentElements[i].scope.$last=i==currentElements.length-1,currentElements[i].scope.$middle=0!=i&&i!=currentElements.length-1,currentElements[i].isActiveForRepeat||(currentElements[i].isActiveForRepeat=!0,currentElements[i].element.css("display",""))}for(var i=0;i<currentElementBuffer.length&&!currentElementBuffer[i].isActiveForRepeat;++i)currentElementBuffer[i].element.css("display","none");for(var i=0;i<currentElements.length;++i)currentElements[i].scope[iterVar]=collection[i];var prevElement=$element;previousElements.length>0&&(prevElement=previousElements[previousElements.length-1].element);for(var i=0;i<newElements.length;++i)linker(newElements[i].scope,function(clone){$animate.enter(clone,null,prevElement),prevElement=clone,newElements[i].element=clone});previousElements=currentElements,previousElementBuffer=currentElementBuffer}});$scope.$on("$destroy",function(){deregisterCallback()})}}}}]),defineScalyrAngularModule("gatedScope",[]).config(["$provide",function($provide){$provide.decorator("$rootScope",["$delegate","$exceptionHandler",function($rootScope,$exceptionHandler){var scopePrototype={};for(var key in $rootScope)isFunction($rootScope[key])&&(scopePrototype[key]=$rootScope[key]);var initWatchVal,Scope=$rootScope.constructor,methodsToAdd={};return methodsToAdd.$new=function(isolate){var result=scopePrototype.$new.call(this,isolate);return result.$$gatingFunction=this.$$gatingFunction,result.$$parentGatingFunction=this.$$gatingFunction,result.$$shouldGateFunction=this.$$shouldGateFunction,result.$$gatedWatchers=[],result.$$cleanUpQueue=this.$$cleanUpQueue,result},methodsToAdd.$digestGated=function(targetGatingFunction){var watch,value,watchers,length,next,last,current=this,target=this,dirty=!1;do{if(watchers=current.$$gatedWatchers)for(length=watchers.length;length--;)try{if(watch=watchers[length],watch.gatingFunction!==targetGatingFunction)continue;watch&&!isNull(watch.cleanUp)&&(watch.cleanUp(),watch.cleanUp=null),watch&&(value=watch.get(current))!==(last=watch.last)&&!(watch.eq?areEqual(value,last):"number"==typeof value&&"number"==typeof last&&isNaN(value)&&isNaN(last))&&(dirty=!0,watch.last=watch.eq?copy(value):value,watch.fn(value,last===initWatchVal?value:last,current))}catch(e){$exceptionHandler(e)}if(!(next=current.$$gatingFunction===targetGatingFunction&&current.$$childHead||current!==target&&current.$$nextSibling))for(;current!==target&&!(next=current.$$nextSibling);)current=current.$parent}while(current=next);return targetGatingFunction.hasDigested=!0,dirty},methodsToAdd.$watch=function(watchExpression,listener,objectEquality,directiveName){if(isNull(this.$$gatingFunction)||!isNull(this.$$shouldGateFunction)&&!this.$$shouldGateFunction(watchExpression,listener,objectEquality,directiveName))return scopePrototype.$watch.call(this,watchExpression,listener,objectEquality);var tmp=this.$$watchers;this.$$watchers=this.$$gatedWatchers;var result=scopePrototype.$watch.call(this,watchExpression,listener,objectEquality);this.$$watchers=tmp,this.$$gatedWatchers[0].gatingFunction=this.$$gatingFunction,this.$$gatedWatchers[0].cleanUp=null,initWatchVal=this.$$gatedWatchers[0].last;var watch=this.$$gatedWatchers[0];if(this.$$gatingFunction.shouldEvalNewWatchers&&this.$$gatingFunction.hasDigested){var self=this;watch.cleanUp=scopePrototype.$watch.call(self,function(){isNull(watch.cleanUp)||(self.$$cleanUpQueue.unshift(watch.cleanUp),watch.cleanUp=null);var value,last=initWatchVal;return watch&&(value=watch.get(self))!==(last=watch.last)&&!(watch.eq?areEqual(value,last):"number"==typeof value&&"number"==typeof last&&isNaN(value)&&isNaN(last))&&(watch.last=watch.eq?copy(value):value,watch.fn(value,last===initWatchVal?value:last,self)),watch.last})}return result},methodsToAdd.$digest=function(){var dirty=!1;if(!isNull(this.$$parentGatingFunction)&&this.$$parentGatingFunction()){var ttl=5;do if(dirty=this.$digestGated(this.$$parentGatingFunction),ttl--,dirty&&!ttl--)throw Error(TTL+" $digest() iterations reached for gated watcher. Aborting!\nWatchers fired in the last 5 iterations.");while(dirty)}dirty=scopePrototype.$digest.call(this)||dirty;for(var cleanUpQueue=this.$$cleanUpQueue;cleanUpQueue.length;)try{cleanUpQueue.shift()()}catch(e){$exceptionHandler(e)}return dirty},methodsToAdd.$addWatcherGate=function(gatingFunction,shouldGateFunction,shouldEvalNewWatchers){var changeCount=0,self=this,hasNestedGates=!isNull(this.$$gatingFunction);!function(){var promotedWatcher=null;self.$watch(function(){return gatingFunction()?self.$digestGated(gatingFunction)&&++changeCount:hasNestedGates&&isNull(promotedWatcher)&&(promotedWatcher=scopePrototype.$watch.call(self,function(){return gatingFunction()&&(promotedWatcher(),promotedWatcher=null,self.$digestGated(gatingFunction)&&++changeCount),changeCount})),changeCount})}(),isUndefined(shouldGateFunction)&&(shouldGateFunction=null),isUndefined(shouldEvalNewWatchers)&&(shouldEvalNewWatchers=!1),this.$$gatingFunction=gatingFunction,this.$$gatingFunction.shouldEvalNewWatchers=shouldEvalNewWatchers,this.$$shouldGateFunction=shouldGateFunction},angular.extend(Scope.prototype,methodsToAdd),angular.extend($rootScope,methodsToAdd),$rootScope.$$gatingFunction=null,$rootScope.$$parentGatingFunction=null,$rootScope.$$shouldGateFunction=null,$rootScope.$$gatedWatchers=[],$rootScope.$$cleanUpQueue=[],$rootScope}])}]),function(angular){"use strict";var module=angular.module("angular-bind-html-compile",[]);module.directive("bindHtmlCompile",["$compile",function($compile){return{restrict:"A",link:function(scope,element,attrs){scope.$watch(function(){return scope.$eval(attrs.bindHtmlCompile)},function(value){element.html(value&&value.toString());var compileScope=scope;attrs.bindHtmlScope&&(compileScope=scope.$eval(attrs.bindHtmlScope)),$compile(element.contents())(compileScope)})}}}])}(window.angular),!function(t,e){"use strict";function r(t){t=t.split(" ");for(var e={},r=t.length,n=[];r--;)e.hasOwnProperty(t[r])||(e[t[r]]=1,n.unshift(t[r]));return n.join(" ")}var n="file:"===t.location.protocol,i=e.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1"),o=Array.prototype.forEach||function(t,e){if(void 0===this||null===this||"function"!=typeof t)throw new TypeError;var r,n=this.length>>>0;for(r=0;n>r;++r)r in this&&t.call(e,this[r],r,this)},a={},l=0,s=[],u=[],c={},f=function(t){return t.cloneNode(!0)},p=function(t,e){u[t]=u[t]||[],u[t].push(e)},d=function(t){for(var e=0,r=u[t].length;r>e;e++)!function(e){setTimeout(function(){u[t][e](f(a[t]))},0)}(e)},v=function(e,r){if(void 0!==a[e])a[e]instanceof SVGSVGElement?r(f(a[e])):p(e,r);else{if(!t.XMLHttpRequest)return r("Browser does not support XMLHttpRequest"),!1;a[e]={},p(e,r);var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4===i.readyState){if(404===i.status||null===i.responseXML)return r("Unable to load SVG file: "+e),n&&r("Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver."),r(),!1;if(!(200===i.status||n&&0===i.status))return r("There was a problem injecting the SVG: "+i.status+" "+i.statusText),!1;if(i.responseXML instanceof Document)a[e]=i.responseXML.documentElement;else if(DOMParser&&DOMParser instanceof Function){var t;try{var o=new DOMParser;t=o.parseFromString(i.responseText,"text/xml")}catch(l){t=void 0}if(!t||t.getElementsByTagName("parsererror").length)return r("Unable to parse SVG file: "+e),!1;a[e]=t.documentElement}d(e)}},i.open("GET",e),i.overrideMimeType&&i.overrideMimeType("text/xml"),i.send()}},h=function(e,n,a,u){var f=e.getAttribute("data-src")||e.getAttribute("src");if(!/\.svg/i.test(f))return void u("Attempted to inject a file with a non-svg extension: "+f);if(!i){var p=e.getAttribute("data-fallback")||e.getAttribute("data-png");return void(p?(e.setAttribute("src",p),u(null)):a?(e.setAttribute("src",a+"/"+f.split("/").pop().replace(".svg",".png")),u(null)):u("This browser does not support SVG and no PNG fallback was defined."))}-1===s.indexOf(e)&&(s.push(e),e.setAttribute("src",""),v(f,function(i){if("undefined"==typeof i||"string"==typeof i)return u(i),!1;var a=e.getAttribute("id");a&&i.setAttribute("id",a);var p=e.getAttribute("title");p&&i.setAttribute("title",p);var d=[].concat(i.getAttribute("class")||[],"injected-svg",e.getAttribute("class")||[]).join(" ");i.setAttribute("class",r(d));var v=e.getAttribute("style");v&&i.setAttribute("style",v);var h=[].filter.call(e.attributes,function(t){return/^data-\w[\w\-]*$/.test(t.name)});o.call(h,function(t){t.name&&t.value&&i.setAttribute(t.name,t.value)});var g,m,b,y,A,w={clipPath:["clip-path"],"color-profile":["color-profile"],cursor:["cursor"],filter:["filter"],linearGradient:["fill","stroke"],marker:["marker","marker-start","marker-mid","marker-end"],mask:["mask"],pattern:["fill","stroke"],radialGradient:["fill","stroke"]};Object.keys(w).forEach(function(t){g=t,b=w[t],m=i.querySelectorAll("defs "+g+"[id]");for(var e=0,r=m.length;r>e;e++){y=m[e].id,A=y+"-"+l;var n;o.call(b,function(t){n=i.querySelectorAll("["+t+'*="'+y+'"]');for(var e=0,r=n.length;r>e;e++)n[e].setAttribute(t,"url(#"+A+")")}),m[e].id=A}}),i.removeAttribute("xmlns:a");for(var x,S,k=i.querySelectorAll("script"),j=[],G=0,T=k.length;T>G;G++)S=k[G].getAttribute("type"),S&&"application/ecmascript"!==S&&"application/javascript"!==S||(x=k[G].innerText||k[G].textContent,j.push(x),i.removeChild(k[G]));if(j.length>0&&("always"===n||"once"===n&&!c[f])){for(var M=0,V=j.length;V>M;M++)new Function(j[M])(t);c[f]=!0}var E=i.querySelectorAll("style");o.call(E,function(t){t.textContent+=""}),e.parentNode.replaceChild(i,e),delete s[s.indexOf(e)],e=null,l++,u(i)}))},g=function(t,e,r){e=e||{};var n=e.evalScripts||"always",i=e.pngFallback||!1,a=e.each;if(void 0!==t.length){var l=0;o.call(t,function(e){h(e,n,i,function(e){a&&"function"==typeof a&&a(e),r&&t.length===++l&&r(l)})})}else t?h(t,n,i,function(e){a&&"function"==typeof a&&a(e),r&&r(1),t=null}):r&&r(0)};"object"==typeof module&&"object"==typeof module.exports?module.exports=exports=g:"function"==typeof define&&define.amd?define(function(){return g}):"object"==typeof t&&(t.SVGInjector=g)}(window,document);